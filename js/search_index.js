var search_data = {"index":{"searchIndex":["a","array","benchmark","compare","ips","helpers","job","entry","multireport","streamreport","report","entry","share","stats","bootstrap","sd","statsmetric","timing","bigdecimal","bigmath","complex","duckdb","appender","blob","column","config","connection","database","error","extractedstatements","extractedstatementsimpl","infinity","interval","logicaltype","pendingresult","preparedstatement","result","filetemplatehelpers","fileutils","float","generatorhelpers","hoe","minitest","integer","jacobian","kernel","local_package_response","lusolve","minitest","abstractreporter","assertion","assertions","backtracefilter","benchspec","benchmark","compositereporter","compress","expectations","guard","mock","parallel","executor","prideio","pridelol","progressreporter","reportable","result","runnable","skip","spec","dsl","instancemethods","statisticsreporter","summaryreporter","test","lifecyclehooks","testtask","unexpectederror","unexpectedwarning","newton","nilclass","nokogiri","cli","css","syntaxerror","tokenizer","scanerror","xpathvisitor","builtinsconfig","doctypeconfig","classresolver","decorators","slop","encodinghandler","gumbo","html","html4","builder","document","documentfragment","elementdescription","encodingreader","encodingfound","jumpsaxhandler","saxhandler","entitydescription","entitylookup","sax","parser","parsercontext","pushparser","html5","builder","document","documentfragment","node","quirksmode","builder","document","documentfragment","syntaxerror","test","xml","attr","attributedecl","builder","cdata","characterdata","comment","dtd","document","documentfragment","element","elementcontent","elementdecl","entitydecl","entityreference","namespace","node","saveoptions","nodeset","notation","pp","characterdata","node","parseoptions","processinginstruction","reader","relaxng","sax","document","parser","attribute","parsercontext","pushparser","schema","searchable","syntaxerror","text","xpath","syntaxerror","xpathcontext","xslt","stylesheet","object","platformextensionhelpers","rdoc","page","racc","accept","actiontable","compileerror","cparseparams","debugflags","error","goto","grammar","definitionenv","precedencedefinitionenv","grammarfileparser","result","grammarfilescanner","groupendmark","groupstartmark","iset","item","locationpointer","logfilegenerator","many1mark","manymark","optionmark","ormark","parseerror","parser","parserclassgenerator","parserfilegenerator","params","prec","rrconflict","reduce","rule","srconflict","shift","sourcetext","state","statetransitiontable","statetransitiontablegenerator","states","sym","symboltable","useraction","raccprofiler","rake","application","baseextensiontask","cleaner","compilerconfig","dsl","defaultloader","earlytime","extensioncompiler","extensiontask","filecreationtask","filelist","filetask","fileutilsext","invocationchain","emptyinvocationchain","invocationexceptionmixin","javaextensiontask","latetime","linkedlist","emptylinkedlist","makefileloader","multitask","namespace","packagetask","privatereader","classmethods","rakefileutils","rulerecursionoverflowerror","scope","emptyscope","task","taskargumenterror","taskarguments","tasklib","taskmanager","testtask","win32","win32homeerror","rational","rbconfig","rubymemcheck","configuration","frame","rspec","raketask","rubyrunner","stack","suppression","testtask","testtaskreporter","valgrinderror","stackprof","middleware","report","string","subthingyspec","thingyspec","xsd","xmlparser","nokogiri","%()","%()","%()","%()","&()","*()","*()","**()","+()","+()","+()","+@()","-()","-()","-@()","/()","/()","<()","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<=()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()",">()",">()",">=()","bigdecimal()","e()","html()","html4()","html5()","nokogiri()","pi()","reader()","relaxng()","schema()","slop()","xml()","xslt()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","_()","_()","__foreign_error_handler()","__run()","_add()","_added?()","_delayed_add()","_dump()","_intern()","_load()","_racc_do_parse_rb()","_racc_do_reduce()","_racc_evalact()","_racc_init_sysvars()","_racc_setup()","_racc_yyparse_rb()","abort_could_not_find_library()","abs()","accept()","accept?()","act2actid()","action()","action_out()","add()","add()","add()","add()","add()","add_child()","add_child()","add_class()","add_class()","add_description()","add_entry()","add_lines()","add_loader()","add_namespace()","add_namespace_definition()","add_next_sibling()","add_previous_sibling()","add_rakelib()","add_report()","add_report()","add_second()","add_target()","added?()","addent()","after()","after()","after()","after_run()","after_setup()","after_teardown()","aggregate()","aix?()","alias()","all_prerequisite_tasks()","all_results_have_been_run?()","ancestors()","any?()","append()","append()","append()","append()","append_blob()","append_bool()","append_class()","append_class()","append_date()","append_default()","append_double()","append_float()","append_hugeint()","append_int16()","append_int32()","append_int64()","append_int8()","append_interval()","append_null()","append_row()","append_time()","append_timestamp()","append_uhugeint()","append_uint16()","append_uint32()","append_uint64()","append_uint8()","append_varchar()","append_varchar_length()","appender()","application()","application=()","apply_to()","arg_names()","assert()","assert_empty()","assert_equal()","assert_in_delta()","assert_in_epsilon()","assert_includes()","assert_instance_of()","assert_kind_of()","assert_match()","assert_mock()","assert_nil()","assert_operator()","assert_output()","assert_path_exists()","assert_pattern()","assert_performance()","assert_performance_constant()","assert_performance_exponential()","assert_performance_linear()","assert_performance_logarithmic()","assert_performance_power()","assert_predicate()","assert_raises()","assert_respond_to()","assert_same()","assert_send()","assert_silent()","assert_throws()","async_query()","async_query_stream()","at()","at()","at_css()","at_xpath()","atan()","attr()","attr()","attribute()","attribute()","attribute()","attribute_at()","attribute_count()","attribute_hash()","attribute_nodes()","attribute_type()","attribute_with_ns()","attributes()","attributes()","attributes()","attributes?()","autorun()","backtrace_filter()","base_uri()","before()","before()","before()","before()","before_setup()","before_teardown()","begin_row()","bench()","bench_exp()","bench_linear()","bench_performance_constant()","bench_performance_exponential()","bench_performance_linear()","bench_performance_logarithmic()","bench_performance_power()","bench_range()","bench_range()","binary()","binary_extension()","binary_init_func?()","bind()","bind_args()","bind_blob()","bind_bool()","bind_date()","bind_decimal()","bind_double()","bind_float()","bind_hugeint()","bind_hugeint_internal()","bind_int16()","bind_int32()","bind_int64()","bind_int8()","bind_interval()","bind_null()","bind_parameter_index()","bind_time()","bind_timestamp()","bind_varchar()","blank?()","block?()","body()","bool_attr()","call()","call_times()","camelize()","canonicalize()","canonicalize()","capture_io()","capture_subprocess_io()","cdata()","cdata?()","cdata_block()","cdata_block()","ceil()","central_tendency()","central_tendency()","chain()","chain=()","characters()","chdir_for_build()","check_duckdb_header()","check_duckdb_library()","check_la()","child()","children()","children()","children()","children()","children=()","classes()","clean_env()","clear()","clear()","clear()","clear()","clear_actions()","clear_aliases!()","clear_args()","clear_bindings()","clear_comments()","clear_exclude()","clear_held_results()","clear_prerequisites()","clone()","clone()","close()","close()","coerce()","coerce()","collect_namespaces()","column()","column_count()","column_size()","columns()","command()","comment()","comment()","comment()","comment?()","compare()","compare!()","compare?()","compile_block()","compile_block_with_manual_loop()","compile_string()","compress()","concat_flags()","config()","config()","config()","config_clean?()","config_cross_build?()","config_static?()","config_system_libraries?()","config_with_xml2_legacy?()","conflict?()","conj()","connect()","connect()","cons()","cons()","console()","content()","content()","content()","content=()","content=()","content=()","convert_to_d3_flame_graph_format()","copy_packaged_libraries_headers()","cos()","create()","create_cdata()","create_comment()","create_element()","create_entity()","create_external_subset()","create_internal_subset()","create_report()","create_rule()","create_stats()","create_text_node()","cross_compiling()","cross_config_options()","cross_platform()","css()","css()","css()","css_path()","current_scope()","cycles_per_100ms()","darwin?()","data()","declare_precedence()","deconstruct()","deconstruct()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","decorate()","decorate!()","decorators()","decref()","default()","default?()","default_configuration()","default_namespace=()","default_sub_element()","define()","define()","define()","define()","define()","define()","define_task()","delete()","delete()","delete()","delete()","delete()","dependencies()","deprecated?()","deprecated_attributes()","depth()","desc()","describe()","description()","description()","destroy()","dfa()","dfa()","dfdxi()","diff()","diff()","diff=()","directory()","disconnect()","display()","div()","divmod()","do_clean()","do_help()","do_parse()","do_xinclude()","document()","document()","document?()","double_fig()","duckdb_library_name()","dummy?()","dup()","dup()","dup()","dup()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_index()","each_index()","each_la()","each_nonterminal()","each_reduce()","each_rule()","each_rule()","each_shift()","each_state()","each_terminal()","each_useless_nonterminal()","each_useless_rule()","each_with_index()","egrep()","elem?()","element?()","element_children()","element_type()","elements()","elements()","empty()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty_element?()","enabled?()","encode_special_chars()","encoding()","encoding()","encoding=()","end_document()","end_element()","end_element()","end_element_namespace()","end_element_namespace()","end_precedence_declaration()","end_row()","enhance()","enhance_with_matching_rule()","ensure_func()","ensure_package_configuration()","entities()","entity_type()","enum_dictionary_values()","enumeration()","eql?()","eql?()","eql?()","eql?()","error()","error()","error?()","error?()","error_message()","error_percentage()","error_percentage()","errors()","evaluate()","exception_details()","exclude()","excluded_from_list?()","execute()","execute()","execute()","execute_check_state()","execute_pending()","execute_task()","execution_finished?()","existing()","existing!()","exp()","expect()","expect()","exponent()","ext()","ext()","extensions()","external_id()","external_id()","external_subset()","extras()","fail_after()","fatal?()","fetch()","file()","file()","files()","filter()","filter()","find()","finish()","finish()","finite?()","first()","first_element_child()","fit_error()","fit_exponential()","fit_linear()","fit_logarithmic()","fit_power()","fix()","fix()","flamegraph_row()","flamegraph_stacks()","floor()","flunk()","flush()","flush_delayed()","footer()","footer()","footer()","footer()","format_deps()","frac()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment()","fragment?()","frames()","from()","from_document()","from_document()","from_file()","from_io()","from_json()","from_memory()","full_comment()","gem_file()","gem_file_platform()","gen_action_tables()","gen_goto_tables()","generate()","generate()","generate()","generate_cross_compile_extension_task_for()","generate_did_you_mean_suggestions()","generate_extension_task_for()","generate_gem_task()","generate_java_compile_extension_task_for()","generate_java_source_code_for()","generate_json()","generate_json()","generate_message_for_undefined_task()","generate_multi_cross_compile_extension_task_for()","generate_parser()","generate_parser_file()","generate_scaffold_structure()","generate_source_code_for()","get()","get_attribute()","get_config_flag()","glob()","gnome_source()","goto_id()","grammar()","gsub()","gsub!()","has_attribute?()","has_key?()","hash()","hash=()","have_builtin_func()","have_libxml_headers?()","have_package_configuration()","head?()","header()","higher()","hold!()","hold?()","href()","html5_dtd?()","html?()","html_dtd?()","humanize_duration()","i_suck_and_my_tests_are_order_dependent!()","iconv_configure_flags()","implied_end_tag?()","implied_start_tag?()","import()","in_binary?()","in_namespace()","in_ruby?()","include()","include?()","include?()","incref()","increment()","index()","infinite?()","info_signal()","init()","init()","init()","init()","init()","init()","init()","inline?()","inner_html()","inner_html()","inner_html()","inner_html=()","inner_text()","inner_text()","inner_xml()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect_attributes()","install_default_aliases()","intern()","intern()","intern()","internal_subset()","interpret_loosely()","interrupt()","investigation()","invoke()","invoke_with_call_chain()","io()","ips()","ips()","ips()","ips_quick()","ips_sd()","isequal()","is_a?()","iso8601_parse()","it()","item()","iterations_per_sec()","jacobian()","java_compiling()","jruby?()","json!()","json?()","key?()","key?()","key?()","key_description()","key_descriptions()","keys()","keys()","kind_of?()","kwattr_add()","kwattr_append()","kwattr_remove()","kwattr_values()","la=()","lang()","lang()","lang=()","last()","last_element_child()","left()","length()","let()","libflag_to_filename()","library_version()","limit()","line()","line()","line=()","lineno()","load()","load()","load_held_results()","load_rakefile()","load_rakefile()","local_have_library()","local_name()","location()","location()","location()","log()","log_conflict()","log_useless()","logging()","logical_type()","lookup()","lower()","ludecomp()","lusolve()","maglev?()","main()","make()","make()","make_closure()","make_filename()","make_my_diffs_pretty!()","make_test_cmd()","many()","many1()","matches?()","math()","max_samples()","mean()","member?()","member?()","memory()","message()","message()","meta_encoding()","meta_encoding=()","metadata()","metadata?()","method_missing()","method_missing()","method_missing()","methods_matching()","mingw_gcc_executable()","mingw_host()","mk_interval()","mkmapexp()","mode()","modeline()","modulo()","mri?()","mu_pp()","mu_pp_for_diff()","mult()","multitask()","must_be()","must_be_close_to()","must_be_empty()","must_be_instance_of()","must_be_kind_of()","must_be_nil()","must_be_same_as()","must_be_silent()","must_be_within_epsilon()","must_equal()","must_include()","must_match()","must_output()","must_pattern_match()","must_raise()","must_respond_to()","must_throw()","n_rrconflicts()","n_rrconflicts()","n_significant_digits()","n_srconflicts()","n_srconflicts()","n_useless_nonterminals()","n_useless_rules()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name=()","name=()","namespace()","namespace()","namespace=()","namespace_definitions()","namespace_scopes()","namespace_uri()","namespaced_key?()","namespaces()","namespaces()","namespaces()","nan?()","native_content=()","needed?()","needed?()","needed?()","needs_darwin_linker_hack()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_scope()","newobj()","next()","next()","next=()","next_element()","next_sibling()","next_token()","nfa()","nfa()","nix?()","nlsolve()","node_name()","node_name=()","node_type()","node_type()","nonassoc()","none?()","nonterminal?()","nonterminal_base()","nonterminals()","nonzero?()","normalized_frames()","notations()","now()","nowrite()","nowrite()","nparams()","nt_max()","null()","null=()","null=()","nullable?()","nullable?()","occur()","on_error()","once_writer()","open()","openbsd?()","option()","optional_attributes()","options()","options()","options()","options=()","original_content()","original_dir()","osx?()","outact()","outer_xml()","output()","output_conflict()","output_rule()","output_state()","output_token()","output_useless()","outrrconf()","outsrconf()","overall_samples()","overlaps?()","package_dir_path()","package_name()","parallel_executor()","parallelize_me!()","param_type()","parameter_name()","parent()","parent=()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_file()","parse_file()","parse_io()","parse_json()","parse_memory()","parse_option_string()","parse_stylesheet_doc()","parse_with()","parser_class()","parser_class()","pass()","passed?()","passed?()","passed?()","path()","path_must_exist()","path_wont_exist()","pathmap()","pathmap()","pathmap_explode()","pathmap_partial()","pathmap_replace()","pending_prepared()","pending_prepared_stream()","platform()","platform()","pointer_id()","pointer_out()","pop()","pow()","power()","prec()","precedence()","precedence=()","precedence_table()","precision()","precision_scale()","precs()","prefix()","prefix()","prefix()","prefix()","prepare()","prepared_statement()","prepared_statement()","prepend_child()","prerecord()","prerequisite_tasks()","preserving_globals()","previous()","previous=()","previous_element()","previous_sibling()","pride()","pride()","pride!()","pride?()","print()","print_alphabetical_flamegraph()","print_callgrind()","print_d3_flamegraph()","print_debug()","print_dump()","print_file()","print_files()","print_flamegraph()","print_graphviz()","print_json()","print_message()","print_method()","print_stackcollapse()","print_text()","print_timeline_flamegraph()","proc()","proc?()","process_env()","process_recipe()","processing_instruction()","processing_instruction?()","push()","put_state_transition_table()","query()","query_multi_sql()","query_progress()","quiet()","quiet!()","quiet=()","quiet?()","quo()","quote_params()","racc_accept()","racc_e_pop()","racc_next_state()","racc_print_stacks()","racc_print_states()","racc_read_token()","racc_reduce()","racc_shift()","racc_token2str()","raise_not_found_library()","rake_check_options()","rake_check_options()","rake_output_message()","rake_output_message()","read()","read_io()","read_io()","read_io()","read_memory()","read_memory()","read_memory()","read_memory()","read_memory()","read_only?()","record()","recovery()","recovery=()","reduce()","reduce_n()","reduce_table()","reenable()","reference()","refute()","refute_empty()","refute_equal()","refute_in_delta()","refute_in_epsilon()","refute_includes()","refute_instance_of()","refute_kind_of()","refute_match()","refute_nil()","refute_operator()","refute_path_exists()","refute_pattern()","refute_predicate()","refute_respond_to()","refute_same()","register()","register_namespaces()","register_ns()","register_plugin()","register_spec_type()","register_variable()","register_variables()","related_class()","remainder()","remove()","remove()","remove_attr()","remove_attribute()","remove_attribute()","remove_class()","remove_class()","remove_namespaces!()","replace()","replace()","replace_entities()","replace_entities()","replace_entities=()","replace_entities=()","report()","report()","report()","report()","report_conflict()","report_list()","report_useless()","report_valgrind_errors()","reporter()","required_attributes()","resolve()","resolve_args()","respond_to_missing?()","result_code()","result_code()","results()","return_type()","reverse()","right()","root()","root=()","round()","row_count()","row_size()","rows_changed()","rr_conflict()","rrconflict_exist?()","rruleid()","rubinius?()","ruby()","ruby()","rule()","rule()","rule()","ruleid()","run()","run()","run()","run()","run()","run()","run()","run()","run_benchmark()","run_comparison()","run_comparison()","run_one_method()","run_ruby_with_valgrind()","run_single?()","run_task()","run_warmup()","run_with_threads()","runnable_methods()","runnable_methods()","runnables()","running()","running()","running?()","runtime()","safe_ln()","safe_read()","sample()","samples()","save()","save!()","save_end_tag?()","save_exception_mode()","save_held_results()","save_limit()","save_rounding_mode()","scale()","scale()","scale()","scope()","scope_name()","scope_name()","search()","search()","search_path()","seconds()","section()","seed()","self_closing?()","self_null?()","separated_by()","separated_by1()","seq()","serialize()","serialize()","serialize()","serialize()","serialize()","set()","set_arg_names()","set_attribute()","set_config()","set_table()","setup()","setup()","setup()","setup()","sh()","sh_export_path()","share()","shift()","shift()","shift_n()","should_error_on_expect_mismatch?()","should_report_srconflict?()","should_terminal()","should_terminal?()","show_total_time!()","shutdown()","sigma()","sign()","sin()","size()","size()","size()","size()","size()","size()","size()","skip()","skip?()","skip?()","skip_until()","skipped?()","skipped?()","skipped?()","slice()","slop!()","slowdown()","slowdown()","solaris?()","source()","source?()","source_text()","sources()","spec_type()","specify()","speedup()","speedup()","split()","split_all()","sqrt()","sqrt()","sr_conflict()","srconflict_exist?()","start()","start()","start()","start_document()","start_element()","start_element()","start_element_namespace()","start_element_namespace()","start_running()","start_running()","start_symbol=()","start_warming()","start_warming()","state()","state()","state_transition_table()","state_transition_table()","statement_type()","statement_type()","states()","stddev()","stop()","streaming?()","strict()","strict?()","string_symbol?()","stub()","sub()","sub()","sub()","sub!()","sub_elements()","subject()","suite()","suite=()","swap()","symbol_locations()","symbols()","system_id()","system_id()","tar_bz2_file()","tar_gz_file()","tar_xz_file()","target_dir()","task()","task_defined?()","tasks()","tasks()","tasks()","tasks_in_scope()","teardown()","template_extconf()","template_rake_extension()","template_rake_extension_cross_compile()","template_rake_extension_java_compile()","template_rake_extension_multi_cross_compile()","template_rake_extension_with_platform()","template_rake_gemspec()","template_rakefile()","template_source_c()","template_source_h()","template_source_java()","term=()","terminal?()","terminals()","test_files=()","test_order()","test_should_do_the_first_thing()","test_should_do_the_second_thing()","text()","text()","text()","text?()","tgz_file()","things_to_diff()","time_us()","time_us()","timestamp()","timestamp()","timestamp()","title()","title=()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_d()","to_d()","to_d()","to_d()","to_d()","to_d()","to_d()","to_digits()","to_f()","to_hash()","to_html()","to_html()","to_html()","to_html()","to_html()","to_i()","to_int()","to_interval()","to_java()","to_r()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","to_xhtml()","to_xhtml()","to_xhtml()","to_xml()","to_xml()","to_xml()","to_xml()","token_table()","token_to_str()","token_value_table()","top_level()","transform()","traverse()","truffle?()","truncate()","try_link_iconv()","try_package_configuration()","type()","type()","type()","type()","type()","unix?()","unlink()","unlink()","unpacked_gem_dir_platform()","update()","update_a()","url()","use_postponed_job!()","useless=()","useless=()","useless?()","useless?()","useless_nonterminal_exist?()","useless_rule_exist?()","valid?()","validate()","validate()","validate()","validation_for_fit()","value()","value()","value=()","value?()","value?()","values()","values_at()","variance()","verbose()","verbose()","verify()","version()","version()","walk_method()","warming()","warming()","warmup_stats()","warmup_stats()","warning()","warning()","warning?()","when_writing()","when_writing()","width()","windows?()","windows?()","with()","with_application()","with_defaults()","wont_be()","wont_be_close_to()","wont_be_empty()","wont_be_instance_of()","wont_be_kind_of()","wont_be_nil()","wont_be_same_as()","wont_be_within_epsilon()","wont_equal()","wont_include()","wont_match()","wont_pattern_match()","wont_respond_to()","working_dir()","wrap()","wrap()","wrap()","write()","write()","write_html_to()","write_log()","write_to()","write_to()","write_xhtml_to()","write_xml_to()","xml?()","xml_version()","xmldecl()","xpath()","xpath()","xpath_doctype()","xpath_doctype()","xpath_doctype()","xpath_for()","yyaccept()","yyerrok()","yyerror()","yylex()","zero?()","zip_file()","zlib_source()","|()","|()","|()","|()","changelog","contribution","dockerfile","gemfile","gemfile.lock","license","readme","rakefile","setup","getduckdb.sh","stackprof-flamegraph.pl","stackprof-gprof2dot.py","gem.build_complete","gem_make.out","mkmf.log","gem.build_complete","gem_make.out","gem.build_complete","gem_make.out","mkmf.log","history","license","readme","license","makefile","history","manifest","readme","rakefile","gemfile","license-dependencies","license","readme","depend","changes","makefile","thanks","tokenizer.rex","bsdl","copying","changelog","readme.ja","readme","todo","grammar.en","grammar2.en","command.ja.html","debug.ja","grammar.ja","index.ja.html","parser.ja","usage.ja.html","makefile","history","mit-license","readme","command_line_usage","rakefile1","rakefile2","glossary","proto_rake","rake.1","rakefile","rational","gemfile","history","license","readme","rakefile","compile.feature","cross-compile.feature","cross-package-multi.feature","cross-package.feature","java-compile.feature","java-no-native-compile.feature","java-package.feature","package.feature","cross-ruby.rake","bootstrap.rake","common.rake","cucumber.rake","gem.rake","rspec.rake","gemfile","gemfile.lock","license","readme","rakefile","ruby.supp","changelog","gemfile","license","readme","rakefile","stackprof-flamegraph.pl","stackprof-gprof2dot.py","makefile","flamegraph.js","viewer.html","readme","flamegraph.pl","gprof2dot.py","hotshotmain.py"],"longSearchIndex":["a","array","benchmark","benchmark::compare","benchmark::ips","benchmark::ips::helpers","benchmark::ips::job","benchmark::ips::job::entry","benchmark::ips::job::multireport","benchmark::ips::job::streamreport","benchmark::ips::report","benchmark::ips::report::entry","benchmark::ips::share","benchmark::ips::stats","benchmark::ips::stats::bootstrap","benchmark::ips::stats::sd","benchmark::ips::stats::statsmetric","benchmark::timing","bigdecimal","bigmath","complex","duckdb","duckdb::appender","duckdb::blob","duckdb::column","duckdb::config","duckdb::connection","duckdb::database","duckdb::error","duckdb::extractedstatements","duckdb::extractedstatementsimpl","duckdb::infinity","duckdb::interval","duckdb::logicaltype","duckdb::pendingresult","duckdb::preparedstatement","duckdb::result","filetemplatehelpers","fileutils","float","generatorhelpers","hoe","hoe::minitest","integer","jacobian","kernel","local_package_response","lusolve","minitest","minitest::abstractreporter","minitest::assertion","minitest::assertions","minitest::backtracefilter","minitest::benchspec","minitest::benchmark","minitest::compositereporter","minitest::compress","minitest::expectations","minitest::guard","minitest::mock","minitest::parallel","minitest::parallel::executor","minitest::prideio","minitest::pridelol","minitest::progressreporter","minitest::reportable","minitest::result","minitest::runnable","minitest::skip","minitest::spec","minitest::spec::dsl","minitest::spec::dsl::instancemethods","minitest::statisticsreporter","minitest::summaryreporter","minitest::test","minitest::test::lifecyclehooks","minitest::testtask","minitest::unexpectederror","minitest::unexpectedwarning","newton","nilclass","nokogiri","nokogiri::cli","nokogiri::css","nokogiri::css::syntaxerror","nokogiri::css::tokenizer","nokogiri::css::tokenizer::scanerror","nokogiri::css::xpathvisitor","nokogiri::css::xpathvisitor::builtinsconfig","nokogiri::css::xpathvisitor::doctypeconfig","nokogiri::classresolver","nokogiri::decorators","nokogiri::decorators::slop","nokogiri::encodinghandler","nokogiri::gumbo","nokogiri::html","nokogiri::html4","nokogiri::html4::builder","nokogiri::html4::document","nokogiri::html4::documentfragment","nokogiri::html4::elementdescription","nokogiri::html4::encodingreader","nokogiri::html4::encodingreader::encodingfound","nokogiri::html4::encodingreader::jumpsaxhandler","nokogiri::html4::encodingreader::saxhandler","nokogiri::html4::entitydescription","nokogiri::html4::entitylookup","nokogiri::html4::sax","nokogiri::html4::sax::parser","nokogiri::html4::sax::parsercontext","nokogiri::html4::sax::pushparser","nokogiri::html5","nokogiri::html5::builder","nokogiri::html5::document","nokogiri::html5::documentfragment","nokogiri::html5::node","nokogiri::html5::quirksmode","nokogiri::html::builder","nokogiri::html::document","nokogiri::html::documentfragment","nokogiri::syntaxerror","nokogiri::test","nokogiri::xml","nokogiri::xml::attr","nokogiri::xml::attributedecl","nokogiri::xml::builder","nokogiri::xml::cdata","nokogiri::xml::characterdata","nokogiri::xml::comment","nokogiri::xml::dtd","nokogiri::xml::document","nokogiri::xml::documentfragment","nokogiri::xml::element","nokogiri::xml::elementcontent","nokogiri::xml::elementdecl","nokogiri::xml::entitydecl","nokogiri::xml::entityreference","nokogiri::xml::namespace","nokogiri::xml::node","nokogiri::xml::node::saveoptions","nokogiri::xml::nodeset","nokogiri::xml::notation","nokogiri::xml::pp","nokogiri::xml::pp::characterdata","nokogiri::xml::pp::node","nokogiri::xml::parseoptions","nokogiri::xml::processinginstruction","nokogiri::xml::reader","nokogiri::xml::relaxng","nokogiri::xml::sax","nokogiri::xml::sax::document","nokogiri::xml::sax::parser","nokogiri::xml::sax::parser::attribute","nokogiri::xml::sax::parsercontext","nokogiri::xml::sax::pushparser","nokogiri::xml::schema","nokogiri::xml::searchable","nokogiri::xml::syntaxerror","nokogiri::xml::text","nokogiri::xml::xpath","nokogiri::xml::xpath::syntaxerror","nokogiri::xml::xpathcontext","nokogiri::xslt","nokogiri::xslt::stylesheet","object","platformextensionhelpers","rdoc","rdoc::page","racc","racc::accept","racc::actiontable","racc::compileerror","racc::cparseparams","racc::debugflags","racc::error","racc::goto","racc::grammar","racc::grammar::definitionenv","racc::grammar::precedencedefinitionenv","racc::grammarfileparser","racc::grammarfileparser::result","racc::grammarfilescanner","racc::groupendmark","racc::groupstartmark","racc::iset","racc::item","racc::locationpointer","racc::logfilegenerator","racc::many1mark","racc::manymark","racc::optionmark","racc::ormark","racc::parseerror","racc::parser","racc::parserclassgenerator","racc::parserfilegenerator","racc::parserfilegenerator::params","racc::prec","racc::rrconflict","racc::reduce","racc::rule","racc::srconflict","racc::shift","racc::sourcetext","racc::state","racc::statetransitiontable","racc::statetransitiontablegenerator","racc::states","racc::sym","racc::symboltable","racc::useraction","raccprofiler","rake","rake::application","rake::baseextensiontask","rake::cleaner","rake::compilerconfig","rake::dsl","rake::defaultloader","rake::earlytime","rake::extensioncompiler","rake::extensiontask","rake::filecreationtask","rake::filelist","rake::filetask","rake::fileutilsext","rake::invocationchain","rake::invocationchain::emptyinvocationchain","rake::invocationexceptionmixin","rake::javaextensiontask","rake::latetime","rake::linkedlist","rake::linkedlist::emptylinkedlist","rake::makefileloader","rake::multitask","rake::namespace","rake::packagetask","rake::privatereader","rake::privatereader::classmethods","rake::rakefileutils","rake::rulerecursionoverflowerror","rake::scope","rake::scope::emptyscope","rake::task","rake::taskargumenterror","rake::taskarguments","rake::tasklib","rake::taskmanager","rake::testtask","rake::win32","rake::win32::win32homeerror","rational","rbconfig","rubymemcheck","rubymemcheck::configuration","rubymemcheck::frame","rubymemcheck::rspec","rubymemcheck::rspec::raketask","rubymemcheck::rubyrunner","rubymemcheck::stack","rubymemcheck::suppression","rubymemcheck::testtask","rubymemcheck::testtaskreporter","rubymemcheck::valgrinderror","stackprof","stackprof::middleware","stackprof::report","string","subthingyspec","thingyspec","xsd","xsd::xmlparser","xsd::xmlparser::nokogiri","bigdecimal#%()","local_package_response::%()","nokogiri::xml::nodeset#%()","nokogiri::xml::searchable#%()","nokogiri::xml::nodeset#&()","bigdecimal#*()","rake::filelist#*()","bigdecimal#**()","bigdecimal#+()","nokogiri::xml::nodeset#+()","stackprof::report#+()","bigdecimal#+@()","bigdecimal#-()","nokogiri::xml::nodeset#-()","bigdecimal#-@()","bigdecimal#/()","nokogiri::xml::searchable#/()","bigdecimal#<()","benchmark::ips::job::multireport#<<()","minitest::compositereporter#<<()","minitest::parallel::executor#<<()","nokogiri::html4::sax::pushparser#<<()","nokogiri::xml::builder#<<()","nokogiri::xml::document#<<()","nokogiri::xml::node#<<()","nokogiri::xml::nodeset#<<()","nokogiri::xml::sax::pushparser#<<()","rake::filelist#<<()","bigdecimal#<=()","bigdecimal#<=>()","nokogiri::xml::node#<=>()","rake::earlytime#<=>()","rake::latetime#<=>()","bigdecimal#==()","duckdb::interval#==()","nokogiri::xml::node#==()","nokogiri::xml::nodeset#==()","nokogiri::xml::parseoptions#==()","racc::locationpointer#==()","racc::rule#==()","racc::state#==()","rake::filelist#==()","rake::linkedlist#==()","bigdecimal#===()","bigdecimal#>()","nokogiri::xml::searchable#>()","bigdecimal#>=()","kernel#bigdecimal()","bigmath#e()","nokogiri::html()","nokogiri::html4()","nokogiri::html5()","object#nokogiri()","bigmath#pi()","nokogiri::xml::reader()","nokogiri::xml::relaxng()","nokogiri::xml::schema()","nokogiri::slop()","nokogiri::xml()","nokogiri::xslt()","nokogiri::encodinghandler::[]()","nokogiri::html4::elementdescription::[]()","nokogiri::html4::entitylookup#[]()","nokogiri::xml::builder#[]()","nokogiri::xml::node#[]()","nokogiri::xml::nodeset#[]()","racc::grammar#[]()","racc::iset#[]()","racc::rule#[]()","racc::states#[]()","racc::symboltable#[]()","rake::filelist::[]()","rake::namespace#[]()","rake::task::[]()","rake::taskarguments#[]()","rake::taskmanager#[]()","duckdb::config#[]=()","nokogiri::xml::node#[]=()","racc::iset#[]=()","minitest::spec::dsl::instancemethods#_()","racc::grammar::definitionenv#_()","nokogiri::test::__foreign_error_handler()","minitest::__run()","racc::grammar::definitionenv#_add()","racc::grammar::definitionenv#_added?()","racc::grammar::definitionenv#_delayed_add()","bigdecimal#_dump()","racc::grammar::definitionenv#_intern()","bigdecimal::_load()","racc::parser#_racc_do_parse_rb()","racc::parser#_racc_do_reduce()","racc::parser#_racc_evalact()","racc::parser#_racc_init_sysvars()","racc::parser#_racc_setup()","racc::parser#_racc_yyparse_rb()","object#abort_could_not_find_library()","bigdecimal#abs()","nokogiri::xml::node#accept()","racc::rule#accept?()","racc::statetransitiontablegenerator#act2actid()","racc::grammar::definitionenv#action()","racc::logfilegenerator#action_out()","bigdecimal#add()","object#add()","racc::grammar#add()","racc::iset#add()","rake::filelist#add()","nokogiri::xml::document#add_child()","nokogiri::xml::node#add_child()","nokogiri::xml::node#add_class()","nokogiri::xml::nodeset#add_class()","rake::task#add_description()","benchmark::ips::report#add_entry()","stackprof::report#add_lines()","rake::application#add_loader()","nokogiri::xml::node#add_namespace()","nokogiri::xml::node#add_namespace_definition()","nokogiri::xml::node#add_next_sibling()","nokogiri::xml::node#add_previous_sibling()","rake::add_rakelib()","benchmark::ips::job::multireport#add_report()","benchmark::ips::job::streamreport#add_report()","benchmark::timing::add_second()","rake::rulerecursionoverflowerror#add_target()","racc::grammar#added?()","racc::statetransitiontablegenerator#addent()","minitest::spec::dsl#after()","nokogiri::xml::node#after()","nokogiri::xml::nodeset#after()","minitest::after_run()","minitest::test::lifecyclehooks#after_setup()","minitest::test::lifecyclehooks#after_teardown()","nokogiri::xml::syntaxerror::aggregate()","object#aix?()","nokogiri::encodinghandler::alias()","rake::task#all_prerequisite_tasks()","benchmark::ips::job#all_results_have_been_run?()","nokogiri::xml::node#ancestors()","racc::debugflags#any?()","duckdb::appender#append()","rake::invocationchain#append()","rake::invocationchain::append()","rake::invocationchain::emptyinvocationchain#append()","duckdb::appender#append_blob()","duckdb::appender#append_bool()","nokogiri::xml::node#append_class()","nokogiri::xml::nodeset#append_class()","duckdb::appender#append_date()","duckdb::appender#append_default()","duckdb::appender#append_double()","duckdb::appender#append_float()","duckdb::appender#append_hugeint()","duckdb::appender#append_int16()","duckdb::appender#append_int32()","duckdb::appender#append_int64()","duckdb::appender#append_int8()","duckdb::appender#append_interval()","duckdb::appender#append_null()","duckdb::appender#append_row()","duckdb::appender#append_time()","duckdb::appender#append_timestamp()","duckdb::appender#append_uhugeint()","duckdb::appender#append_uint16()","duckdb::appender#append_uint32()","duckdb::appender#append_uint64()","duckdb::appender#append_uint8()","duckdb::appender#append_varchar()","duckdb::appender#append_varchar_length()","duckdb::connection#appender()","rake::application()","rake::application=()","nokogiri::xslt::stylesheet#apply_to()","rake::task#arg_names()","minitest::assertions#assert()","minitest::assertions#assert_empty()","minitest::assertions#assert_equal()","minitest::assertions#assert_in_delta()","minitest::assertions#assert_in_epsilon()","minitest::assertions#assert_includes()","minitest::assertions#assert_instance_of()","minitest::assertions#assert_kind_of()","minitest::assertions#assert_match()","minitest::assertions#assert_mock()","minitest::assertions#assert_nil()","minitest::assertions#assert_operator()","minitest::assertions#assert_output()","minitest::assertions#assert_path_exists()","minitest::assertions#assert_pattern()","minitest::benchmark#assert_performance()","minitest::benchmark#assert_performance_constant()","minitest::benchmark#assert_performance_exponential()","minitest::benchmark#assert_performance_linear()","minitest::benchmark#assert_performance_logarithmic()","minitest::benchmark#assert_performance_power()","minitest::assertions#assert_predicate()","minitest::assertions#assert_raises()","minitest::assertions#assert_respond_to()","minitest::assertions#assert_same()","minitest::assertions#assert_send()","minitest::assertions#assert_silent()","minitest::assertions#assert_throws()","duckdb::connection#async_query()","duckdb::connection#async_query_stream()","nokogiri::xml::nodeset#at()","nokogiri::xml::searchable#at()","nokogiri::xml::searchable#at_css()","nokogiri::xml::searchable#at_xpath()","bigmath#atan()","nokogiri::xml::node#attr()","nokogiri::xml::nodeset#attr()","nokogiri::xml::node#attribute()","nokogiri::xml::nodeset#attribute()","nokogiri::xml::reader#attribute()","nokogiri::xml::reader#attribute_at()","nokogiri::xml::reader#attribute_count()","nokogiri::xml::reader#attribute_hash()","nokogiri::xml::node#attribute_nodes()","nokogiri::xml::attributedecl#attribute_type()","nokogiri::xml::node#attribute_with_ns()","nokogiri::xml::dtd#attributes()","nokogiri::xml::node#attributes()","nokogiri::xml::reader#attributes()","nokogiri::xml::reader#attributes?()","minitest::autorun()","minitest#backtrace_filter()","nokogiri::xml::reader#base_uri()","minitest::spec::dsl#before()","nokogiri::xml::node#before()","nokogiri::xml::nodeset#before()","racc::locationpointer#before()","minitest::test::lifecyclehooks#before_setup()","minitest::test::lifecyclehooks#before_teardown()","duckdb::appender#begin_row()","minitest::benchspec::bench()","minitest::benchmark::bench_exp()","minitest::benchmark::bench_linear()","minitest::benchspec::bench_performance_constant()","minitest::benchspec::bench_performance_exponential()","minitest::benchspec::bench_performance_linear()","minitest::benchspec::bench_performance_logarithmic()","minitest::benchspec::bench_performance_power()","minitest::benchspec::bench_range()","minitest::benchmark::bench_range()","rake::extensiontask#binary()","platformextensionhelpers#binary_extension()","rubymemcheck::frame#binary_init_func?()","duckdb::preparedstatement#bind()","duckdb::preparedstatement#bind_args()","duckdb::preparedstatement#bind_blob()","duckdb::preparedstatement#bind_bool()","duckdb::preparedstatement#bind_date()","duckdb::preparedstatement#bind_decimal()","duckdb::preparedstatement#bind_double()","duckdb::preparedstatement#bind_float()","duckdb::preparedstatement#bind_hugeint()","duckdb::preparedstatement#bind_hugeint_internal()","duckdb::preparedstatement#bind_int16()","duckdb::preparedstatement#bind_int32()","duckdb::preparedstatement#bind_int64()","duckdb::preparedstatement#bind_int8()","duckdb::preparedstatement#bind_interval()","duckdb::preparedstatement#bind_null()","duckdb::preparedstatement#bind_parameter_index()","duckdb::preparedstatement#bind_time()","duckdb::preparedstatement#bind_timestamp()","duckdb::preparedstatement#bind_varchar()","nokogiri::xml::node#blank?()","nokogiri::html4::elementdescription#block?()","benchmark::ips::report::entry#body()","racc::parserfilegenerator::params::bool_attr()","stackprof::middleware#call()","benchmark::ips::job::entry#call_times()","filetemplatehelpers#camelize()","nokogiri::xml::document#canonicalize()","nokogiri::xml::node#canonicalize()","minitest::assertions#capture_io()","minitest::assertions#capture_subprocess_io()","nokogiri::xml::builder#cdata()","nokogiri::xml::node#cdata?()","nokogiri::xml::sax::document#cdata_block()","xsd::xmlparser::nokogiri#cdata_block()","bigdecimal#ceil()","benchmark::ips::stats::bootstrap#central_tendency()","benchmark::ips::stats::sd#central_tendency()","rake::invocationexceptionmixin#chain()","rake::invocationexceptionmixin#chain=()","nokogiri::xml::sax::document#characters()","object#chdir_for_build()","object#check_duckdb_header()","object#check_duckdb_library()","racc::state#check_la()","nokogiri::xml::node#child()","nokogiri::xml::elementcontent#children()","nokogiri::xml::entityreference#children()","nokogiri::xml::node#children()","nokogiri::xml::nodeset#children()","nokogiri::xml::node#children=()","nokogiri::xml::node#classes()","benchmark::timing::clean_env()","racc::iset#clear()","rake::task#clear()","rake::task::clear()","rake::taskmanager#clear()","rake::task#clear_actions()","nokogiri::encodinghandler::clear_aliases!()","rake::task#clear_args()","duckdb::preparedstatement#clear_bindings()","rake::task#clear_comments()","rake::filelist#clear_exclude()","benchmark::ips::job#clear_held_results()","rake::task#clear_prerequisites()","nokogiri::xml::document#clone()","nokogiri::xml::node#clone()","duckdb::appender#close()","duckdb::database#close()","bigdecimal#coerce()","nokogiri::xml::node#coerce()","nokogiri::xml::document#collect_namespaces()","nokogiri::xml::sax::parsercontext#column()","duckdb::result#column_count()","duckdb::result#column_size()","duckdb::result#columns()","rubymemcheck::configuration#command()","nokogiri::xml::builder#comment()","nokogiri::xml::sax::document#comment()","rake::task#comment()","nokogiri::xml::node#comment?()","benchmark::compare#compare()","benchmark::ips::job#compare!()","benchmark::ips::job#compare?()","benchmark::ips::job::entry#compile_block()","benchmark::ips::job::entry#compile_block_with_manual_loop()","benchmark::ips::job::entry#compile_string()","minitest::compress#compress()","object#concat_flags()","benchmark::ips::job#config()","nokogiri::css::xpathvisitor#config()","rubymemcheck::config()","object#config_clean?()","object#config_cross_build?()","object#config_static?()","object#config_system_libraries?()","object#config_with_xml2_legacy?()","racc::state#conflict?()","rake::linkedlist#conj()","duckdb::connection#connect()","duckdb::database#connect()","rake::linkedlist::cons()","rake::linkedlist::emptylinkedlist::cons()","nokogiri::cli::console()","nokogiri::xml::elementdecl#content()","nokogiri::xml::entitydecl#content()","nokogiri::xml::node#content()","nokogiri::xml::attr#content=()","nokogiri::xml::node#content=()","nokogiri::xml::text#content=()","stackprof::report#convert_to_d3_flame_graph_format()","object#copy_packaged_libraries_headers()","bigmath#cos()","minitest::testtask::create()","nokogiri::xml::document#create_cdata()","nokogiri::xml::document#create_comment()","nokogiri::xml::document#create_element()","nokogiri::xml::document#create_entity()","nokogiri::xml::node#create_external_subset()","nokogiri::xml::node#create_internal_subset()","benchmark::ips::job#create_report()","rake::task::create_rule()","benchmark::ips::job#create_stats()","nokogiri::xml::document#create_text_node()","rake::extensiontask#cross_compiling()","rake::extensiontask#cross_config_options()","rake::extensiontask#cross_platform()","nokogiri::xml::documentfragment#css()","nokogiri::xml::nodeset#css()","nokogiri::xml::searchable#css()","nokogiri::xml::node#css_path()","rake::taskmanager#current_scope()","benchmark::ips::job#cycles_per_100ms()","object#darwin?()","benchmark::ips::report#data()","racc::grammar#declare_precedence()","nokogiri::xml::documentfragment#deconstruct()","nokogiri::xml::nodeset#deconstruct()","nokogiri::xml::attr#deconstruct_keys()","nokogiri::xml::document#deconstruct_keys()","nokogiri::xml::namespace#deconstruct_keys()","nokogiri::xml::node#deconstruct_keys()","nokogiri::xml::document#decorate()","nokogiri::xml::node#decorate!()","nokogiri::xml::document#decorators()","racc::reduce#decref()","nokogiri::xml::attributedecl#default()","nokogiri::xml::reader#default?()","rubymemcheck::default_configuration()","nokogiri::xml::node#default_namespace=()","nokogiri::html4::elementdescription#default_sub_element()","racc::grammar::define()","rake::baseextensiontask#define()","rake::extensiontask#define()","rake::javaextensiontask#define()","rake::packagetask#define()","rake::testtask#define()","rake::task::define_task()","nokogiri::encodinghandler::delete()","nokogiri::xml::node#delete()","nokogiri::xml::nodeset#delete()","racc::iset#delete()","racc::symboltable#delete()","benchmark::ips::stats::bootstrap#dependencies()","nokogiri::html4::elementdescription#deprecated?()","nokogiri::html4::elementdescription#deprecated_attributes()","nokogiri::xml::reader#depth()","rake::dsl#desc()","kernel#describe()","nokogiri::html4::elementdescription#description()","nokogiri::xml::node#description()","duckdb::extractedstatementsimpl#destroy()","racc::grammar#dfa()","racc::states#dfa()","jacobian#dfdxi()","minitest::assertions::diff()","minitest::assertions#diff()","minitest::assertions::diff=()","rake::dsl#directory()","duckdb::connection#disconnect()","benchmark::ips::report::entry#display()","bigdecimal#div()","bigdecimal#divmod()","object#do_clean()","object#do_help()","xsd::xmlparser::nokogiri#do_parse()","nokogiri::xml::node#do_xinclude()","nokogiri::xml::document#document()","nokogiri::xml::node#document()","nokogiri::xml::node#document?()","bigdecimal::double_fig()","object#duckdb_library_name()","racc::sym#dummy?()","nokogiri::xml::document#dup()","nokogiri::xml::documentfragment#dup()","nokogiri::xml::node#dup()","racc::iset#dup()","duckdb::extractedstatements#each()","duckdb::result#each()","nokogiri::xml::dtd#each()","nokogiri::xml::node#each()","nokogiri::xml::nodeset#each()","nokogiri::xml::reader#each()","racc::grammar#each()","racc::iset#each()","racc::rule#each()","racc::states#each()","racc::symboltable#each()","rake::linkedlist#each()","rake::taskarguments#each()","racc::grammar#each_index()","racc::states#each_index()","racc::item#each_la()","racc::symboltable#each_nonterminal()","racc::actiontable#each_reduce()","racc::grammar#each_rule()","racc::rule#each_rule()","racc::actiontable#each_shift()","racc::states#each_state()","racc::symboltable#each_terminal()","racc::grammar#each_useless_nonterminal()","racc::grammar#each_useless_rule()","racc::grammar#each_with_index()","rake::filelist#egrep()","nokogiri::xml::node#elem?()","nokogiri::xml::node#element?()","nokogiri::xml::node#element_children()","nokogiri::xml::elementdecl#element_type()","nokogiri::xml::dtd#elements()","nokogiri::xml::node#elements()","racc::useraction::empty()","rake::linkedlist::empty()","benchmark::ips::job::multireport#empty?()","nokogiri::html4::elementdescription#empty?()","nokogiri::xml::nodeset#empty?()","racc::iset#empty?()","racc::rule#empty?()","racc::useraction#empty?()","rake::linkedlist#empty?()","rake::linkedlist::emptylinkedlist#empty?()","nokogiri::xml::reader#empty_element?()","stackprof::middleware::enabled?()","nokogiri::xml::node#encode_special_chars()","nokogiri::xml::document#encoding()","nokogiri::xml::reader#encoding()","nokogiri::xml::document#encoding=()","nokogiri::xml::sax::document#end_document()","nokogiri::xml::sax::document#end_element()","xsd::xmlparser::nokogiri#end_element()","nokogiri::xml::sax::document#end_element_namespace()","xsd::xmlparser::nokogiri#end_element_namespace()","racc::grammar#end_precedence_declaration()","duckdb::appender#end_row()","rake::task#enhance()","rake::taskmanager#enhance_with_matching_rule()","object#ensure_func()","object#ensure_package_configuration()","nokogiri::xml::dtd#entities()","nokogiri::xml::entitydecl#entity_type()","duckdb::result#enum_dictionary_values()","nokogiri::xml::attributedecl#enumeration()","bigdecimal#eql?()","duckdb::interval#eql?()","racc::locationpointer#eql?()","racc::state#eql?()","nokogiri::xml::sax::document#error()","xsd::xmlparser::nokogiri#error()","minitest::reportable#error?()","nokogiri::xml::syntaxerror#error?()","duckdb::appender#error_message()","benchmark::ips::report::entry#error_percentage()","benchmark::ips::stats::statsmetric#error_percentage()","nokogiri::xml::documentfragment#errors()","nokogiri::xml::xpathcontext#evaluate()","minitest::assertions#exception_details()","rake::filelist#exclude()","rake::filelist#excluded_from_list?()","duckdb::preparedstatement#execute()","rake::application#execute()","rake::task#execute()","duckdb::pendingresult#execute_check_state()","duckdb::pendingresult#execute_pending()","duckdb::pendingresult#execute_task()","duckdb::pendingresult#execution_finished?()","rake::filelist#existing()","rake::filelist#existing!()","bigmath::exp()","minitest::mock#expect()","minitest::spec::dsl::instancemethods#expect()","bigdecimal#exponent()","rake::filelist#ext()","string#ext()","minitest#extensions()","nokogiri::xml::dtd#external_id()","nokogiri::xml::entitydecl#external_id()","nokogiri::xml::node#external_subset()","rake::taskarguments#extras()","minitest::assertions#fail_after()","nokogiri::xml::syntaxerror#fatal?()","rake::taskarguments#fetch()","nokogiri::xml::sax::parsercontext::file()","rake::dsl#file()","stackprof::report#files()","minitest::backtracefilter#filter()","nokogiri::xml::nodeset#filter()","rake::compilerconfig#find()","nokogiri::html4::sax::pushparser#finish()","nokogiri::xml::sax::pushparser#finish()","bigdecimal#finite?()","nokogiri::xml::nodeset#first()","nokogiri::xml::node#first_element_child()","minitest::benchmark#fit_error()","minitest::benchmark#fit_exponential()","minitest::benchmark#fit_linear()","minitest::benchmark#fit_logarithmic()","minitest::benchmark#fit_power()","bigdecimal#fix()","racc::symboltable#fix()","stackprof::report#flamegraph_row()","stackprof::report#flamegraph_stacks()","bigdecimal#floor()","minitest::assertions#flunk()","duckdb::appender#flush()","racc::grammar::definitionenv#flush_delayed()","benchmark::ips::job::multireport#footer()","benchmark::ips::job::streamreport#footer()","benchmark::ips::stats::bootstrap#footer()","benchmark::ips::stats::sd#footer()","rake::task::format_deps()","bigdecimal#frac()","nokogiri::html4::fragment()","nokogiri::html4::fragment()","nokogiri::html4::document#fragment()","nokogiri::html5::fragment()","nokogiri::html5::document#fragment()","nokogiri::html5::node#fragment()","nokogiri::xml::fragment()","nokogiri::xml::document#fragment()","nokogiri::xml::documentfragment#fragment()","nokogiri::xml::node#fragment()","nokogiri::xml::node#fragment?()","stackprof::report#frames()","minitest::result::from()","nokogiri::xml::relaxng::from_document()","nokogiri::xml::schema::from_document()","stackprof::report::from_file()","nokogiri::xml::reader::from_io()","stackprof::report::from_json()","nokogiri::xml::reader::from_memory()","rake::task#full_comment()","object#gem_file()","object#gem_file_platform()","racc::statetransitiontablegenerator#gen_action_tables()","racc::statetransitiontablegenerator#gen_goto_tables()","racc::parserclassgenerator#generate()","racc::statetransitiontable::generate()","racc::statetransitiontablegenerator#generate()","generatorhelpers#generate_cross_compile_extension_task_for()","rake::taskmanager#generate_did_you_mean_suggestions()","generatorhelpers#generate_extension_task_for()","generatorhelpers#generate_gem_task()","generatorhelpers#generate_java_compile_extension_task_for()","generatorhelpers#generate_java_source_code_for()","benchmark::ips::job#generate_json()","benchmark::ips::report#generate_json()","rake::taskmanager#generate_message_for_undefined_task()","generatorhelpers#generate_multi_cross_compile_extension_task_for()","racc::parserfilegenerator#generate_parser()","racc::parserfilegenerator#generate_parser_file()","generatorhelpers#generate_scaffold_structure()","generatorhelpers#generate_source_code_for()","nokogiri::html4::entitylookup#get()","nokogiri::xml::node#get_attribute()","duckdb::config::get_config_flag()","rake::filelist::glob()","object#gnome_source()","racc::shift#goto_id()","racc::grammar::definitionenv#grammar()","rake::filelist#gsub()","rake::filelist#gsub!()","nokogiri::xml::node#has_attribute?()","rake::taskarguments#has_key?()","bigdecimal#hash()","racc::rule#hash=()","object#have_builtin_func()","object#have_libxml_headers?()","object#have_package_configuration()","racc::locationpointer#head?()","benchmark::ips::report::entry#header()","racc::grammar::precedencedefinitionenv#higher()","benchmark::ips::job#hold!()","benchmark::ips::job#hold?()","nokogiri::xml::namespace#href()","nokogiri::xml::dtd#html5_dtd?()","nokogiri::xml::node#html?()","nokogiri::xml::dtd#html_dtd?()","benchmark::ips::helpers::humanize_duration()","minitest::test::i_suck_and_my_tests_are_order_dependent!()","object#iconv_configure_flags()","nokogiri::html4::elementdescription#implied_end_tag?()","nokogiri::html4::elementdescription#implied_start_tag?()","rake::dsl#import()","rubymemcheck::frame#in_binary?()","rake::taskmanager#in_namespace()","rubymemcheck::frame#in_ruby?()","rake::filelist#include()","nokogiri::xml::nodeset#include?()","racc::iset#include?()","racc::reduce#incref()","racc::locationpointer#increment()","nokogiri::xml::nodeset#index()","bigdecimal#infinite?()","minitest#info_signal()","racc::actiontable#init()","racc::grammar#init()","rake::application#init()","rake::baseextensiontask#init()","rake::extensiontask#init()","rake::javaextensiontask#init()","rake::packagetask#init()","nokogiri::html4::elementdescription#inline?()","nokogiri::html5::node#inner_html()","nokogiri::xml::node#inner_html()","nokogiri::xml::nodeset#inner_html()","nokogiri::xml::node#inner_html=()","nokogiri::xml::node#inner_text()","nokogiri::xml::nodeset#inner_text()","nokogiri::xml::reader#inner_xml()","bigdecimal#inspect()","nokogiri::html4::elementdescription#inspect()","nokogiri::xml::node::saveoptions#inspect()","nokogiri::xml::nodeset#inspect()","nokogiri::xml::parseoptions#inspect()","racc::accept#inspect()","racc::error#inspect()","racc::goto#inspect()","racc::groupendmark#inspect()","racc::groupstartmark#inspect()","racc::iset#inspect()","racc::locationpointer#inspect()","racc::many1mark#inspect()","racc::manymark#inspect()","racc::optionmark#inspect()","racc::ormark#inspect()","racc::prec#inspect()","racc::reduce#inspect()","racc::rule#inspect()","racc::shift#inspect()","racc::state#inspect()","racc::states#inspect()","racc::sym#inspect()","racc::useraction#inspect()","rake::linkedlist#inspect()","string#inspect()","nokogiri::xml::entityreference#inspect_attributes()","nokogiri::encodinghandler::install_default_aliases()","racc::grammar#intern()","racc::symboltable#intern()","rake::taskmanager#intern()","nokogiri::xml::node#internal_subset()","bigdecimal::interpret_loosely()","duckdb::connection#interrupt()","rake::task#investigation()","rake::task#invoke()","rake::task#invoke_with_call_chain()","nokogiri::xml::sax::parsercontext::io()","benchmark::ips()","benchmark::ips#ips()","benchmark::ips::report::entry#ips()","benchmark::ips#ips_quick()","benchmark::ips::report::entry#ips_sd()","jacobian#isequal()","rake::filelist#is_a?()","duckdb::interval::iso8601_parse()","minitest::spec::dsl#it()","benchmark::ips::job#item()","benchmark::ips::job#iterations_per_sec()","jacobian#jacobian()","rake::javaextensiontask#java_compiling()","minitest::guard#jruby?()","benchmark::ips::job#json!()","benchmark::ips::job#json?()","nokogiri::xml::node#key?()","racc::iset#key?()","rake::taskarguments#key?()","duckdb::config::key_description()","duckdb::config::key_descriptions()","nokogiri::xml::dtd#keys()","nokogiri::xml::node#keys()","rake::filelist#kind_of?()","nokogiri::xml::node#kwattr_add()","nokogiri::xml::node#kwattr_append()","nokogiri::xml::node#kwattr_remove()","nokogiri::xml::node#kwattr_values()","racc::state#la=()","nokogiri::xml::node#lang()","nokogiri::xml::reader#lang()","nokogiri::xml::node#lang=()","nokogiri::xml::nodeset#last()","nokogiri::xml::node#last_element_child()","racc::grammar::precedencedefinitionenv#left()","nokogiri::xml::nodeset#length()","minitest::spec::dsl#let()","object#libflag_to_filename()","duckdb::library_version()","bigdecimal::limit()","nokogiri::xml::node#line()","nokogiri::xml::sax::parsercontext#line()","nokogiri::xml::node#line=()","racc::grammarfilescanner#lineno()","minitest::load()","rake::defaultloader#load()","benchmark::ips::job#load_held_results()","rake::load_rakefile()","rake::application#load_rakefile()","object#local_have_library()","nokogiri::xml::reader#local_name()","minitest::assertion#location()","minitest::reportable#location()","racc::sourcetext#location()","bigmath::log()","object#log_conflict()","object#log_useless()","object#logging()","duckdb::column#logical_type()","rake::taskmanager#lookup()","racc::grammar::precedencedefinitionenv#lower()","lusolve#ludecomp()","lusolve#lusolve()","minitest::guard#maglev?()","object#main()","nokogiri::make()","rake::linkedlist::make()","racc::state#make_closure()","object#make_filename()","minitest::test::make_my_diffs_pretty!()","minitest::testtask#make_test_cmd()","racc::grammar::definitionenv#many()","racc::grammar::definitionenv#many1()","nokogiri::xml::node#matches?()","a#math()","stackprof::report#max_samples()","benchmark::timing::mean()","rake::invocationchain#member?()","rake::invocationchain::emptyinvocationchain#member?()","nokogiri::xml::sax::parsercontext::memory()","minitest::assertions#message()","rake::rulerecursionoverflowerror#message()","nokogiri::html4::document#meta_encoding()","nokogiri::html4::document#meta_encoding=()","minitest::runnable#metadata()","minitest::runnable#metadata?()","nokogiri::decorators::slop#method_missing()","racc::grammar::definitionenv#method_missing()","rake::taskarguments#method_missing()","minitest::runnable::methods_matching()","rake::extensioncompiler::mingw_gcc_executable()","rake::extensioncompiler::mingw_host()","duckdb::interval::mk_interval()","racc::statetransitiontablegenerator#mkmapexp()","bigdecimal::mode()","stackprof::report#modeline()","bigdecimal#modulo()","minitest::guard#mri?()","minitest::assertions#mu_pp()","minitest::assertions#mu_pp_for_diff()","bigdecimal#mult()","rake::dsl#multitask()","minitest::expectations#must_be()","minitest::expectations#must_be_close_to()","minitest::expectations#must_be_empty()","minitest::expectations#must_be_instance_of()","minitest::expectations#must_be_kind_of()","minitest::expectations#must_be_nil()","minitest::expectations#must_be_same_as()","minitest::expectations#must_be_silent()","minitest::expectations#must_be_within_epsilon()","minitest::expectations#must_equal()","minitest::expectations#must_include()","minitest::expectations#must_match()","minitest::expectations#must_output()","minitest::expectations#must_pattern_match()","minitest::expectations#must_raise()","minitest::expectations#must_respond_to()","minitest::expectations#must_throw()","racc::state#n_rrconflicts()","racc::states#n_rrconflicts()","bigdecimal#n_significant_digits()","racc::state#n_srconflicts()","racc::states#n_srconflicts()","racc::grammar#n_useless_nonterminals()","racc::grammar#n_useless_rules()","duckdb::column#name()","minitest::runnable#name()","nokogiri::encodinghandler#name()","nokogiri::html4::elementdescription#name()","nokogiri::xml::cdata#name()","nokogiri::xml::document#name()","nokogiri::xml::documentfragment#name()","nokogiri::xml::elementcontent#name()","nokogiri::xml::node#name()","nokogiri::xml::reader#name()","racc::groupendmark#name()","racc::groupstartmark#name()","racc::many1mark#name()","racc::manymark#name()","racc::optionmark#name()","racc::ormark#name()","racc::prec#name()","racc::useraction#name()","rake::task#name()","minitest::runnable#name=()","nokogiri::xml::node#name=()","nokogiri::xml::node#namespace()","rake::dsl#namespace()","nokogiri::xml::node#namespace=()","nokogiri::xml::node#namespace_definitions()","nokogiri::xml::node#namespace_scopes()","nokogiri::xml::reader#namespace_uri()","nokogiri::xml::node#namespaced_key?()","nokogiri::xml::document#namespaces()","nokogiri::xml::node#namespaces()","nokogiri::xml::reader#namespaces()","bigdecimal#nan?()","nokogiri::xml::node#native_content=()","rake::filecreationtask#needed?()","rake::filetask#needed?()","rake::task#needed?()","object#needs_darwin_linker_hack()","a::new()","benchmark::ips::job::new()","benchmark::ips::job::entry::new()","benchmark::ips::job::multireport::new()","benchmark::ips::job::streamreport::new()","benchmark::ips::report::new()","benchmark::ips::report::entry::new()","benchmark::ips::share::new()","benchmark::ips::stats::bootstrap::new()","benchmark::ips::stats::sd::new()","duckdb::appender::new()","duckdb::config::new()","duckdb::extractedstatements::new()","duckdb::extractedstatementsimpl::new()","duckdb::interval::new()","duckdb::pendingresult::new()","duckdb::preparedstatement::new()","duckdb::result::new()","minitest::parallel::executor::new()","nokogiri::css::xpathvisitor::new()","nokogiri::html4::document::new()","nokogiri::html4::documentfragment::new()","nokogiri::html4::sax::pushparser::new()","nokogiri::html5::documentfragment::new()","nokogiri::xml::attr::new()","nokogiri::xml::builder::new()","nokogiri::xml::cdata::new()","nokogiri::xml::comment::new()","nokogiri::xml::document::new()","nokogiri::xml::documentfragment::new()","nokogiri::xml::entitydecl::new()","nokogiri::xml::entityreference::new()","nokogiri::xml::node::new()","nokogiri::xml::node::saveoptions::new()","nokogiri::xml::nodeset::new()","nokogiri::xml::parseoptions::new()","nokogiri::xml::processinginstruction::new()","nokogiri::xml::processinginstruction::new()","nokogiri::xml::reader::new()","nokogiri::xml::relaxng::new()","nokogiri::xml::sax::parser::new()","nokogiri::xml::sax::parsercontext::new()","nokogiri::xml::sax::pushparser::new()","nokogiri::xml::schema::new()","nokogiri::xml::text::new()","nokogiri::xml::xpathcontext::new()","racc::actiontable::new()","racc::debugflags::new()","racc::goto::new()","racc::grammar::new()","racc::grammar::definitionenv::new()","racc::grammar::precedencedefinitionenv::new()","racc::grammarfileparser::new()","racc::grammarfileparser::result::new()","racc::grammarfilescanner::new()","racc::groupendmark::new()","racc::groupstartmark::new()","racc::iset::new()","racc::item::new()","racc::locationpointer::new()","racc::logfilegenerator::new()","racc::many1mark::new()","racc::manymark::new()","racc::optionmark::new()","racc::ormark::new()","racc::parserclassgenerator::new()","racc::parserfilegenerator::new()","racc::parserfilegenerator::params::new()","racc::prec::new()","racc::rrconflict::new()","racc::reduce::new()","racc::rule::new()","racc::srconflict::new()","racc::shift::new()","racc::sourcetext::new()","racc::state::new()","racc::statetransitiontable::new()","racc::statetransitiontablegenerator::new()","racc::states::new()","racc::sym::new()","racc::symboltable::new()","racc::useraction::new()","raccprofiler::new()","rake::application::new()","rake::baseextensiontask::new()","rake::compilerconfig::new()","rake::filelist::new()","rake::linkedlist::new()","rake::linkedlist::emptylinkedlist::new()","rake::namespace::new()","rake::packagetask::new()","rake::rulerecursionoverflowerror::new()","rake::task::new()","rake::taskarguments::new()","rake::testtask::new()","rubymemcheck::configuration::new()","rubymemcheck::frame::new()","rubymemcheck::rspec::raketask::new()","rubymemcheck::rubyrunner::new()","rubymemcheck::stack::new()","rubymemcheck::suppression::new()","rubymemcheck::testtask::new()","rubymemcheck::testtaskreporter::new()","rubymemcheck::valgrinderror::new()","stackprof::middleware::new()","stackprof::report::new()","xsd::xmlparser::nokogiri::new()","rake::taskarguments#new_scope()","a::newobj()","nokogiri::xml::node#next()","racc::locationpointer#next()","nokogiri::xml::node#next=()","nokogiri::xml::node#next_element()","nokogiri::xml::node#next_sibling()","racc::parser#next_token()","racc::grammar#nfa()","racc::states#nfa()","object#nix?()","newton#nlsolve()","nokogiri::xml::node#node_name()","nokogiri::xml::node#node_name=()","nokogiri::xml::node#node_type()","nokogiri::xml::reader#node_type()","racc::grammar::precedencedefinitionenv#nonassoc()","nokogiri::xml::syntaxerror#none?()","racc::sym#nonterminal?()","racc::grammar#nonterminal_base()","racc::symboltable#nonterminals()","bigdecimal#nonzero?()","stackprof::report#normalized_frames()","nokogiri::xml::dtd#notations()","benchmark::timing::now()","rake::fileutilsext#nowrite()","rake::fileutilsext#nowrite()","duckdb::preparedstatement#nparams()","racc::symboltable#nt_max()","racc::grammar::definitionenv#null()","racc::rule#null=()","racc::sym#null=()","racc::rule#nullable?()","racc::sym#nullable?()","nokogiri::xml::elementcontent#occur()","racc::parser#on_error()","racc::sym::once_writer()","duckdb::database::open()","object#openbsd?()","racc::grammar::definitionenv#option()","nokogiri::html4::elementdescription#optional_attributes()","benchmark::ips::options()","nokogiri::xml::sax::pushparser#options()","rake::application#options()","nokogiri::xml::sax::pushparser#options=()","nokogiri::xml::entitydecl#original_content()","rake::original_dir()","minitest::guard#osx?()","racc::logfilegenerator#outact()","nokogiri::xml::reader#outer_xml()","racc::logfilegenerator#output()","racc::logfilegenerator#output_conflict()","racc::logfilegenerator#output_rule()","racc::logfilegenerator#output_state()","racc::logfilegenerator#output_token()","racc::logfilegenerator#output_useless()","racc::logfilegenerator#outrrconf()","racc::logfilegenerator#outsrconf()","stackprof::report#overall_samples()","benchmark::ips::stats::statsmetric#overlaps?()","rake::packagetask#package_dir_path()","rake::packagetask#package_name()","minitest#parallel_executor()","minitest::test::parallelize_me!()","duckdb::preparedstatement#param_type()","duckdb::preparedstatement#parameter_name()","nokogiri::xml::node#parent()","nokogiri::xml::node#parent=()","nokogiri::parse()","nokogiri::html4::parse()","nokogiri::html4::parse()","nokogiri::html4::document::parse()","nokogiri::html4::documentfragment::parse()","nokogiri::html5::parse()","nokogiri::html5::document::parse()","nokogiri::html5::documentfragment::parse()","nokogiri::xml::parse()","nokogiri::xml::document::parse()","nokogiri::xml::documentfragment::parse()","nokogiri::xml::node#parse()","nokogiri::xml::sax::parser#parse()","nokogiri::xslt::parse()","racc::grammarfileparser::parse()","racc::grammarfileparser#parse()","nokogiri::xml::sax::parser#parse_file()","racc::grammarfileparser::parse_file()","nokogiri::xml::sax::parser#parse_io()","stackprof::report::parse_json()","nokogiri::xml::sax::parser#parse_memory()","racc::debugflags::parse_option_string()","nokogiri::xslt::stylesheet::parse_stylesheet_doc()","nokogiri::xml::sax::parsercontext#parse_with()","racc::grammar#parser_class()","racc::statetransitiontable#parser_class()","minitest::assertions#pass()","minitest::abstractreporter#passed?()","minitest::reportable#passed?()","minitest::runnable#passed?()","nokogiri::xml::node#path()","minitest::expectations#path_must_exist()","minitest::expectations#path_wont_exist()","rake::filelist#pathmap()","string#pathmap()","string#pathmap_explode()","string#pathmap_partial()","string#pathmap_replace()","duckdb::preparedstatement#pending_prepared()","duckdb::preparedstatement#pending_prepared_stream()","rake::baseextensiontask#platform()","rake::javaextensiontask#platform()","nokogiri::xml::node#pointer_id()","racc::logfilegenerator#pointer_out()","nokogiri::xml::nodeset#pop()","a#pow()","bigdecimal#power()","racc::rule#prec()","racc::rule#precedence()","racc::rule#precedence=()","racc::grammar::definitionenv#precedence_table()","bigdecimal#precision()","bigdecimal#precision_scale()","bigdecimal#precs()","nokogiri::xml::elementcontent#prefix()","nokogiri::xml::elementdecl#prefix()","nokogiri::xml::namespace#prefix()","nokogiri::xml::reader#prefix()","duckdb::preparedstatement::prepare()","duckdb::connection#prepared_statement()","duckdb::extractedstatementsimpl#prepared_statement()","nokogiri::xml::node#prepend_child()","minitest::abstractreporter#prerecord()","rake::task#prerequisite_tasks()","object#preserving_globals()","nokogiri::xml::node#previous()","nokogiri::xml::node#previous=()","nokogiri::xml::node#previous_element()","nokogiri::xml::node#previous_sibling()","minitest::prideio#pride()","minitest::pridelol#pride()","minitest::prideio::pride!()","minitest::prideio::pride?()","minitest::prideio#print()","stackprof::report#print_alphabetical_flamegraph()","stackprof::report#print_callgrind()","stackprof::report#print_d3_flamegraph()","stackprof::report#print_debug()","stackprof::report#print_dump()","stackprof::report#print_file()","stackprof::report#print_files()","stackprof::report#print_flamegraph()","stackprof::report#print_graphviz()","stackprof::report#print_json()","object#print_message()","stackprof::report#print_method()","stackprof::report#print_stackcollapse()","stackprof::report#print_text()","stackprof::report#print_timeline_flamegraph()","racc::useraction::proc()","racc::useraction#proc?()","minitest::testtask#process_env()","object#process_recipe()","nokogiri::xml::sax::document#processing_instruction()","nokogiri::xml::node#processing_instruction?()","nokogiri::xml::nodeset#push()","racc::parserfilegenerator#put_state_transition_table()","duckdb::connection#query()","duckdb::connection#query_multi_sql()","duckdb::connection#query_progress()","benchmark::ips::job#quiet()","benchmark::ips::job::multireport#quiet!()","benchmark::ips::job#quiet=()","benchmark::ips::job::multireport#quiet?()","bigdecimal#quo()","nokogiri::xslt::quote_params()","racc::parser#racc_accept()","racc::parser#racc_e_pop()","racc::parser#racc_next_state()","racc::parser#racc_print_stacks()","racc::parser#racc_print_states()","racc::parser#racc_read_token()","racc::parser#racc_reduce()","racc::parser#racc_shift()","racc::parser#racc_token2str()","object#raise_not_found_library()","rake::fileutilsext#rake_check_options()","rake::fileutilsext#rake_check_options()","rake::fileutilsext#rake_output_message()","rake::fileutilsext#rake_output_message()","nokogiri::xml::reader#read()","nokogiri::html4::document::read_io()","nokogiri::html5::document::read_io()","nokogiri::xml::document::read_io()","nokogiri::html4::document::read_memory()","nokogiri::html5::document::read_memory()","nokogiri::xml::document::read_memory()","nokogiri::xml::relaxng::read_memory()","nokogiri::xml::schema::read_memory()","nokogiri::xml::node#read_only?()","minitest::abstractreporter#record()","nokogiri::xml::sax::parsercontext#recovery()","nokogiri::xml::sax::parsercontext#recovery=()","racc::actiontable#reduce()","racc::actiontable#reduce_n()","racc::statetransitiontablegenerator#reduce_table()","rake::task#reenable()","nokogiri::xml::sax::document#reference()","minitest::assertions#refute()","minitest::assertions#refute_empty()","minitest::assertions#refute_equal()","minitest::assertions#refute_in_delta()","minitest::assertions#refute_in_epsilon()","minitest::assertions#refute_includes()","minitest::assertions#refute_instance_of()","minitest::assertions#refute_kind_of()","minitest::assertions#refute_match()","minitest::assertions#refute_nil()","minitest::assertions#refute_operator()","minitest::assertions#refute_path_exists()","minitest::assertions#refute_pattern()","minitest::assertions#refute_predicate()","minitest::assertions#refute_respond_to()","minitest::assertions#refute_same()","nokogiri::xslt::register()","nokogiri::xml::xpathcontext#register_namespaces()","nokogiri::xml::xpathcontext#register_ns()","minitest::register_plugin()","minitest::spec::dsl#register_spec_type()","nokogiri::xml::xpathcontext#register_variable()","nokogiri::xml::xpathcontext#register_variables()","nokogiri::classresolver#related_class()","bigdecimal#remainder()","nokogiri::xml::node#remove()","nokogiri::xml::nodeset#remove()","nokogiri::xml::nodeset#remove_attr()","nokogiri::xml::node#remove_attribute()","nokogiri::xml::nodeset#remove_attribute()","nokogiri::xml::node#remove_class()","nokogiri::xml::nodeset#remove_class()","nokogiri::xml::document#remove_namespaces!()","nokogiri::xml::node#replace()","racc::rule#replace()","nokogiri::xml::sax::parsercontext#replace_entities()","nokogiri::xml::sax::pushparser#replace_entities()","nokogiri::xml::sax::parsercontext#replace_entities=()","nokogiri::xml::sax::pushparser#replace_entities=()","benchmark::ips::job#report()","minitest::abstractreporter#report()","minitest::statisticsreporter#report()","raccprofiler#report()","object#report_conflict()","object#report_list()","object#report_useless()","rubymemcheck::testtaskreporter#report_valgrind_errors()","minitest#reporter()","nokogiri::html4::elementdescription#required_attributes()","rake::filelist#resolve()","rake::taskmanager#resolve_args()","nokogiri::decorators::slop#respond_to_missing?()","minitest::reportable#result_code()","minitest::runnable#result_code()","stackprof::results()","duckdb::result#return_type()","nokogiri::xml::nodeset#reverse()","racc::grammar::precedencedefinitionenv#right()","nokogiri::xml::document#root()","nokogiri::xml::document#root=()","bigdecimal#round()","duckdb::result#row_count()","duckdb::result#row_size()","duckdb::result#rows_changed()","racc::state#rr_conflict()","racc::states#rrconflict_exist?()","racc::state#rruleid()","minitest::guard#rubinius?()","fileutils#ruby()","rubymemcheck::testtask#ruby()","racc::rule#rule()","racc::sym#rule()","rake::dsl#rule()","racc::reduce#ruleid()","benchmark::ips::job#run()","minitest::run()","minitest::runnable::run()","minitest::runnable#run()","minitest::test#run()","rake::application#run()","rubymemcheck::rubyrunner#run()","stackprof::run()","benchmark::ips::job#run_benchmark()","benchmark::ips::job#run_comparison()","benchmark::ips::report#run_comparison()","minitest::runnable::run_one_method()","rubymemcheck::testtaskreporter#run_ruby_with_valgrind()","benchmark::ips::job#run_single?()","rubymemcheck::rspec::raketask#run_task()","benchmark::ips::job#run_warmup()","rake::application#run_with_threads()","minitest::runnable::runnable_methods()","minitest::test::runnable_methods()","minitest::runnable::runnables()","benchmark::ips::job::multireport#running()","benchmark::ips::job::streamreport#running()","stackprof::running?()","benchmark::ips::report::entry#runtime()","fileutils#safe_ln()","object#safe_read()","stackprof::sample()","benchmark::ips::report::entry#samples()","stackprof::middleware::save()","benchmark::ips::job#save!()","nokogiri::html4::elementdescription#save_end_tag?()","bigdecimal::save_exception_mode()","benchmark::ips::job#save_held_results()","bigdecimal::save_limit()","bigdecimal::save_rounding_mode()","benchmark::ips::helpers::scale()","bigdecimal#scale()","duckdb::logicaltype#scale()","rake::namespace#scope()","rake::filetask::scope_name()","rake::task::scope_name()","nokogiri::xml::documentfragment#search()","nokogiri::xml::searchable#search()","platformextensionhelpers#search_path()","benchmark::ips::report::entry#seconds()","raccprofiler#section()","minitest#seed()","nokogiri::xml::reader#self_closing?()","racc::sym#self_null?()","racc::grammar::definitionenv#separated_by()","racc::grammar::definitionenv#separated_by1()","racc::grammar::definitionenv#seq()","nokogiri::html4::document#serialize()","nokogiri::xml::documentfragment#serialize()","nokogiri::xml::node#serialize()","nokogiri::xslt::stylesheet#serialize()","racc::sym#serialize()","nokogiri::xml::nodeset#set()","rake::task#set_arg_names()","nokogiri::xml::node#set_attribute()","duckdb::config#set_config()","racc::statetransitiontablegenerator#set_table()","minitest::test::lifecyclehooks#setup()","rubymemcheck::testtaskreporter#setup()","subthingyspec#setup()","thingyspec#setup()","fileutils#sh()","object#sh_export_path()","benchmark::ips::share#share()","nokogiri::xml::nodeset#shift()","racc::actiontable#shift()","racc::actiontable#shift_n()","racc::states#should_error_on_expect_mismatch?()","racc::states#should_report_srconflict?()","racc::sym#should_terminal()","racc::sym#should_terminal?()","benchmark::ips::report::entry#show_total_time!()","minitest::parallel::executor#shutdown()","minitest::benchmark#sigma()","bigdecimal#sign()","bigmath#sin()","duckdb::config::size()","duckdb::extractedstatementsimpl#size()","nokogiri::xml::nodeset#size()","racc::grammar#size()","racc::iset#size()","racc::rule#size()","racc::states#size()","minitest::assertions#skip()","rubymemcheck::stack#skip?()","rubymemcheck::valgrinderror#skip?()","minitest::assertions#skip_until()","minitest::assertions#skipped?()","minitest::reportable#skipped?()","minitest::runnable#skipped?()","nokogiri::xml::nodeset#slice()","nokogiri::xml::document#slop!()","benchmark::ips::stats::bootstrap#slowdown()","benchmark::ips::stats::sd#slowdown()","object#solaris?()","rake::task#source()","racc::useraction#source?()","racc::useraction::source_text()","rake::task#sources()","minitest::spec::dsl#spec_type()","minitest::spec::dsl#specify()","benchmark::ips::stats::bootstrap#speedup()","benchmark::ips::stats::sd#speedup()","bigdecimal#split()","fileutils#split_all()","bigdecimal#sqrt()","bigmath#sqrt()","racc::state#sr_conflict()","racc::states#srconflict_exist?()","minitest::abstractreporter#start()","minitest::parallel::executor#start()","stackprof::start()","nokogiri::xml::sax::document#start_document()","nokogiri::xml::sax::document#start_element()","xsd::xmlparser::nokogiri#start_element()","nokogiri::xml::sax::document#start_element_namespace()","xsd::xmlparser::nokogiri#start_element_namespace()","benchmark::ips::job::multireport#start_running()","benchmark::ips::job::streamreport#start_running()","racc::grammar#start_symbol=()","benchmark::ips::job::multireport#start_warming()","benchmark::ips::job::streamreport#start_warming()","duckdb::pendingresult#state()","nokogiri::xml::reader#state()","racc::grammar#state_transition_table()","racc::states#state_transition_table()","duckdb::preparedstatement#statement_type()","duckdb::result#statement_type()","racc::grammar#states()","benchmark::timing::stddev()","stackprof::stop()","duckdb::result#streaming?()","nokogiri::xml::parseoptions#strict()","nokogiri::xml::parseoptions#strict?()","racc::sym#string_symbol?()","object#stub()","bigdecimal#sub()","object#sub()","rake::filelist#sub()","rake::filelist#sub!()","nokogiri::html4::elementdescription#sub_elements()","minitest::spec::dsl#subject()","benchmark::ips::job#suite()","benchmark::ips::job#suite=()","nokogiri::xml::node#swap()","racc::logfilegenerator#symbol_locations()","racc::grammar#symbols()","nokogiri::xml::dtd#system_id()","nokogiri::xml::entitydecl#system_id()","rake::packagetask#tar_bz2_file()","rake::packagetask#tar_gz_file()","rake::packagetask#tar_xz_file()","rake::packagetask#target_dir()","rake::dsl#task()","rake::task::task_defined?()","rake::namespace#tasks()","rake::task::tasks()","rake::taskmanager#tasks()","rake::taskmanager#tasks_in_scope()","minitest::test::lifecyclehooks#teardown()","filetemplatehelpers#template_extconf()","filetemplatehelpers#template_rake_extension()","filetemplatehelpers#template_rake_extension_cross_compile()","filetemplatehelpers#template_rake_extension_java_compile()","filetemplatehelpers#template_rake_extension_multi_cross_compile()","filetemplatehelpers#template_rake_extension_with_platform()","filetemplatehelpers#template_rake_gemspec()","filetemplatehelpers#template_rakefile()","filetemplatehelpers#template_source_c()","filetemplatehelpers#template_source_h()","filetemplatehelpers#template_source_java()","racc::sym#term=()","racc::sym#terminal?()","racc::symboltable#terminals()","rake::testtask#test_files=()","minitest::runnable::test_order()","thingyspec#test_should_do_the_first_thing()","subthingyspec#test_should_do_the_second_thing()","nokogiri::xml::builder#text()","nokogiri::xml::node#text()","nokogiri::xml::nodeset#text()","nokogiri::xml::node#text?()","rake::packagetask#tgz_file()","minitest::assertions#things_to_diff()","benchmark::ips::job#time_us()","benchmark::timing::time_us()","rake::filecreationtask#timestamp()","rake::filetask#timestamp()","rake::task#timestamp()","nokogiri::html4::document#title()","nokogiri::html4::document#title=()","nokogiri::xml::nodeset#to_a()","racc::iset#to_a()","rake::filelist#to_a()","rake::taskarguments#to_a()","nokogiri::xml::nodeset#to_ary()","rake::filelist#to_ary()","bigdecimal#to_d()","complex#to_d()","float#to_d()","integer#to_d()","nilclass#to_d()","rational#to_d()","string#to_d()","bigdecimal#to_digits()","bigdecimal#to_f()","rake::taskarguments#to_hash()","nokogiri::html4::builder#to_html()","nokogiri::html5::builder#to_html()","nokogiri::xml::documentfragment#to_html()","nokogiri::xml::node#to_html()","nokogiri::xml::nodeset#to_html()","bigdecimal#to_i()","bigdecimal#to_int()","duckdb::interval::to_interval()","nokogiri::xml::document#to_java()","bigdecimal#to_r()","benchmark::ips::report::entry#to_s()","bigdecimal#to_s()","nokogiri::html4::elementdescription#to_s()","nokogiri::xml::documentfragment#to_s()","nokogiri::xml::node#to_s()","nokogiri::xml::nodeset#to_s()","nokogiri::xml::syntaxerror#to_s()","nokogiri::xml::xpath::syntaxerror#to_s()","racc::grammar#to_s()","racc::iset#to_s()","racc::locationpointer#to_s()","racc::rrconflict#to_s()","racc::rule#to_s()","racc::srconflict#to_s()","racc::sourcetext#to_s()","racc::state#to_s()","racc::states#to_s()","racc::sym#to_s()","rake::filelist#to_s()","rake::invocationchain#to_s()","rake::invocationchain::emptyinvocationchain#to_s()","rake::latetime#to_s()","rake::linkedlist#to_s()","rake::task#to_s()","rubymemcheck::frame#to_s()","rubymemcheck::suppression#to_s()","rubymemcheck::valgrinderror#to_s()","nokogiri::xml::node#to_str()","nokogiri::xml::documentfragment#to_xhtml()","nokogiri::xml::node#to_xhtml()","nokogiri::xml::nodeset#to_xhtml()","nokogiri::xml::builder#to_xml()","nokogiri::xml::documentfragment#to_xml()","nokogiri::xml::node#to_xml()","nokogiri::xml::nodeset#to_xml()","racc::statetransitiontablegenerator#token_table()","racc::parser#token_to_str()","racc::statetransitiontable#token_value_table()","rake::application#top_level()","nokogiri::xslt::stylesheet#transform()","nokogiri::xml::node#traverse()","object#truffle?()","bigdecimal#truncate()","object#try_link_iconv()","object#try_package_configuration()","duckdb::column#type()","duckdb::logicaltype#type()","nokogiri::html4::document#type()","nokogiri::xml::elementcontent#type()","nokogiri::xml::node#type()","object#unix?()","nokogiri::xml::node#unlink()","nokogiri::xml::nodeset#unlink()","object#unpacked_gem_dir_platform()","racc::iset#update()","racc::iset#update_a()","nokogiri::xml::document#url()","stackprof::use_postponed_job!()","racc::rule#useless=()","racc::sym#useless=()","racc::rule#useless?()","racc::sym#useless?()","racc::grammar#useless_nonterminal_exist?()","racc::grammar#useless_rule_exist?()","nokogiri::xml::schema#valid?()","nokogiri::xml::dtd#validate()","nokogiri::xml::document#validate()","nokogiri::xml::schema#validate()","minitest::benchmark#validation_for_fit()","minitest::spec::dsl::instancemethods#value()","nokogiri::xml::reader#value()","nokogiri::xml::attr#value=()","nokogiri::xml::node#value?()","nokogiri::xml::reader#value?()","nokogiri::xml::node#values()","rake::taskarguments#values_at()","benchmark::timing::variance()","rake::fileutilsext#verbose()","rake::fileutilsext#verbose()","minitest::mock#verify()","nokogiri::xml::document#version()","stackprof::report#version()","stackprof::report#walk_method()","benchmark::ips::job::multireport#warming()","benchmark::ips::job::streamreport#warming()","benchmark::ips::job::multireport#warmup_stats()","benchmark::ips::job::streamreport#warmup_stats()","nokogiri::xml::sax::document#warning()","xsd::xmlparser::nokogiri#warning()","nokogiri::xml::syntaxerror#warning?()","rake::fileutilsext#when_writing()","rake::fileutilsext#when_writing()","duckdb::logicaltype#width()","minitest::guard#windows?()","object#windows?()","nokogiri::xml::builder::with()","rake::with_application()","rake::taskarguments#with_defaults()","minitest::expectations#wont_be()","minitest::expectations#wont_be_close_to()","minitest::expectations#wont_be_empty()","minitest::expectations#wont_be_instance_of()","minitest::expectations#wont_be_kind_of()","minitest::expectations#wont_be_nil()","minitest::expectations#wont_be_same_as()","minitest::expectations#wont_be_within_epsilon()","minitest::expectations#wont_equal()","minitest::expectations#wont_include()","minitest::expectations#wont_match()","minitest::expectations#wont_pattern_match()","minitest::expectations#wont_respond_to()","rake::packagetask#working_dir()","nokogiri::xml::document::wrap()","nokogiri::xml::node#wrap()","nokogiri::xml::nodeset#wrap()","nokogiri::html4::sax::pushparser#write()","nokogiri::xml::sax::pushparser#write()","nokogiri::xml::node#write_html_to()","racc::grammar#write_log()","nokogiri::html5::node#write_to()","nokogiri::xml::node#write_to()","nokogiri::xml::node#write_xhtml_to()","nokogiri::xml::node#write_xml_to()","nokogiri::xml::node#xml?()","nokogiri::xml::reader#xml_version()","nokogiri::xml::sax::document#xmldecl()","nokogiri::xml::nodeset#xpath()","nokogiri::xml::searchable#xpath()","nokogiri::html4::document#xpath_doctype()","nokogiri::html5::document#xpath_doctype()","nokogiri::xml::document#xpath_doctype()","nokogiri::css::xpath_for()","racc::parser#yyaccept()","racc::parser#yyerrok()","racc::parser#yyerror()","racc::grammarfilescanner#yylex()","bigdecimal#zero?()","rake::packagetask#zip_file()","object#zlib_source()","nokogiri::xml::nodeset#|()","racc::rule#|()","racc::sym#|()","rake::task#|()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["A","","A.html","",""],["Array","","Array.html","",""],["Benchmark","","Benchmark.html","","<p>Performance benchmarking library\n"],["Benchmark::Compare","","Benchmark/Compare.html","","<p>Functionality of performaing comparison between reports.\n<p>Usage:\n<p>Add <code>x.compare!</code> to perform comparison between …\n"],["Benchmark::IPS","","Benchmark/IPS.html","","<p>Benchmark in iterations per second, no more guessing!\n<p>See Benchmark.ips for documentation on using this …\n"],["Benchmark::IPS::Helpers","","Benchmark/IPS/Helpers.html","",""],["Benchmark::IPS::Job","","Benchmark/IPS/Job.html","","<p>Benchmark jobs.\n<p>Benchmark jobs.\n"],["Benchmark::IPS::Job::Entry","","Benchmark/IPS/Job/Entry.html","","<p>Entries in Benchmark Jobs.\n"],["Benchmark::IPS::Job::MultiReport","","Benchmark/IPS/Job/MultiReport.html","",""],["Benchmark::IPS::Job::StreamReport","","Benchmark/IPS/Job/StreamReport.html","",""],["Benchmark::IPS::Report","","Benchmark/IPS/Report.html","","<p>Report contains benchmarking entries. Perform operations like add new entry, run comparison between entries. …\n"],["Benchmark::IPS::Report::Entry","","Benchmark/IPS/Report/Entry.html","","<p>Represents benchmarking code data for Report.\n"],["Benchmark::IPS::Share","","Benchmark/IPS/Share.html","",""],["Benchmark::IPS::Stats","","Benchmark/IPS/Stats.html","",""],["Benchmark::IPS::Stats::Bootstrap","","Benchmark/IPS/Stats/Bootstrap.html","",""],["Benchmark::IPS::Stats::SD","","Benchmark/IPS/Stats/SD.html","",""],["Benchmark::IPS::Stats::StatsMetric","","Benchmark/IPS/Stats/StatsMetric.html","",""],["Benchmark::Timing","","Benchmark/Timing.html","","<p>Perform calculations on Timing results.\n"],["BigDecimal","","BigDecimal.html","","<p>BigDecimal provides arbitrary-precision floating point decimal arithmetic.\n<p>Introduction\n<p>Ruby provides built-in …\n"],["BigMath","","BigMath.html","","<p>Provides mathematical functions.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&quot;bigdecimal/math&quot;</span>\n\n<span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">BigMath</span>\n\n<span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">BigDecimal</span>((<span class=\"ruby-constant\">PI</span>(<span class=\"ruby-value\">100</span>)<span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_s</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Complex","","Complex.html","",""],["DuckDB","","DuckDB.html","","<p>DuckDB provides Ruby interface of DuckDB.\n"],["DuckDB::Appender","","DuckDB/Appender.html","","<p>The DuckDB::Appender encapsulates DuckDB Appender.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span>\n<span class=\"ruby-identifier\">con</span> = <span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">connect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["DuckDB::Blob","","DuckDB/Blob.html","",""],["DuckDB::Column","","DuckDB/Column.html","",""],["DuckDB::Config","","DuckDB/Config.html","","<p>The DuckDB::Config encapsulates DuckDB Configuration.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">config</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Config</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">config</span>[<span class=\"ruby-string\">&#39;default_order&#39;</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["DuckDB::Connection","","DuckDB/Connection.html","","<p>The DuckDB::Connection encapsulates connection with DuckDB database.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["DuckDB::Database","","DuckDB/Database.html","","<p>The Database class encapsulates a DuckDB database.\n<p>The usage is as follows:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["DuckDB::Error","","DuckDB/Error.html","",""],["DuckDB::ExtractedStatements","","DuckDB/ExtractedStatements.html","",""],["DuckDB::ExtractedStatementsImpl","","DuckDB/ExtractedStatementsImpl.html","",""],["DuckDB::Infinity","","DuckDB/Infinity.html","",""],["DuckDB::Interval","","DuckDB/Interval.html","","<p>Interval class represents DuckDB’s interval type value.\n<p>The usage is as follows:\n\n<pre>require &#39;duckdb&#39;\n ...</pre>\n"],["DuckDB::LogicalType","","DuckDB/LogicalType.html","",""],["DuckDB::PendingResult","","DuckDB/PendingResult.html","","<p>The DuckDB::PendingResult encapsulates connection with DuckDB pending result. PendingResult provides …\n"],["DuckDB::PreparedStatement","","DuckDB/PreparedStatement.html","","<p>The DuckDB::PreparedStatement encapsulates connection with DuckDB prepared statement.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["DuckDB::Result","","DuckDB/Result.html","","<p>The Result class encapsulates a execute result of DuckDB database.\n<p>The usage is as follows:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["FileTemplateHelpers","","FileTemplateHelpers.html","",""],["FileUtils","","FileUtils.html","",""],["Float","","Float.html","",""],["GeneratorHelpers","","GeneratorHelpers.html","",""],["Hoe","","Hoe.html","",""],["Hoe::Minitest","","Hoe/Minitest.html","",""],["Integer","","Integer.html","",""],["Jacobian","","Jacobian.html","","<p>require ‘bigdecimal/jacobian’\n<p>Provides methods to compute the Jacobian matrix of a set of equations …\n"],["Kernel","","Kernel.html","","<p>Kernel extensions for minitest\n"],["LOCAL_PACKAGE_RESPONSE","","LOCAL_PACKAGE_RESPONSE.html","",""],["LUSolve","","LUSolve.html","","<p>Solves a*x = b for x, using LU decomposition.\n"],["Minitest","","Minitest.html","","<p>The top-level namespace for Minitest. Also the location of the main runtime. See <code>Minitest.run</code> for more …\n"],["Minitest::AbstractReporter","","Minitest/AbstractReporter.html","","<p>Defines the API for Reporters. Subclass this and override whatever you want. Go nuts.\n"],["Minitest::Assertion","","Minitest/Assertion.html","","<p>Represents run failures.\n"],["Minitest::Assertions","","Minitest/Assertions.html","","<p>Minitest Assertions.  All assertion methods accept a <code>msg</code> which is printed if the assertion fails.\n<p>Protocol: …\n"],["Minitest::BacktraceFilter","","Minitest/BacktraceFilter.html","","<p>The standard backtrace filter for minitest.\n<p>See Minitest.backtrace_filter=.\n"],["Minitest::BenchSpec","","Minitest/BenchSpec.html","","<p>The spec version of Minitest::Benchmark.\n"],["Minitest::Benchmark","","Minitest/Benchmark.html","","<p>Subclass Benchmark to create your own benchmark runs. Methods starting with “bench_” get executed …\n"],["Minitest::CompositeReporter","","Minitest/CompositeReporter.html","","<p>Dispatch to multiple reporters as one.\n"],["Minitest::Compress","","Minitest/Compress.html","","<p>Compresses backtraces.\n"],["Minitest::Expectations","","Minitest/Expectations.html","","<p>It’s where you hide your “assertions”.\n<p>Please note, because of the way that expectations …\n"],["Minitest::Guard","","Minitest/Guard.html","","<p>Provides a simple set of guards that you can use in your tests to skip execution if it is not applicable. …\n"],["Minitest::Mock","","Minitest/Mock.html","","<p>A simple and clean mock object framework.\n<p>All mock objects are an instance of Mock\n"],["Minitest::Parallel","","Minitest/Parallel.html","",""],["Minitest::Parallel::Executor","","Minitest/Parallel/Executor.html","","<p>The engine used to run multiple tests in parallel.\n"],["Minitest::PrideIO","","Minitest/PrideIO.html","","<p>Show your testing pride!\n"],["Minitest::PrideLOL","","Minitest/PrideLOL.html","","<p>If you thought the PrideIO was colorful…\n<p>(Inspired by lolcat, but with clean math)\n"],["Minitest::ProgressReporter","","Minitest/ProgressReporter.html","","<p>A very simple reporter that prints the “dots” during the run.\n<p>This is added to the top-level …\n"],["Minitest::Reportable","","Minitest/Reportable.html","","<p>Shared code for anything that can get passed to a Reporter. See Minitest::Test &amp; Minitest::Result …\n"],["Minitest::Result","","Minitest/Result.html","","<p>This represents a test result in a clean way that can be marshalled over a wire. Tests can do anything …\n"],["Minitest::Runnable","","Minitest/Runnable.html","","<p>Represents anything “runnable”, like Test, Spec, Benchmark, or whatever you can dream up.\n<p>Subclasses …\n"],["Minitest::Skip","","Minitest/Skip.html","","<p>Assertion raised when skipping a run.\n"],["Minitest::Spec","","Minitest/Spec.html","","<p>Minitest::Spec – The faster, better, less-magical spec framework!\n<p>For a list of expectations, see Minitest::Expectations …\n"],["Minitest::Spec::DSL","","Minitest/Spec/DSL.html","","<p>Oh look! A Minitest::Spec::DSL module! Eat your heart out DHH.\n"],["Minitest::Spec::DSL::InstanceMethods","","Minitest/Spec/DSL/InstanceMethods.html","","<p>Rdoc… why are you so dumb?\n"],["Minitest::StatisticsReporter","","Minitest/StatisticsReporter.html","","<p>A reporter that gathers statistics about a test run. Does not do any IO because meant to be used as a …\n"],["Minitest::SummaryReporter","","Minitest/SummaryReporter.html","","<p>A reporter that prints the header, summary, and failure details at the end of the run.\n<p>This is added to …\n"],["Minitest::Test","","Minitest/Test.html","","<p>Subclass Test to create your own tests. Typically you’ll want a Test subclass per implementation …\n"],["Minitest::Test::LifecycleHooks","","Minitest/Test/LifecycleHooks.html","","<p>Provides before/after hooks for setup and teardown. These are meant for library writers, NOT for regular …\n"],["Minitest::TestTask","","Minitest/TestTask.html","","<p>Minitest::TestTask is a rake helper that generates several rake tasks under the main test task’s …\n"],["Minitest::UnexpectedError","","Minitest/UnexpectedError.html","","<p>Assertion wrapping an unexpected error that was raised during a run.\n"],["Minitest::UnexpectedWarning","","Minitest/UnexpectedWarning.html","","<p>Assertion raised on warning when running in -Werror mode.\n"],["Newton","","Newton.html","","<p>newton.rb\n<p>Solves the nonlinear algebraic equation system f = 0 by Newton’s method. This program is …\n"],["NilClass","","NilClass.html","",""],["Nokogiri","","Nokogiri.html","","<p>This module provides some tunables with the nokogiri CLI for use in your ~/.nokogirirc.\n<p>Nokogiri parses …\n"],["Nokogiri::CLI","","Nokogiri/CLI.html","",""],["Nokogiri::CSS","","Nokogiri/CSS.html","","<p>Translate a CSS selector into an XPath 1.0 query\n"],["Nokogiri::CSS::SyntaxError","","Nokogiri/CSS/SyntaxError.html","",""],["Nokogiri::CSS::Tokenizer","","Nokogiri/CSS/Tokenizer.html","",""],["Nokogiri::CSS::Tokenizer::ScanError","","Nokogiri/CSS/Tokenizer/ScanError.html","",""],["Nokogiri::CSS::XPathVisitor","","Nokogiri/CSS/XPathVisitor.html","","<p>When translating CSS selectors to XPath queries with Nokogiri::CSS.xpath_for, the XPathVisitor class …\n"],["Nokogiri::CSS::XPathVisitor::BuiltinsConfig","","Nokogiri/CSS/XPathVisitor/BuiltinsConfig.html","","<p>Enum to direct XPathVisitor when to use Nokogiri builtin XPath functions.\n"],["Nokogiri::CSS::XPathVisitor::DoctypeConfig","","Nokogiri/CSS/XPathVisitor/DoctypeConfig.html","","<p>Enum to direct XPathVisitor when to tweak the XPath query to suit the nature of the document being searched. …\n"],["Nokogiri::ClassResolver","","Nokogiri/ClassResolver.html","","<p>Some classes in Nokogiri are namespaced as a group, for example Document, DocumentFragment, and Builder …\n"],["Nokogiri::Decorators","","Nokogiri/Decorators.html","",""],["Nokogiri::Decorators::Slop","","Nokogiri/Decorators/Slop.html","","<p>The Slop decorator implements method missing such that a methods may be used instead of XPath or CSS …\n"],["Nokogiri::EncodingHandler","","Nokogiri/EncodingHandler.html","",""],["Nokogiri::Gumbo","","Nokogiri/Gumbo.html","",""],["Nokogiri::HTML","","Nokogiri/HTML4.html","","<p>💡 This module/namespace is an alias for Nokogiri::HTML4 as of v1.12.0. Before v1.12.0,\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML4</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Nokogiri::HTML4","","Nokogiri/HTML4.html","","<p>💡 This module/namespace is an alias for Nokogiri::HTML4 as of v1.12.0. Before v1.12.0,\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTML4</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Nokogiri::HTML4::Builder","","Nokogiri/HTML4/Builder.html","","<p>Nokogiri HTML builder is used for building HTML documents.  It is very similar to the Nokogiri::XML::Builder …\n"],["Nokogiri::HTML4::Document","","Nokogiri/HTML4/Document.html","",""],["Nokogiri::HTML4::DocumentFragment","","Nokogiri/HTML4/DocumentFragment.html","",""],["Nokogiri::HTML4::ElementDescription","","Nokogiri/HTML4/ElementDescription.html","",""],["Nokogiri::HTML4::EncodingReader","","Nokogiri/HTML4/EncodingReader.html","",""],["Nokogiri::HTML4::EncodingReader::EncodingFound","","Nokogiri/HTML4/EncodingReader/EncodingFound.html","",""],["Nokogiri::HTML4::EncodingReader::JumpSAXHandler","","Nokogiri/HTML4/EncodingReader/JumpSAXHandler.html","",""],["Nokogiri::HTML4::EncodingReader::SAXHandler","","Nokogiri/HTML4/EncodingReader/SAXHandler.html","",""],["Nokogiri::HTML4::EntityDescription","","Nokogiri/HTML4/EntityDescription.html","",""],["Nokogiri::HTML4::EntityLookup","","Nokogiri/HTML4/EntityLookup.html","",""],["Nokogiri::HTML4::SAX","","Nokogiri/HTML4/SAX.html","","<p>Nokogiri provides a SAX parser to process HTML4 which will provide HTML recovery (“autocorrection”) …\n"],["Nokogiri::HTML4::SAX::Parser","","Nokogiri/HTML4/SAX/Parser.html","","<p>💡 This class is an alias for Nokogiri::HTML4::SAX::Parser as of v1.12.0.\n<p>This parser is a SAX style parser …\n"],["Nokogiri::HTML4::SAX::ParserContext","","Nokogiri/HTML4/SAX/ParserContext.html","","<p>💡 This class is an alias for Nokogiri::HTML4::SAX::ParserContext as of v1.12.0.\n<p>Context object to invoke …\n"],["Nokogiri::HTML4::SAX::PushParser","","Nokogiri/HTML4/SAX/PushParser.html","","<p>💡 This class is an alias for Nokogiri::HTML4::SAX::PushParser as of v1.12.0.\n"],["Nokogiri::HTML5","","Nokogiri/HTML5.html","","<p>Usage\n<p>Parse an HTML5 document:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span> = <span class=\"ruby-constant\">Nokogiri</span>.<span class=\"ruby-constant\">HTML5</span>(<span class=\"ruby-identifier\">input</span>)\n</pre>\n"],["Nokogiri::HTML5::Builder","","Nokogiri/HTML5/Builder.html","","<p>Nokogiri HTML5 builder is used for building HTML documents. It is very similar to the Nokogiri::XML::Builder …\n"],["Nokogiri::HTML5::Document","","Nokogiri/HTML5/Document.html","","<p>Since v1.12.0\n<p>💡 HTML5 functionality is not available when running JRuby.\n"],["Nokogiri::HTML5::DocumentFragment","","Nokogiri/HTML5/DocumentFragment.html","","<p>Since v1.12.0\n<p>💡 HTML5 functionality is not available when running JRuby.\n"],["Nokogiri::HTML5::Node","","Nokogiri/HTML5/Node.html","","<p>Since v1.12.0\n<p>💡 HTML5 functionality is not available when running JRuby.\n"],["Nokogiri::HTML5::QuirksMode","","Nokogiri/HTML5/QuirksMode.html","","<p>Enum for the HTML5 parser quirks mode values. Values returned by HTML5::Document#quirks_mode\n<p>See dom.spec.whatwg.org/#concept-document-quirks …\n"],["Nokogiri::HTML::Builder","","Nokogiri/HTML/Builder.html","","<p>💡 This class is an alias for Nokogiri::HTML4::Builder as of v1.12.0.\n"],["Nokogiri::HTML::Document","","Nokogiri/HTML/Document.html","","<p>💡 This class is an alias for Nokogiri::HTML4::Document as of v1.12.0.\n"],["Nokogiri::HTML::DocumentFragment","","Nokogiri/HTML/DocumentFragment.html","","<p>💡 This class is an alias for Nokogiri::HTML4::DocumentFragment as of v1.12.0.\n"],["Nokogiri::SyntaxError","","Nokogiri/SyntaxError.html","",""],["Nokogiri::Test","","Nokogiri/Test.html","","<p>The Nokogiri::Test module should only be used for testing Nokogiri. Do NOT use this outside of the Nokogiri …\n"],["Nokogiri::XML","","Nokogiri/XML.html","",""],["Nokogiri::XML::Attr","","Nokogiri/XML/Attr.html","","<p>Attr represents a Attr node in an xml document.\n"],["Nokogiri::XML::AttributeDecl","","Nokogiri/XML/AttributeDecl.html","","<p>Represents an attribute declaration in a DTD\n"],["Nokogiri::XML::Builder","","Nokogiri/XML/Builder.html","","<p>Nokogiri builder can be used for building XML and HTML documents.\n<p>Synopsis:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Builder</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Nokogiri::XML::CDATA","","Nokogiri/XML/CDATA.html","","<p>CData represents a CData node in an xml document.\n"],["Nokogiri::XML::CharacterData","","Nokogiri/XML/CharacterData.html","",""],["Nokogiri::XML::Comment","","Nokogiri/XML/Comment.html","","<p>Comment represents a comment node in an xml document.\n"],["Nokogiri::XML::DTD","","Nokogiri/XML/DTD.html","","<p>Nokogiri::XML::DTD wraps DTD nodes in an XML document\n"],["Nokogiri::XML::Document","","Nokogiri/XML/Document.html","","<p>Nokogiri::XML::Document is the main entry point for dealing with XML documents. The Document is created …\n"],["Nokogiri::XML::DocumentFragment","","Nokogiri/XML/DocumentFragment.html","","<p>DocumentFragment represents a fragment of an XML document. It provides the same functionality exposed …\n"],["Nokogiri::XML::Element","","Nokogiri/XML/Element.html","",""],["Nokogiri::XML::ElementContent","","Nokogiri/XML/ElementContent.html","","<p>Represents the allowed content in an Element Declaration inside a DTD:\n\n<pre>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;?TEST-STYLE ...</pre>\n"],["Nokogiri::XML::ElementDecl","","Nokogiri/XML/ElementDecl.html","",""],["Nokogiri::XML::EntityDecl","","Nokogiri/XML/EntityDecl.html","",""],["Nokogiri::XML::EntityReference","","Nokogiri/XML/EntityReference.html","","<p>EntityReference represents an EntityReference node in an xml document.\n"],["Nokogiri::XML::Namespace","","Nokogiri/XML/Namespace.html","",""],["Nokogiri::XML::Node","","Nokogiri/XML/Node.html","","<p>Nokogiri::XML::Node is the primary API you’ll use to interact with your Document.\n<p>Attributes\n<p>A Nokogiri::XML::Node …\n"],["Nokogiri::XML::Node::SaveOptions","","Nokogiri/XML/Node/SaveOptions.html","","<p>Save options for serializing nodes. See the method group entitled Node@Serialization+and+Generating+Output …\n"],["Nokogiri::XML::NodeSet","","Nokogiri/XML/NodeSet.html","","<p>A NodeSet is an Enumerable that contains a list of Nokogiri::XML::Node objects.\n<p>Typically a NodeSet is …\n"],["Nokogiri::XML::Notation","","Nokogiri/XML/Notation.html","","<p>Struct representing an XML Schema Notation\n"],["Nokogiri::XML::PP","","Nokogiri/XML/PP.html","",""],["Nokogiri::XML::PP::CharacterData","","Nokogiri/XML/PP/CharacterData.html","",""],["Nokogiri::XML::PP::Node","","Nokogiri/XML/PP/Node.html","",""],["Nokogiri::XML::ParseOptions","","Nokogiri/XML/ParseOptions.html","","<p>Options that control the parsing behavior for XML::Document, XML::DocumentFragment, HTML4::Document, …\n"],["Nokogiri::XML::ProcessingInstruction","","Nokogiri/XML/ProcessingInstruction.html","","<p>ProcessingInstruction represents a ProcessingInstruction node in an xml document.\n"],["Nokogiri::XML::Reader","","Nokogiri/XML/Reader.html","","<p>The Reader parser allows you to effectively pull parse an XML document.  Once instantiated, call Nokogiri::XML::Reader#each …\n"],["Nokogiri::XML::RelaxNG","","Nokogiri/XML/RelaxNG.html","","<p>Nokogiri::XML::RelaxNG is used for validating XML against a RELAX NG schema definition.\n<p>🛡 <strong>Do not use this</strong> …\n"],["Nokogiri::XML::SAX","","Nokogiri/XML/SAX.html","","<p>SAX Parsers are event-driven parsers.\n<p>Two SAX parsers for XML are available, a parser that reads from …\n"],["Nokogiri::XML::SAX::Document","","Nokogiri/XML/SAX/Document.html","","<p>The SAX::Document class is used for registering types of events you are interested in\nhandling. All of ...\n"],["Nokogiri::XML::SAX::Parser","","Nokogiri/XML/SAX/Parser.html","","<p>This parser is a SAX style parser that reads its input as it deems necessary. The parser takes a Nokogiri::XML::SAX::Document …\n"],["Nokogiri::XML::SAX::Parser::Attribute","","Nokogiri/XML/SAX/Parser/Attribute.html","","<p>Structure used for marshalling attributes for some callbacks in XML::SAX::Document.\n"],["Nokogiri::XML::SAX::ParserContext","","Nokogiri/XML/SAX/ParserContext.html","","<p>Context object to invoke the XML SAX parser on the SAX::Document handler.\n<p>💡 This class is usually not …\n"],["Nokogiri::XML::SAX::PushParser","","Nokogiri/XML/SAX/PushParser.html","","<p>PushParser can parse a document that is fed to it manually.  It must be given a SAX::Document object …\n"],["Nokogiri::XML::Schema","","Nokogiri/XML/Schema.html","","<p>Nokogiri::XML::Schema is used for validating XML against an XSD schema definition.\n<p>⚠ Since v1.11.0, Schema …\n"],["Nokogiri::XML::Searchable","","Nokogiri/XML/Searchable.html","","<p>The Searchable module declares the interface used for searching your DOM.\n<p>It implements the public methods …\n"],["Nokogiri::XML::SyntaxError","","Nokogiri/XML/SyntaxError.html","","<p>The XML::SyntaxError is raised on parse errors\n<p>This class provides information about XML SyntaxErrors …\n"],["Nokogiri::XML::Text","","Nokogiri/XML/Text.html","","<p>Wraps Text nodes.\n"],["Nokogiri::XML::XPath","","Nokogiri/XML/XPath.html","",""],["Nokogiri::XML::XPath::SyntaxError","","Nokogiri/XML/XPath/SyntaxError.html","",""],["Nokogiri::XML::XPathContext","","Nokogiri/XML/XPathContext.html","","<p>XPathContext is the entry point for searching a <code>Document</code> by using XPath.\n"],["Nokogiri::XSLT","","Nokogiri/XSLT.html","","<p>See Nokogiri::XSLT::Stylesheet for creating and manipulating Stylesheet object.\n"],["Nokogiri::XSLT::Stylesheet","","Nokogiri/XSLT/Stylesheet.html","","<p>A Stylesheet represents an XSLT Stylesheet object.  Stylesheet creation is done through Nokogiri.XSLT …\n"],["Object","","Object.html","","<p>Object extensions for Minitest::Mock.\n"],["PlatformExtensionHelpers","","PlatformExtensionHelpers.html","",""],["RDoc","","RDoc.html","",""],["RDoc::Page","","RDoc/Page.html","",""],["Racc","","Racc.html","","<p>Racc is an LALR(1) parser generator. It is written in Ruby itself, and generates Ruby programs.\n<p>Command-line …\n"],["Racc::Accept","","Racc/Accept.html","",""],["Racc::ActionTable","","Racc/ActionTable.html","","<p>The table of LALR actions. Actions are either of Shift, Reduce, Accept and Error.\n"],["Racc::CompileError","","Racc/CompileError.html","",""],["Racc::CparseParams","","Racc/CparseParams.html","",""],["Racc::DebugFlags","","Racc/DebugFlags.html","",""],["Racc::Error","","Racc/Error.html","",""],["Racc::Goto","","Racc/Goto.html","","<p>Represents a transition on the grammar. “Real goto” means a transition by nonterminal, but …\n"],["Racc::Grammar","","Racc/Grammar.html","",""],["Racc::Grammar::DefinitionEnv","","Racc/Grammar/DefinitionEnv.html","",""],["Racc::Grammar::PrecedenceDefinitionEnv","","Racc/Grammar/PrecedenceDefinitionEnv.html","",""],["Racc::GrammarFileParser","","Racc/GrammarFileParser.html","",""],["Racc::GrammarFileParser::Result","","Racc/GrammarFileParser/Result.html","",""],["Racc::GrammarFileScanner","","Racc/GrammarFileScanner.html","",""],["Racc::GroupEndMark","","Racc/GroupEndMark.html","",""],["Racc::GroupStartMark","","Racc/GroupStartMark.html","",""],["Racc::ISet","","Racc/ISet.html","","<p>An “indexed” set.  All items must respond to :ident.\n"],["Racc::Item","","Racc/Item.html","","<p>LALR item.  A set of rule and its lookahead tokens.\n"],["Racc::LocationPointer","","Racc/LocationPointer.html","","<p>A set of rule and position in it’s RHS. Note that the number of pointers is more than rule’s …\n"],["Racc::LogFileGenerator","","Racc/LogFileGenerator.html","",""],["Racc::Many1Mark","","Racc/Many1Mark.html","",""],["Racc::ManyMark","","Racc/ManyMark.html","",""],["Racc::OptionMark","","Racc/OptionMark.html","",""],["Racc::OrMark","","Racc/OrMark.html","",""],["Racc::ParseError","","Racc/ParseError.html","",""],["Racc::Parser","","Racc/Parser.html","",""],["Racc::ParserClassGenerator","","Racc/ParserClassGenerator.html","",""],["Racc::ParserFileGenerator","","Racc/ParserFileGenerator.html","",""],["Racc::ParserFileGenerator::Params","","Racc/ParserFileGenerator/Params.html","",""],["Racc::Prec","","Racc/Prec.html","",""],["Racc::RRconflict","","Racc/RRconflict.html","",""],["Racc::Reduce","","Racc/Reduce.html","",""],["Racc::Rule","","Racc/Rule.html","",""],["Racc::SRconflict","","Racc/SRconflict.html","",""],["Racc::Shift","","Racc/Shift.html","",""],["Racc::SourceText","","Racc/SourceText.html","",""],["Racc::State","","Racc/State.html","","<p>A LALR state.\n"],["Racc::StateTransitionTable","","Racc/StateTransitionTable.html","",""],["Racc::StateTransitionTableGenerator","","Racc/StateTransitionTableGenerator.html","",""],["Racc::States","","Racc/States.html","","<p>A table of LALR states.\n"],["Racc::Sym","","Racc/Sym.html","","<p>Stands terminal and nonterminal symbols.\n"],["Racc::SymbolTable","","Racc/SymbolTable.html","",""],["Racc::UserAction","","Racc/UserAction.html","",""],["RaccProfiler","","RaccProfiler.html","",""],["Rake","","Rake.html","","<p>Define a series of tasks to aid in the compilation of C extensions for gem developer/creators.\n<p>Define …\n"],["Rake::Application","","Rake/Application.html","","<p>Rake main application object.  When invoking <code>rake</code> from the command line, a Rake::Application object is …\n"],["Rake::BaseExtensionTask","","Rake/BaseExtensionTask.html","",""],["Rake::Cleaner","","Rake/Cleaner.html","",""],["Rake::CompilerConfig","","Rake/CompilerConfig.html","",""],["Rake::DSL","","Rake/DSL.html","","<p>DSL is a module that provides #task, #desc, #namespace, etc.  Use this when you’d like to use rake …\n"],["Rake::DefaultLoader","","Rake/DefaultLoader.html","","<p>Default Rakefile loader used by <code>import</code>.\n"],["Rake::EarlyTime","","Rake/EarlyTime.html","","<p>EarlyTime is a fake timestamp that occurs <em>before</em> any other time value.\n"],["Rake::ExtensionCompiler","","Rake/ExtensionCompiler.html","","<p>HACK: Lousy API design, sue me. At least works ;-)\n<p>Define a series of helpers to aid in search and usage …\n"],["Rake::ExtensionTask","","Rake/ExtensionTask.html","",""],["Rake::FileCreationTask","","Rake/FileCreationTask.html","","<p>A FileCreationTask is a file task that when used as a dependency will be needed if and only if the file …\n"],["Rake::FileList","","Rake/FileList.html","","<p>A FileList is essentially an array with a few helper methods defined to make file manipulation a bit …\n"],["Rake::FileTask","","Rake/FileTask.html","","<p>A FileTask is a task that includes time based dependencies.  If any of a FileTask’s prerequisites …\n"],["Rake::FileUtilsExt","","Rake/FileUtilsExt.html","","<p>FileUtilsExt provides a custom version of the FileUtils methods that respond to the <code>verbose</code> and <code>nowrite</code> …\n"],["Rake::InvocationChain","","Rake/InvocationChain.html","","<p>InvocationChain tracks the chain of task invocations to detect circular dependencies.\n"],["Rake::InvocationChain::EmptyInvocationChain","","Rake/InvocationChain/EmptyInvocationChain.html","","<p>Null object for an empty chain.\n"],["Rake::InvocationExceptionMixin","","Rake/InvocationExceptionMixin.html","",""],["Rake::JavaExtensionTask","","Rake/JavaExtensionTask.html","",""],["Rake::LateTime","","Rake/LateTime.html","","<p>LateTime is a fake timestamp that occurs <em>after</em> any other time value.\n"],["Rake::LinkedList","","Rake/LinkedList.html","","<p>Polylithic linked list structure used to implement several data structures in Rake.\n"],["Rake::LinkedList::EmptyLinkedList","","Rake/LinkedList/EmptyLinkedList.html","","<p>Represent an empty list, using the Null Object Pattern.\n<p>When inheriting from the LinkedList class, you …\n"],["Rake::MakefileLoader","","Rake/MakefileLoader.html","","<p>Makefile loader to be used with the import file loader.  Use this to import dependencies from make dependency …\n"],["Rake::MultiTask","","Rake/MultiTask.html","","<p>Same as a regular task, but the immediate prerequisites are done in parallel using Ruby threads.\n"],["Rake::NameSpace","","Rake/NameSpace.html","","<p>The NameSpace class will lookup task names in the scope defined by a <code>namespace</code> command.\n"],["Rake::PackageTask","","Rake/PackageTask.html","","<p>Create a packaging task that will package the project into distributable files (e.g zip archive or tar …\n"],["Rake::PrivateReader","","Rake/PrivateReader.html","",""],["Rake::PrivateReader::ClassMethods","","Rake/PrivateReader/ClassMethods.html","",""],["Rake::RakeFileUtils","","Rake/FileUtilsExt.html","","<p>FileUtilsExt provides a custom version of the FileUtils methods that respond to the <code>verbose</code> and <code>nowrite</code> …\n"],["Rake::RuleRecursionOverflowError","","Rake/RuleRecursionOverflowError.html","","<p>Error indicating a recursion overflow error in task selection.\n"],["Rake::Scope","","Rake/Scope.html","",""],["Rake::Scope::EmptyScope","","Rake/Scope/EmptyScope.html","",""],["Rake::Task","","Rake/Task.html","","<p>A Task is the basic unit of work in a Rakefile.  Tasks have associated actions (possibly more than one) …\n"],["Rake::TaskArgumentError","","Rake/TaskArgumentError.html","","<p>Error indicating an ill-formed task declaration.\n"],["Rake::TaskArguments","","Rake/TaskArguments.html","","<p>TaskArguments manage the arguments passed to a task.\n"],["Rake::TaskLib","","Rake/TaskLib.html","","<p>Base class for Task Libraries.\n"],["Rake::TaskManager","","Rake/TaskManager.html","","<p>The TaskManager module is a mixin for managing tasks.\n"],["Rake::TestTask","","Rake/TestTask.html","","<p>Create a task that runs a set of tests.\n<p>Example:\n\n<pre>require &quot;rake/testtask&quot;\n\nRake::TestTask.new do |t|\n  t.libs ...</pre>\n"],["Rake::Win32","","Rake/Win32.html","",""],["Rake::Win32::Win32HomeError","","Rake/Win32/Win32HomeError.html","",""],["Rational","","Rational.html","",""],["RbConfig","","RbConfig.html","",""],["RubyMemcheck","","RubyMemcheck.html","",""],["RubyMemcheck::Configuration","","RubyMemcheck/Configuration.html","",""],["RubyMemcheck::Frame","","RubyMemcheck/Frame.html","",""],["RubyMemcheck::RSpec","","RubyMemcheck/RSpec.html","",""],["RubyMemcheck::RSpec::RakeTask","","RubyMemcheck/RSpec/RakeTask.html","",""],["RubyMemcheck::RubyRunner","","RubyMemcheck/RubyRunner.html","",""],["RubyMemcheck::Stack","","RubyMemcheck/Stack.html","",""],["RubyMemcheck::Suppression","","RubyMemcheck/Suppression.html","",""],["RubyMemcheck::TestTask","","RubyMemcheck/TestTask.html","",""],["RubyMemcheck::TestTaskReporter","","RubyMemcheck/TestTaskReporter.html","",""],["RubyMemcheck::ValgrindError","","RubyMemcheck/ValgrindError.html","",""],["StackProf","","StackProf.html","",""],["StackProf::Middleware","","StackProf/Middleware.html","",""],["StackProf::Report","","StackProf/Report.html","",""],["String","","String.html","",""],["SubThingySpec","","SubThingySpec.html","",""],["ThingySpec","","ThingySpec.html","","\n<pre>end</pre>\n<p>end\n<p>runs 2 specs                         # runs 3 tests\n"],["XSD","","XSD.html","",""],["XSD::XMLParser","","XSD/XMLParser.html","",""],["XSD::XMLParser::Nokogiri","","XSD/XMLParser/Nokogiri.html","","<p>Nokogiri XML parser for soap4r.\n<p>Nokogiri may be used as the XML parser in soap4r. Require ‘xsd/xmlparser/nokogiri’ …\n"],["%","BigDecimal","BigDecimal.html#method-i-25","(p1)","<p>Returns the modulus from dividing by b.\n<p>See BigDecimal#divmod.\n"],["%","LOCAL_PACKAGE_RESPONSE","LOCAL_PACKAGE_RESPONSE.html#method-c-25","(package)",""],["%","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-25","(*args)",""],["%","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-25","(*args)",""],["&","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-26","(p1)","<p>Set Intersection — Returns a new NodeSet containing nodes common to the two NodeSets.\n"],["*","BigDecimal","BigDecimal.html#method-i-2A","(p1)","<p>Multiply by the specified value.\n<p>The result precision will be the precision of the sum of each precision. …\n"],["*","Rake::FileList","Rake/FileList.html#method-i-2A","(other)","<p>Redefine * to return either a string or a new file list.\n"],["**","BigDecimal","BigDecimal.html#method-i-2A-2A","(p1)","<p>Returns the BigDecimal value of <code>self</code> raised to power <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;3.14&#39;</span>)\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">2</span>             <span class=\"ruby-operator\">...</span>\n</pre>\n"],["+","BigDecimal","BigDecimal.html#method-i-2B","(p1)","<p>Returns the BigDecimal sum of <code>self</code> and <code>value</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;111111.111&#39;</span>) <span class=\"ruby-comment\"># =&gt; 0.111111111e6</span>\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">2</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["+","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-2B","(p1)",""],["+","StackProf::Report","StackProf/Report.html#method-i-2B","(other)",""],["+@","BigDecimal","BigDecimal.html#method-i-2B-40","()","<p>Returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">+</span><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-value\">5</span>)  <span class=\"ruby-comment\"># =&gt; 0.5e1</span>\n<span class=\"ruby-operator\">+</span><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-value\">-5</span>) <span class=\"ruby-comment\"># =&gt; -0.5e1</span>\n</pre>\n"],["-","BigDecimal","BigDecimal.html#method-i-2D","(p1)","<p>Returns the BigDecimal difference of <code>self</code> and <code>value</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;333333.333&#39;</span>) <span class=\"ruby-comment\"># =&gt; 0.333333333e6</span>\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["-","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-2D","(p1)","<p>Difference - returns a new NodeSet that is a copy of this NodeSet, removing each item that also appears …\n"],["-@","BigDecimal","BigDecimal.html#method-i-2D-40","()","<p>Returns the BigDecimal negation of self:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b0</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>)\n<span class=\"ruby-identifier\">b1</span> = <span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">b0</span> <span class=\"ruby-comment\"># =&gt; -0.15e1</span>\n<span class=\"ruby-identifier\">b2</span> = <span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">b1</span> <span class=\"ruby-comment\"># =&gt; 0.15e1</span>\n</pre>\n"],["/","BigDecimal","BigDecimal.html#method-i-2F","(p1)","<p>Divide by the specified value.\n<p>The result precision will be the precision of the larger operand, but its …\n"],["/","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-2F","(*args)",""],["<","BigDecimal","BigDecimal.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>self</code> is less than <code>other</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>) <span class=\"ruby-comment\"># =&gt; 0.15e1</span>\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">2</span>     <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<<","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-3C-3C","(report)","<p>@param report [StreamReport] report to accept input?\n"],["<<","Minitest::CompositeReporter","Minitest/CompositeReporter.html#method-i-3C-3C","(reporter)","<p>Add another reporter to the mix.\n"],["<<","Minitest::Parallel::Executor","Minitest/Parallel/Executor.html#method-i-3C-3C","(work;)","<p>Add a job to the queue\n"],["<<","Nokogiri::HTML4::SAX::PushParser","Nokogiri/HTML4/SAX/PushParser.html#method-i-3C-3C","(chunk, last_chunk = false)",""],["<<","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-3C-3C","(string)","<p>Append the given raw XML <code>string</code> to the document\n"],["<<","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-3C-3C","(node_or_tags)",""],["<<","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3C-3C","(node_or_tags)","<p>Add <code>node_or_tags</code> as a child of this Node.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["<<","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-3C-3C","(p1)",""],["<<","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-3C-3C","(chunk, last_chunk = false)",""],["<<","Rake::FileList","Rake/FileList.html#method-i-3C-3C","(obj)",""],["<=","BigDecimal","BigDecimal.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is less or equal to than <code>other</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>) <span class=\"ruby-comment\"># =&gt; 0.15e1 ...</span>\n</pre>\n"],["<=>","BigDecimal","BigDecimal.html#method-i-3C-3D-3E","(p1)","<p>The comparison operator. a &lt;=&gt; b is 0 if a == b, 1 if a &gt; b, -1 if a &lt; b.\n"],["<=>","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3C-3D-3E","(other)","<p>Compare two Node objects with respect to their Document.  Nodes from different documents cannot be compared. …\n"],["<=>","Rake::EarlyTime","Rake/EarlyTime.html#method-i-3C-3D-3E","(other)","<p>The EarlyTime always comes before <code>other</code>!\n"],["<=>","Rake::LateTime","Rake/LateTime.html#method-i-3C-3D-3E","(other)",""],["==","BigDecimal","BigDecimal.html#method-i-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["==","DuckDB::Interval","DuckDB/Interval.html#method-i-3D-3D","(other)",""],["==","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3D-3D","(other)","<p>Test to see if this Node is equal to <code>other</code>\n"],["==","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-3D-3D","(other)","<p>Equality – Two NodeSets are equal if the contain the same number of elements and if each element is …\n"],["==","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-3D-3D","(other)",""],["==","Racc::LocationPointer","Racc/LocationPointer.html#method-i-3D-3D","(ot)",""],["==","Racc::Rule","Racc/Rule.html#method-i-3D-3D","(other)",""],["==","Racc::State","Racc/State.html#method-i-3D-3D","(oth)",""],["==","Rake::FileList","Rake/FileList.html#method-i-3D-3D","(array)","<p>A FileList is equal through array equality.\n"],["==","Rake::LinkedList","Rake/LinkedList.html#method-i-3D-3D","(other)","<p>Lists are structurally equivalent.\n"],["===","BigDecimal","BigDecimal.html#method-i-3D-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],[">","BigDecimal","BigDecimal.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>self</code> is greater than <code>other</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>)\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>              <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-3E","(selector)","<p>Search this node’s immediate children using CSS selector <code>selector</code>\n"],[">=","BigDecimal","BigDecimal.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is greater than or equal to <code>other</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>)\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">&gt;=</span> <span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["BigDecimal","Kernel","Kernel.html#method-i-BigDecimal","(p1, p2 = v2, p3 = {})","<p>Returns the BigDecimal converted from <code>value</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is …\n"],["E","BigMath","BigMath.html#method-i-E","(prec)","<p>Computes e (the base of natural logarithms) to the specified number of digits of precision, <code>numeric</code>. …\n"],["HTML","Nokogiri","Nokogiri.html#method-c-HTML","","<p>Parse HTML. Convenience method for Nokogiri::HTML4::Document.parse\n"],["HTML4","Nokogiri","Nokogiri.html#method-c-HTML4","(...)","<p>Convenience method for Nokogiri::HTML4::Document.parse\n"],["HTML5","Nokogiri","Nokogiri.html#method-c-HTML5","(...)","<p>Convenience method for Nokogiri::HTML5::Document.parse\n"],["Nokogiri","Object","Object.html#method-i-Nokogiri","(*args, &block)","<p>Parse a document contained in <code>args</code>.  Nokogiri will try to guess what type of document you are attempting …\n"],["PI","BigMath","BigMath.html#method-i-PI","(prec)","<p>Computes the value of pi to the specified number of digits of precision, <code>numeric</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigMath</span>.<span class=\"ruby-constant\">PI</span>(<span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Reader","Nokogiri::XML","Nokogiri/XML.html#method-c-Reader","(...)","<p>Convenience method for Nokogiri::XML::Reader.new\n"],["RelaxNG","Nokogiri::XML","Nokogiri/XML.html#method-c-RelaxNG","(...)","<p>Convenience method for Nokogiri::XML::RelaxNG.new\n"],["Schema","Nokogiri::XML","Nokogiri/XML.html#method-c-Schema","(...)","<p>Convenience method for Nokogiri::XML::Schema.new\n"],["Slop","Nokogiri","Nokogiri.html#method-c-Slop","(*args, &block)","<p>Parse a document and add the Slop decorator.  The Slop decorator implements method_missing such that …\n"],["XML","Nokogiri","Nokogiri.html#method-c-XML","(...)","<p>Convenience method for Nokogiri::XML::Document.parse\n"],["XSLT","Nokogiri","Nokogiri.html#method-c-XSLT","(...)","<p>Convenience method for Nokogiri::XSLT.parse\n"],["[]","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-5B-5D","(p1)","<p>Get the encoding handler for <code>name</code>\n"],["[]","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-c-5B-5D","(p1)","<p>Get ElementDescription for <code>tag_name</code>\n"],["[]","Nokogiri::HTML4::EntityLookup","Nokogiri/HTML4/EntityLookup.html#method-i-5B-5D","(name)","<p>Look up entity with <code>name</code>\n"],["[]","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-5B-5D","(ns)","<p>Build a tag that is associated with namespace <code>ns</code>.  Raises an ArgumentError if <code>ns</code> has not been defined …\n"],["[]","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-5B-5D","(name)","<p>Fetch an attribute from this node.\n<p>⚠ Note that attributes with namespaces cannot be accessed with this …\n"],["[]","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-5B-5D","(p1, p2 = v2)","<p>Element reference - returns the node at <code>index</code>, or returns a NodeSet containing nodes starting at <code>start</code> …\n"],["[]","Racc::Grammar","Racc/Grammar.html#method-i-5B-5D","(x)",""],["[]","Racc::ISet","Racc/ISet.html#method-i-5B-5D","(key)",""],["[]","Racc::Rule","Racc/Rule.html#method-i-5B-5D","(idx)",""],["[]","Racc::States","Racc/States.html#method-i-5B-5D","(i)",""],["[]","Racc::SymbolTable","Racc/SymbolTable.html#method-i-5B-5D","(id)",""],["[]","Rake::FileList","Rake/FileList.html#method-c-5B-5D","(*args)","<p>Create a new file list including the files listed. Similar to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileList</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">args</span>)\n</pre>\n"],["[]","Rake::NameSpace","Rake/NameSpace.html#method-i-5B-5D","(name)","<p>Lookup a task named <code>name</code> in the namespace.\n"],["[]","Rake::Task","Rake/Task.html#method-c-5B-5D","(task_name)","<p>Return a task with the given name.  If the task is not currently known, try to synthesize one from the …\n"],["[]","Rake::TaskArguments","Rake/TaskArguments.html#method-i-5B-5D","(index)","<p>Find an argument value by name or index.\n"],["[]","Rake::TaskManager","Rake/TaskManager.html#method-i-5B-5D","(task_name, scopes=nil)","<p>Find a matching task for <code>task_name</code>.\n"],["[]=","DuckDB::Config","DuckDB/Config.html#method-i-5B-5D-3D","(p1, p2)","<p>set configuration value\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">config</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Config</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-comment\"># config.set_config(&#39;default_order&#39;, &#39;DESC&#39;)</span>\n<span class=\"ruby-identifier\">config</span>[<span class=\"ruby-string\">&#39;default_order&#39;</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-5B-5D-3D","(name, value)","<p>Update the attribute <code>name</code> to <code>value</code>, or create the attribute if it does not exist.\n<p>⚠ Note that attributes …\n"],["[]=","Racc::ISet","Racc/ISet.html#method-i-5B-5D-3D","(key, val)",""],["_","Minitest::Spec::DSL::InstanceMethods","Minitest/Spec/DSL/InstanceMethods.html#method-i-_","(value = nil, &block)","<p>Takes a value or a block and returns a value monad that has all of Expectations methods available to …\n"],["_","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_","(&block)",""],["__foreign_error_handler","Nokogiri::Test","Nokogiri/Test.html#method-c-__foreign_error_handler","()","<p>Override libxml2’s global error handlers to call the block. This method thus has very little value …\n"],["__run","Minitest","Minitest.html#method-c-__run","(reporter, options)","<p>Internal run method. Responsible for telling all Runnable sub-classes to run.\n"],["_add","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_add","(target, x)",""],["_added?","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_added-3F","(sym)",""],["_delayed_add","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_delayed_add","(rule)",""],["_dump","BigDecimal","BigDecimal.html#method-i-_dump","(p1 = v1)","<p>Returns a string representing the marshalling of <code>self</code>. See module Marshal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">inf</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;Infinity&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["_intern","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_intern","(x)",""],["_load","BigDecimal","BigDecimal.html#method-c-_load","(p1)","<p>Internal method used to provide marshalling support. See the Marshal module.\n"],["_racc_do_parse_rb","Racc::Parser","Racc/Parser.html#method-i-_racc_do_parse_rb","(arg, in_debug)",""],["_racc_do_reduce","Racc::Parser","Racc/Parser.html#method-i-_racc_do_reduce","(arg, act)",""],["_racc_evalact","Racc::Parser","Racc/Parser.html#method-i-_racc_evalact","(act, arg)","<p>common\n"],["_racc_init_sysvars","Racc::Parser","Racc/Parser.html#method-i-_racc_init_sysvars","()",""],["_racc_setup","Racc::Parser","Racc/Parser.html#method-i-_racc_setup","()",""],["_racc_yyparse_rb","Racc::Parser","Racc/Parser.html#method-i-_racc_yyparse_rb","(recv, mid, arg, c_debug)",""],["abort_could_not_find_library","Object","Object.html#method-i-abort_could_not_find_library","(lib)",""],["abs","BigDecimal","BigDecimal.html#method-i-abs","()","<p>Returns the BigDecimal absolute value of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;5&#39;</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\"># =&gt; 0.5e1</span>\n<span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;-3&#39;</span>).<span class=\"ruby-identifier\">abs</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["accept","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-accept","(visitor)","<p>Accept a visitor.  This method calls “visit” on <code>visitor</code> with self.\n"],["accept?","Racc::Rule","Racc/Rule.html#method-i-accept-3F","()",""],["act2actid","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-act2actid","(act)",""],["action","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-action","(&block)",""],["action_out","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-action_out","(f, state)",""],["add","BigDecimal","BigDecimal.html#method-i-add","(p1, p2)","<p>Returns the BigDecimal sum of <code>self</code> and <code>value</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> …\n"],["add","Object","Object.html#method-i-add","()",""],["add","Racc::Grammar","Racc/Grammar.html#method-i-add","(rule)","<p>Grammar Definition Interface\n"],["add","Racc::ISet","Racc/ISet.html#method-i-add","(i)",""],["add","Rake::FileList","Rake/FileList.html#method-i-add","(*filenames)",""],["add_child","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-add_child","(node_or_tags)",""],["add_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_child","(node_or_tags)","<p>Add <code>node_or_tags</code> as a child of this Node.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["add_class","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_class","(names)","<p>Ensure HTML CSS classes are present on <code>self</code>. Any CSS classes in <code>names</code> that already exist in the “class” …\n"],["add_class","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-add_class","(name)","<p>Add the class attribute <code>name</code> to all Node objects in the NodeSet.\n<p>See Nokogiri::XML::Node#add_class for …\n"],["add_description","Rake::Task","Rake/Task.html#method-i-add_description","(description)","<p>Add a description to the task.  The description can consist of an option argument list (enclosed brackets) …\n"],["add_entry","Benchmark::IPS::Report","Benchmark/IPS/Report.html#method-i-add_entry","(label, microseconds, iters, stats, measurement_cycle)","<p>Add entry to report. @param label [String] Entry label. @param microseconds [Integer] Measured time in …\n"],["add_lines","StackProf::Report","StackProf/Report.html#method-i-add_lines","(a, b)",""],["add_loader","Rake::Application","Rake/Application.html#method-i-add_loader","(ext, loader)","<p>Add a loader to handle imported files ending in the extension <code>ext</code>.\n"],["add_namespace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_namespace","(p1, p2)",""],["add_namespace_definition","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_namespace_definition","(p1, p2)","<p>Adds a namespace definition to this node with <code>prefix</code> using <code>href</code> value, as if this node had included an …\n"],["add_next_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_next_sibling","(node_or_tags)","<p>Insert <code>node_or_tags</code> after this Node (as a sibling).\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["add_previous_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_previous_sibling","(node_or_tags)","<p>Insert <code>node_or_tags</code> before this Node (as a sibling).\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["add_rakelib","Rake","Rake.html#method-c-add_rakelib","(*files)","<p>Add files to the rakelib list\n"],["add_report","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-add_report","(item, caller)",""],["add_report","Benchmark::IPS::Job::StreamReport","Benchmark/IPS/Job/StreamReport.html#method-i-add_report","(item, caller)",""],["add_second","Benchmark::Timing","Benchmark/Timing.html#method-c-add_second","(t, s)","<p>Add one second to the time represenetation\n"],["add_target","Rake::RuleRecursionOverflowError","Rake/RuleRecursionOverflowError.html#method-i-add_target","(target)",""],["added?","Racc::Grammar","Racc/Grammar.html#method-i-added-3F","(sym)",""],["addent","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-addent","(all, arr, chkval, ptr)",""],["after","Minitest::Spec::DSL","Minitest/Spec/DSL.html#method-i-after","(_type = nil, &block)","<p>Define an ‘after’ action. Inherits the way normal methods should.\n<p>NOTE: <code>type</code> is ignored and is …\n"],["after","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-after","(node_or_tags)","<p>Insert <code>node_or_tags</code> after this node (as a sibling).\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment …\n"],["after","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-after","(datum)","<p>Insert <code>datum</code> after the last Node in this NodeSet\n"],["after_run","Minitest","Minitest.html#method-c-after_run","(&block)","<p>A simple hook allowing you to run a block of code after everything is done running. Eg:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Minitest</span>.<span class=\"ruby-identifier\">after_run</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["after_setup","Minitest::Test::LifecycleHooks","Minitest/Test/LifecycleHooks.html#method-i-after_setup","()","<p>Runs before every test, after setup. This hook is meant for libraries to extend minitest. It is not meant …\n"],["after_teardown","Minitest::Test::LifecycleHooks","Minitest/Test/LifecycleHooks.html#method-i-after_teardown","()","<p>Runs after every test, after teardown. This hook is meant for libraries to extend minitest. It is not …\n"],["aggregate","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-c-aggregate","(errors)",""],["aix?","Object","Object.html#method-i-aix-3F","()",""],["alias","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-alias","(p1, p2)","<p>Alias encoding handler with name <code>real_name</code> to name <code>alias_name</code>\n"],["all_prerequisite_tasks","Rake::Task","Rake/Task.html#method-i-all_prerequisite_tasks","()","<p>List of all unique prerequisite tasks including prerequisite tasks’ prerequisites. Includes self …\n"],["all_results_have_been_run?","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-all_results_have_been_run-3F","()",""],["ancestors","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-ancestors","(selector = nil)","<p>Get a list of ancestor Node for this Node.  If <code>selector</code> is given, the ancestors must match <code>selector</code>\n"],["any?","Racc::DebugFlags","Racc/DebugFlags.html#method-i-any-3F","()",""],["append","DuckDB::Appender","DuckDB/Appender.html#method-i-append","(value)","<p>appends value.\n\n<pre>require &#39;duckdb&#39;\ndb = DuckDB::Database.open\ncon = db.connect\ncon.query(&#39;CREATE TABLE users ...</pre>\n"],["append","Rake::InvocationChain","Rake/InvocationChain.html#method-i-append","(invocation)","<p>Append an invocation to the chain of invocations. It is an error if the invocation already listed.\n"],["append","Rake::InvocationChain","Rake/InvocationChain.html#method-c-append","(invocation, chain)","<p>Class level append.\n"],["append","Rake::InvocationChain::EmptyInvocationChain","Rake/InvocationChain/EmptyInvocationChain.html#method-i-append","(invocation)",""],["append_blob","DuckDB::Appender","DuckDB/Appender.html#method-i-append_blob","(p1)",""],["append_bool","DuckDB::Appender","DuckDB/Appender.html#method-i-append_bool","(value)","<p>Appends a boolean value to the current row in the appender.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["append_class","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-append_class","(names)","<p>Add HTML CSS classes to <code>self</code>, regardless of duplication. Compare with #add_class.\n<p>This is a convenience …\n"],["append_class","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-append_class","(name)","<p>Append the class attribute <code>name</code> to all Node objects in the NodeSet.\n<p>See Nokogiri::XML::Node#append_class …\n"],["append_date","DuckDB::Appender","DuckDB/Appender.html#method-i-append_date","(value)","<p>appends date value.\n\n<pre>require &#39;duckdb&#39;\ndb = DuckDB::Database.open\ncon = db.connect\ncon.query(&#39;CREATE TABLE ...</pre>\n"],["append_default","DuckDB::Appender","DuckDB/Appender.html#method-i-append_default","()",""],["append_double","DuckDB::Appender","DuckDB/Appender.html#method-i-append_double","(p1)",""],["append_float","DuckDB::Appender","DuckDB/Appender.html#method-i-append_float","(p1)",""],["append_hugeint","DuckDB::Appender","DuckDB/Appender.html#method-i-append_hugeint","(value)","<p>appends huge int value.\n\n<pre>require &#39;duckdb&#39;\ndb = DuckDB::Database.open\ncon = db.connect\ncon.query(&#39;CREATE ...</pre>\n"],["append_int16","DuckDB::Appender","DuckDB/Appender.html#method-i-append_int16","(value)","<p>Appends an int16(SMALLINT) value to the current row in the appender.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["append_int32","DuckDB::Appender","DuckDB/Appender.html#method-i-append_int32","(value)","<p>Appends an int32(INTEGER) value to the current row in the appender.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["append_int64","DuckDB::Appender","DuckDB/Appender.html#method-i-append_int64","(p1)","<p>Appends an int64(BIGINT) value to the current row in the appender.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["append_int8","DuckDB::Appender","DuckDB/Appender.html#method-i-append_int8","(value)","<p>Appends an int8(TINYINT) value to the current row in the appender.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["append_interval","DuckDB::Appender","DuckDB/Appender.html#method-i-append_interval","(value)","<p>appends interval. The argument must be ISO8601 duration format. WARNING: This method is expremental. …\n"],["append_null","DuckDB::Appender","DuckDB/Appender.html#method-i-append_null","()",""],["append_row","DuckDB::Appender","DuckDB/Appender.html#method-i-append_row","(*args)","<p>append a row.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">appender</span>.<span class=\"ruby-identifier\">append_row</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-string\">&#39;Alice&#39;</span>)\n</pre>\n<p>is same as:\n"],["append_time","DuckDB::Appender","DuckDB/Appender.html#method-i-append_time","(value)","<p>appends time value.\n\n<pre>require &#39;duckdb&#39;\ndb = DuckDB::Database.open\ncon = db.connect\ncon.query(&#39;CREATE TABLE ...</pre>\n"],["append_timestamp","DuckDB::Appender","DuckDB/Appender.html#method-i-append_timestamp","(value)","<p>appends timestamp value.\n\n<pre>require &#39;duckdb&#39;\ndb = DuckDB::Database.open\ncon = db.connect\ncon.query(&#39;CREATE ...</pre>\n"],["append_uhugeint","DuckDB::Appender","DuckDB/Appender.html#method-i-append_uhugeint","(value)","<p>appends unsigned huge int value.\n\n<pre>require &#39;duckdb&#39;\ndb = DuckDB::Database.open\ncon = db.connect\ncon.query(&#39;CREATE ...</pre>\n"],["append_uint16","DuckDB::Appender","DuckDB/Appender.html#method-i-append_uint16","(p1)",""],["append_uint32","DuckDB::Appender","DuckDB/Appender.html#method-i-append_uint32","(p1)",""],["append_uint64","DuckDB::Appender","DuckDB/Appender.html#method-i-append_uint64","(p1)",""],["append_uint8","DuckDB::Appender","DuckDB/Appender.html#method-i-append_uint8","(p1)",""],["append_varchar","DuckDB::Appender","DuckDB/Appender.html#method-i-append_varchar","(p1)",""],["append_varchar_length","DuckDB::Appender","DuckDB/Appender.html#method-i-append_varchar_length","(p1, p2)",""],["appender","DuckDB::Connection","DuckDB/Connection.html#method-i-appender","(table)","<p>returns Appender object. The first argument is table name\n"],["application","Rake","Rake.html#method-c-application","()","<p>Current Rake Application\n"],["application=","Rake","Rake.html#method-c-application-3D","(app)","<p>Set the current Rake application object.\n"],["apply_to","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-apply_to","(document, params = [])","<p>Apply an XSLT stylesheet to an XML::Document and serialize it properly. This method is equivalent to …\n"],["arg_names","Rake::Task","Rake/Task.html#method-i-arg_names","()","<p>Name of arguments for this task.\n"],["assert","Minitest::Assertions","Minitest/Assertions.html#method-i-assert","(test, msg = nil)","<p>Fails unless <code>test</code> is truthy.\n"],["assert_empty","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_empty","(obj, msg = nil)","<p>Fails unless <code>obj</code> is empty.\n"],["assert_equal","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_equal","(exp, act, msg = nil)","<p>Fails unless <code>exp == act</code> printing the difference between the two, if possible.\n<p>If there is no visible difference …\n"],["assert_in_delta","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_in_delta","(exp, act, delta = 0.001, msg = nil)","<p>For comparing Floats.  Fails unless <code>exp</code> and <code>act</code> are within <code>delta</code> of each other.\n\n<pre>assert_in_delta Math::PI, ...</pre>\n"],["assert_in_epsilon","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_in_epsilon","(exp, act, epsilon = 0.001, msg = nil)","<p>For comparing Floats.  Fails unless <code>exp</code> and <code>act</code> have a relative error less than <code>epsilon</code>.\n"],["assert_includes","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_includes","(collection, obj, msg = nil)","<p>Fails unless <code>collection</code> includes <code>obj</code>.\n"],["assert_instance_of","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_instance_of","(cls, obj, msg = nil)","<p>Fails unless <code>obj</code> is an instance of <code>cls</code>.\n"],["assert_kind_of","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_kind_of","(cls, obj, msg = nil)","<p>Fails unless <code>obj</code> is a kind of <code>cls</code>.\n"],["assert_match","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_match","(matcher, obj, msg = nil)","<p>Fails unless <code>matcher</code> <code>=~</code> <code>obj</code>.\n"],["assert_mock","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_mock","(mock)","<p>Assert that the mock verifies correctly.\n"],["assert_nil","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_nil","(obj, msg = nil)","<p>Fails unless <code>obj</code> is nil\n"],["assert_operator","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_operator","(o1, op, o2 = UNDEFINED, msg = nil)","<p>For testing with binary operators. Eg:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_operator</span> <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">:&lt;=</span>, <span class=\"ruby-value\">4</span>\n</pre>\n"],["assert_output","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_output","(stdout = nil, stderr = nil)","<p>Fails if stdout or stderr do not output the expected results. Pass in nil if you don’t care about …\n"],["assert_path_exists","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_path_exists","(path, msg = nil)","<p>Fails unless <code>path</code> exists.\n"],["assert_pattern","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_pattern","()","<p>For testing with pattern matching (only supported with Ruby 3.0 and later)\n\n<pre># pass\nassert_pattern { [1,2,3] ...</pre>\n"],["assert_performance","Minitest::Benchmark","Minitest/Benchmark.html#method-i-assert_performance","(validation, &work)","<p>Runs the given <code>work</code>, gathering the times of each run. Range and times are then passed to a given <code>validation</code> …\n"],["assert_performance_constant","Minitest::Benchmark","Minitest/Benchmark.html#method-i-assert_performance_constant","(threshold = 0.99, &work)","<p>Runs the given <code>work</code> and asserts that the times gathered fit to match a constant rate (eg, linear slope …\n"],["assert_performance_exponential","Minitest::Benchmark","Minitest/Benchmark.html#method-i-assert_performance_exponential","(threshold = 0.99, &work)","<p>Runs the given <code>work</code> and asserts that the times gathered fit to match a exponential curve within a given …\n"],["assert_performance_linear","Minitest::Benchmark","Minitest/Benchmark.html#method-i-assert_performance_linear","(threshold = 0.99, &work)","<p>Runs the given <code>work</code> and asserts that the times gathered fit to match a straight line within a given error …\n"],["assert_performance_logarithmic","Minitest::Benchmark","Minitest/Benchmark.html#method-i-assert_performance_logarithmic","(threshold = 0.99, &work)","<p>Runs the given <code>work</code> and asserts that the times gathered fit to match a logarithmic curve within a given …\n"],["assert_performance_power","Minitest::Benchmark","Minitest/Benchmark.html#method-i-assert_performance_power","(threshold = 0.99, &work)","<p>Runs the given <code>work</code> and asserts that the times gathered curve fit to match a power curve within a given …\n"],["assert_predicate","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_predicate","(o1, op, msg = nil)","<p>For testing with predicates. Eg:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_predicate</span> <span class=\"ruby-identifier\">str</span>, <span class=\"ruby-value\">:empty?</span>\n</pre>\n<p>This is really meant for specs and is front-ended …\n"],["assert_raises","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_raises","(*exp)","<p>Fails unless the block raises one of <code>exp</code>. Returns the exception matched so you can check the message, …\n"],["assert_respond_to","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_respond_to","(obj, meth, msg = nil, include_all: false)","<p>Fails unless <code>obj</code> responds to <code>meth</code>. include_all defaults to false to match Object#respond_to?\n"],["assert_same","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_same","(exp, act, msg = nil)","<p>Fails unless <code>exp</code> and <code>act</code> are #equal?\n"],["assert_send","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_send","(send_ary, m = nil)","<p><code>send_ary</code> is a receiver, message and arguments.\n<p>Fails unless the call returns a true value\n"],["assert_silent","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_silent","()","<p>Fails if the block outputs anything to stderr or stdout.\n<p>See also: #assert_output\n"],["assert_throws","Minitest::Assertions","Minitest/Assertions.html#method-i-assert_throws","(sym, msg = nil)","<p>Fails unless the block throws <code>sym</code>\n"],["async_query","DuckDB::Connection","DuckDB/Connection.html#method-i-async_query","(sql, *args, **kwargs)","<p>executes sql with args asynchronously. The first argument sql must be SQL string. The rest arguments …\n"],["async_query_stream","DuckDB::Connection","DuckDB/Connection.html#method-i-async_query_stream","(sql, *args, **kwargs)","<p>executes sql with args asynchronously and provides streaming result. The first argument sql must be  …\n"],["at","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-at","(*args)","<p>Search this object for <code>paths</code>, and return only the first result. <code>paths</code> must be one or more XPath or CSS …\n"],["at","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-at","(*args)","<p>Search this object for <code>paths</code>, and return only the first result. <code>paths</code> must be one or more XPath or CSS …\n"],["at_css","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-at_css","(*args)","<p>Search this object for CSS <code>rules</code>, and return only the first match. <code>rules</code> must be one or more CSS selectors. …\n"],["at_xpath","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-at_xpath","(*args)","<p>Search this node for XPath <code>paths</code>, and return only the first match. <code>paths</code> must be one or more XPath queries. …\n"],["atan","BigMath","BigMath.html#method-i-atan","(x, prec)","<p>Computes the arctangent of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> …\n"],["attr","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attr","(name)",""],["attr","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-attr","(key, value = nil, &block)","<p>Set attributes on each Node in the NodeSet, or get an attribute from the first Node in the NodeSet.\n<p>To …\n"],["attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute","(p1)","<p>Returns &mdash; Attribute (Nokogiri::XML::Attr) belonging to this node with name <code>name</code>.\n\n<p>⚠ Note that attribute namespaces …\n"],["attribute","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-attribute","(key, value = nil, &block)",""],["attribute","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute","(p1)","<p>Get the value of attribute named <code>name</code>\n"],["attribute_at","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_at","(p1)","<p>Get the value of attribute at <code>index</code>\n"],["attribute_count","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_count","()","<p>Get the number of attributes for the current node\n"],["attribute_hash","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_hash","()","<p>Get the attributes of the current node as a Hash of names and values.\n<p>See related: #attributes and #namespaces …\n"],["attribute_nodes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute_nodes","()","<p>Returns &mdash; Attributes (an Array of Nokogiri::XML::Attr) belonging to this node.\n\n<p>Note that this is the preferred …\n"],["attribute_type","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-attribute_type","()","<p>The attribute_type for this AttributeDecl\n"],["attribute_with_ns","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute_with_ns","(p1, p2)","<p>Returns &mdash; Attribute (Nokogiri::XML::Attr) belonging to this node with matching <code>name</code> and <code>namespace</code>.\n\n<p><code>name</code> …\n"],["attributes","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-attributes","()","<p>Get a hash of the attributes for this DTD.\n"],["attributes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attributes","()","<p>Fetch this node’s attributes.\n<p>⚠ Because the keys do not include any namespace information for the …\n"],["attributes","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attributes","()","<p>Get the attributes and namespaces of the current node as a Hash.\n<p>This is the union of Reader#attribute_hash …\n"],["attributes?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attributes-3F","()","<p>Does this node have attributes?\n"],["autorun","Minitest","Minitest.html#method-c-autorun","()","<p>Registers Minitest to run at process exit\n"],["backtrace_filter","Minitest","Minitest.html#method-i-backtrace_filter","","<p>Filter object for backtraces.\n"],["base_uri","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-base_uri","()","<p>Get the xml:base of the node\n"],["before","Minitest::Spec::DSL","Minitest/Spec/DSL.html#method-i-before","(_type = nil, &block)","<p>Define a ‘before’ action. Inherits the way normal methods should.\n<p>NOTE: <code>type</code> is ignored and is …\n"],["before","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-before","(node_or_tags)","<p>Insert <code>node_or_tags</code> before this node (as a sibling).\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["before","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-before","(datum)","<p>Insert <code>datum</code> before the first Node in this NodeSet\n"],["before","Racc::LocationPointer","Racc/LocationPointer.html#method-i-before","(len)",""],["before_setup","Minitest::Test::LifecycleHooks","Minitest/Test/LifecycleHooks.html#method-i-before_setup","()","<p>Runs before every test, before setup. This hook is meant for libraries to extend minitest. It is not …\n"],["before_teardown","Minitest::Test::LifecycleHooks","Minitest/Test/LifecycleHooks.html#method-i-before_teardown","()","<p>Runs after every test, before teardown. This hook is meant for libraries to extend minitest. It is not …\n"],["begin_row","DuckDB::Appender","DuckDB/Appender.html#method-i-begin_row","()",""],["bench","Minitest::BenchSpec","Minitest/BenchSpec.html#method-c-bench","(name, &block)","<p>This is used to define a new benchmark method. You usually don’t use this directly and is intended …\n"],["bench_exp","Minitest::Benchmark","Minitest/Benchmark.html#method-c-bench_exp","(min, max, base = 10)","<p>Returns a set of ranges stepped exponentially from <code>min</code> to <code>max</code> by powers of <code>base</code>. Eg:\n\n<pre>bench_exp(2, 16, ...</pre>\n"],["bench_linear","Minitest::Benchmark","Minitest/Benchmark.html#method-c-bench_linear","(min, max, step = 10)","<p>Returns a set of ranges stepped linearly from <code>min</code> to <code>max</code> by <code>step</code>. Eg:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">bench_linear</span>(<span class=\"ruby-value\">20</span>, <span class=\"ruby-value\">40</span>, <span class=\"ruby-value\">10</span>) <span class=\"ruby-comment\"># =&gt; [20, ...</span>\n</pre>\n"],["bench_performance_constant","Minitest::BenchSpec","Minitest/BenchSpec.html#method-c-bench_performance_constant","(name, threshold = 0.99, &work)","<p>Create a benchmark that verifies that the performance is constant.\n\n<pre>describe &quot;my class Bench&quot; do\n  bench_performance_constant ...</pre>\n"],["bench_performance_exponential","Minitest::BenchSpec","Minitest/BenchSpec.html#method-c-bench_performance_exponential","(name, threshold = 0.99, &work)","<p>Create a benchmark that verifies that the performance is exponential.\n\n<pre>describe &quot;my class Bench&quot; do\n  bench_performance_exponential ...</pre>\n"],["bench_performance_linear","Minitest::BenchSpec","Minitest/BenchSpec.html#method-c-bench_performance_linear","(name, threshold = 0.99, &work)","<p>Create a benchmark that verifies that the performance is linear.\n\n<pre>describe &quot;my class Bench&quot; do\n  bench_performance_linear ...</pre>\n"],["bench_performance_logarithmic","Minitest::BenchSpec","Minitest/BenchSpec.html#method-c-bench_performance_logarithmic","(name, threshold = 0.99, &work)","<p>Create a benchmark that verifies that the performance is logarithmic.\n\n<pre>describe &quot;my class Bench&quot; do\n  bench_performance_logarithmic ...</pre>\n"],["bench_performance_power","Minitest::BenchSpec","Minitest/BenchSpec.html#method-c-bench_performance_power","(name, threshold = 0.99, &work)","<p>Create a benchmark that verifies that the performance is power.\n\n<pre>describe &quot;my class Bench&quot; do\n  bench_performance_power ...</pre>\n"],["bench_range","Minitest::BenchSpec","Minitest/BenchSpec.html#method-c-bench_range","(&block)","<p>Specifies the ranges used for benchmarking for that class.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">bench_range</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">bench_exp</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">16</span>, <span class=\"ruby-value\">2</span>)\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>See …\n"],["bench_range","Minitest::Benchmark","Minitest/Benchmark.html#method-c-bench_range","()","<p>Specifies the ranges used for benchmarking for that class. Defaults to exponential growth from 1 to 10k …\n"],["binary","Rake::ExtensionTask","Rake/ExtensionTask.html#method-i-binary","(platform = nil)",""],["binary_extension","PlatformExtensionHelpers","PlatformExtensionHelpers.html#method-i-binary_extension","(platform = RUBY_PLATFORM)",""],["binary_init_func?","RubyMemcheck::Frame","RubyMemcheck/Frame.html#method-i-binary_init_func-3F","()",""],["bind","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind","(index, value)","<p>binds i-th parameter with SQL prepared statement. The first argument is index of parameter. The index …\n"],["bind_args","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_args","(*args, **kwargs)","<p>binds all parameters with SQL prepared statement.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;duckdb_database&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["bind_blob","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_blob","(p1, p2)",""],["bind_bool","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_bool","(p1, p2)",""],["bind_date","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_date","(index, value)","<p>binds i-th parameter with SQL prepared statement. The first argument is index of parameter. The index …\n"],["bind_decimal","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_decimal","(index, value)","<p>binds i-th parameter with SQL prepared statement. The first argument is index of parameter. The index …\n"],["bind_double","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_double","(p1, p2)",""],["bind_float","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_float","(p1, p2)",""],["bind_hugeint","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_hugeint","(index, value)","<p>binds i-th parameter with SQL prepared statement. The first argument is index of parameter. The index …\n"],["bind_hugeint_internal","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_hugeint_internal","(index, value)","<p>binds i-th parameter with SQL prepared statement. The first argument is index of parameter. The index …\n"],["bind_int16","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_int16","(p1, p2)",""],["bind_int32","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_int32","(p1, p2)",""],["bind_int64","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_int64","(p1, p2)",""],["bind_int8","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_int8","(p1, p2)",""],["bind_interval","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_interval","(index, value)","<p>binds i-th parameter with SQL prepared statement. The first argument is index of parameter. The index …\n"],["bind_null","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_null","(p1)",""],["bind_parameter_index","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_parameter_index","(p1)",""],["bind_time","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_time","(index, value)","<p>binds i-th parameter with SQL prepared statement. The first argument is index of parameter. The index …\n"],["bind_timestamp","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_timestamp","(index, value)","<p>binds i-th parameter with SQL prepared statement. The first argument is index of parameter. The index …\n"],["bind_varchar","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-bind_varchar","(p1, p2)",""],["blank?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-blank-3F","()","<p>Returns &mdash; <code>true</code> if the node is an empty or whitespace-only text or cdata node, else <code>false</code>.\n\n<p><strong>Example:</strong>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span>(<span class=\"ruby-string\">&quot;&lt;root&gt;&lt;child/&gt;&lt;/root&gt;&quot;</span>).<span class=\"ruby-identifier\">root</span>.<span class=\"ruby-identifier\">child</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["block?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-block-3F","()","<p>Is this element a block element?\n"],["body","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-body","()","<p>Return Entry body text with left padding. Body text contains information of iteration per second with …\n"],["bool_attr","Racc::ParserFileGenerator::Params","Racc/ParserFileGenerator/Params.html#method-c-bool_attr","(name)",""],["call","StackProf::Middleware","StackProf/Middleware.html#method-i-call","(env)",""],["call_times","Benchmark::IPS::Job::Entry","Benchmark/IPS/Job/Entry.html#method-i-call_times","(times)","<p>Call action by given times. @param times [Integer] Times to call +@action+. @return [Integer] Number …\n"],["camelize","FileTemplateHelpers","FileTemplateHelpers.html#method-i-camelize","(str)",""],["canonicalize","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-canonicalize","(p1 = v1, p2 = v2, p3 = v3)","<p>Canonicalize a document and return the results.  Takes an optional block that takes two parameters: the …\n"],["canonicalize","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-canonicalize","(mode = XML::XML_C14N_1_0, inclusive_namespaces = nil, with_comments = false)",""],["capture_io","Minitest::Assertions","Minitest/Assertions.html#method-i-capture_io","()","<p>Captures $stdout and $stderr into strings:\n\n<pre>out, err = capture_io do\n  puts &quot;Some info&quot;\n  warn &quot;You did ...</pre>\n"],["capture_subprocess_io","Minitest::Assertions","Minitest/Assertions.html#method-i-capture_subprocess_io","()","<p>Captures $stdout and $stderr into strings, using Tempfile to ensure that subprocess IO is captured as …\n"],["cdata","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-cdata","(string)","<p>Create a CDATA Node with content of <code>string</code>\n"],["cdata?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-cdata-3F","()","<p>Returns true if this is a CDATA\n"],["cdata_block","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-cdata_block","(string)","<p>Called when cdata blocks are found\n<p>Parameters &mdash; \n<p><code>string</code> contains the cdata content\n\n"],["cdata_block","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-cdata_block","(string)","<p>Handle cdata_blocks containing <code>string</code>\n"],["ceil","BigDecimal","BigDecimal.html#method-i-ceil","(p1 = v1)","<p>Return the smallest integer greater than or equal to the value, as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;3.14159&#39;</span>).<span class=\"ruby-identifier\">ceil</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["central_tendency","Benchmark::IPS::Stats::Bootstrap","Benchmark/IPS/Stats/Bootstrap.html#method-i-central_tendency","()","<p>Average stat value @return [Float] central_tendency\n"],["central_tendency","Benchmark::IPS::Stats::SD","Benchmark/IPS/Stats/SD.html#method-i-central_tendency","()","<p>Average stat value @return [Float] central_tendency\n"],["chain","Rake::InvocationExceptionMixin","Rake/InvocationExceptionMixin.html#method-i-chain","()","<p>Return the invocation chain (list of Rake tasks) that were in effect when this exception was detected …\n"],["chain=","Rake::InvocationExceptionMixin","Rake/InvocationExceptionMixin.html#method-i-chain-3D","(value)","<p>Set the invocation chain in effect when this exception was detected.\n"],["characters","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-characters","(string)","<p>Called when character data is parsed, and for parsed entities when ParserContext#replace_entities is …\n"],["chdir_for_build","Object","Object.html#method-i-chdir_for_build","(&block)",""],["check_duckdb_header","Object","Object.html#method-i-check_duckdb_header","(header, version)",""],["check_duckdb_library","Object","Object.html#method-i-check_duckdb_library","(library, func, version)",""],["check_la","Racc::State","Racc/State.html#method-i-check_la","(la_rules)",""],["child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-child","()","<p>Returns &mdash; First of this node’s children, or <code>nil</code> if there are no children\n\n<p>This is a convenience method …\n"],["children","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-children","()","<p>Get the children of this ElementContent node\n"],["children","Nokogiri::XML::EntityReference","Nokogiri/XML/EntityReference.html#method-i-children","()",""],["children","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-children","()","<p>Returns &mdash; Nokogiri::XML::NodeSet containing this node’s children.\n\n"],["children","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-children","()","<p>Returns a new NodeSet containing all the children of all the nodes in the NodeSet\n"],["children=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-children-3D","(node_or_tags)","<p>Set the content for this Node <code>node_or_tags</code>\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment …\n"],["classes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-classes","()","<p>Fetch CSS class names of a Node.\n<p>This is a convenience function and is equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">kwattr_values</span>(<span class=\"ruby-string\">&quot;class&quot;</span>)\n</pre>\n"],["clean_env","Benchmark::Timing","Benchmark/Timing.html#method-c-clean_env","()","<p>Recycle used objects by starting Garbage Collector.\n"],["clear","Racc::ISet","Racc/ISet.html#method-i-clear","()",""],["clear","Rake::Task","Rake/Task.html#method-i-clear","()","<p>Clear the existing prerequisites, actions, comments, and arguments of a rake task.\n"],["clear","Rake::Task","Rake/Task.html#method-c-clear","()","<p>Clear the task list.  This cause rake to immediately forget all the tasks that have been assigned.  ( …\n"],["clear","Rake::TaskManager","Rake/TaskManager.html#method-i-clear","()","<p>Clear all tasks in this application.\n"],["clear_actions","Rake::Task","Rake/Task.html#method-i-clear_actions","()","<p>Clear the existing actions on a rake task.\n"],["clear_aliases!","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-clear_aliases-21","()","<p>Remove all encoding aliases.\n"],["clear_args","Rake::Task","Rake/Task.html#method-i-clear_args","()","<p>Clear the existing arguments on a rake task.\n"],["clear_bindings","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-clear_bindings","()","<p>clear all bindings of prepared statement.\n"],["clear_comments","Rake::Task","Rake/Task.html#method-i-clear_comments","()","<p>Clear the existing comments on a rake task.\n"],["clear_exclude","Rake::FileList","Rake/FileList.html#method-i-clear_exclude","()","<p>Clear all the exclude patterns so that we exclude nothing.\n"],["clear_held_results","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-clear_held_results","()",""],["clear_prerequisites","Rake::Task","Rake/Task.html#method-i-clear_prerequisites","()","<p>Clear the existing prerequisites of a rake task.\n"],["clone","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-clone","(level = 1)","<p>Clone this node.\n<p>Parameters &mdash; \n<p><code>level</code> (optional Integer). 0 is a shallow copy, 1 (the default) is a deep copy. …\n\n"],["clone","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-clone","(level = 1, new_parent_doc = document)","<p>Clone this node.\n<p>Parameters &mdash; \n<p><code>level</code> (optional Integer). 0 is a shallow copy, 1 (the default) is a deep copy. …\n"],["close","DuckDB::Appender","DuckDB/Appender.html#method-i-close","()","<p>Closes the appender by flushing all intermediate states and closing it for further appends. If flushing …\n"],["close","DuckDB::Database","DuckDB/Database.html#method-i-close","()","<p>closes DuckDB database.\n"],["coerce","BigDecimal","BigDecimal.html#method-i-coerce","(p1)","<p>The coerce method provides support for Ruby type coercion. It is not enabled by default.\n<p>This means that …\n"],["coerce","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-coerce","(data)",""],["collect_namespaces","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-collect_namespaces","()","<p>Recursively get all namespaces from this node and its subtree and return them as a hash.\n<p>⚠ This method …\n"],["column","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-column","()","<p>Returns &mdash; (Integer) the column number of the column being currently parsed.\n\n"],["column_count","DuckDB::Result","DuckDB/Result.html#method-i-column_count","()","<p>Returns the column size of the result.\n\n<pre>DuckDB::Database.open do |db|\n  db.connect do |con|\n    r = con.query(&#39;CREATE ...</pre>\n"],["column_size","DuckDB::Result","DuckDB/Result.html#method-i-column_size","()",""],["columns","DuckDB::Result","DuckDB/Result.html#method-i-columns","()","<p>Returns the column class Lists.\n"],["command","RubyMemcheck::Configuration","RubyMemcheck/Configuration.html#method-i-command","(*args)",""],["comment","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-comment","(string)","<p>Create a Comment Node with content of <code>string</code>\n"],["comment","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-comment","(string)","<p>Called when comments are encountered\n<p>Parameters &mdash; \n<p><code>string</code> contains the comment data\n\n"],["comment","Rake::Task","Rake/Task.html#method-i-comment","()","<p>First line (or sentence) of all comments. Multiple comments are separated by a “/”.\n"],["comment?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-comment-3F","()","<p>Returns true if this is a Comment\n"],["compare","Benchmark::Compare","Benchmark/Compare.html#method-i-compare","(*entries, order: :fastest)","<p>Compare between reports, prints out facts of each report: runtime, comparative speed difference. @param …\n"],["compare!","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-compare-21","(order: :fastest)","<p>Run comparison utility.\n"],["compare?","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-compare-3F","()","<p>Return true if job needs to be compared. @return [Boolean] Need to compare?\n"],["compile_block","Benchmark::IPS::Job::Entry","Benchmark/IPS/Job/Entry.html#method-i-compile_block","()",""],["compile_block_with_manual_loop","Benchmark::IPS::Job::Entry","Benchmark/IPS/Job/Entry.html#method-i-compile_block_with_manual_loop","()",""],["compile_string","Benchmark::IPS::Job::Entry","Benchmark/IPS/Job/Entry.html#method-i-compile_string","(str)","<p>Compile code into <code>call_times</code> method. @param str [String] Code to be compiled. @return [Symbol] :call_times. …\n"],["compress","Minitest::Compress","Minitest/Compress.html#method-i-compress","(orig)","<p>Takes a backtrace (array of strings) and compresses repeating cycles in it to make it more readable. …\n"],["concat_flags","Object","Object.html#method-i-concat_flags","(*args)",""],["config","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-config","(opts)","<p>Job configuration options, set +@warmup+ and +@time+. @option opts [Integer] :warmup Warmup time. @option …\n"],["config","Nokogiri::CSS::XPathVisitor","Nokogiri/CSS/XPathVisitor.html#method-i-config","()","<p>Returns &mdash; a Hash representing the configuration of the XPathVisitor, suitable for use as part of the CSS …\n\n"],["config","RubyMemcheck","RubyMemcheck.html#method-c-config","(**opts)",""],["config_clean?","Object","Object.html#method-i-config_clean-3F","()","<p>utility functions\n"],["config_cross_build?","Object","Object.html#method-i-config_cross_build-3F","()",""],["config_static?","Object","Object.html#method-i-config_static-3F","()",""],["config_system_libraries?","Object","Object.html#method-i-config_system_libraries-3F","()",""],["config_with_xml2_legacy?","Object","Object.html#method-i-config_with_xml2_legacy-3F","()",""],["conflict?","Racc::State","Racc/State.html#method-i-conflict-3F","()",""],["conj","Rake::LinkedList","Rake/LinkedList.html#method-i-conj","(item)","<p>Polymorphically add a new element to the head of a list. The type of head node will be the same list …\n"],["connect","DuckDB::Connection","DuckDB/Connection.html#method-i-connect","(db)","<p>connects DuckDB database The first argument is DuckDB::Database object\n"],["connect","DuckDB::Database","DuckDB/Database.html#method-i-connect","()","<p>connects database.\n<p>The method yields block and disconnects the database if block given\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["cons","Rake::LinkedList","Rake/LinkedList.html#method-c-cons","(head, tail)","<p>Cons a new head onto the tail list.\n"],["cons","Rake::LinkedList::EmptyLinkedList","Rake/LinkedList/EmptyLinkedList.html#method-c-cons","(head, tail)",""],["console","Nokogiri::CLI","Nokogiri/CLI.html#method-c-console","()",""],["content","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-content","()","<p>Returns &mdash; The root of this element declaration’s content tree.\n\n"],["content","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-content","()","<p>Get the content\n"],["content","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-content","()","<p>Returns &mdash; Contents of all the text nodes in this node’s subtree, concatenated together into a single …\n\n"],["content=","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-content-3D","(p1)",""],["content=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-content-3D","(string)","<p>Set the content of this node to <code>input</code>.\n<p>Parameters &mdash; \n<p><code>input</code> (String) The new content for this node. Input …\n\n"],["content=","Nokogiri::XML::Text","Nokogiri/XML/Text.html#method-i-content-3D","(string)",""],["convert_to_d3_flame_graph_format","StackProf::Report","StackProf/Report.html#method-i-convert_to_d3_flame_graph_format","(name, stacks, depth)",""],["copy_packaged_libraries_headers","Object","Object.html#method-i-copy_packaged_libraries_headers","(to_path:, from_recipes:)",""],["cos","BigMath","BigMath.html#method-i-cos","(x, prec)","<p>Computes the cosine of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> is …\n"],["create","Minitest::TestTask","Minitest/TestTask.html#method-c-create","(name = :test, &block)","<p>Create several test-oriented tasks under <code>name</code>. Takes an optional block to customize variables.\n"],["create_cdata","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_cdata","(string, &block)","<p>Create a CDATA Node containing <code>string</code>\n"],["create_comment","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_comment","(string, &block)","<p>Create a Comment Node containing <code>string</code>\n"],["create_element","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_element","(name, *contents_or_attrs, &block)","<p>Create a new Element with ‘name` belonging to this document, optionally setting contents or attributes. …\n"],["create_entity","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_entity","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = v5)","<p>Create a new entity named <code>name</code>.\n<p><code>type</code> is an integer representing the type of entity to be created, and …\n"],["create_external_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-create_external_subset","(p1, p2, p3)","<p>Create an external subset\n"],["create_internal_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-create_internal_subset","(p1, p2, p3)","<p>Create the internal subset of a document.\n\n<pre>doc.create_internal_subset(&quot;chapter&quot;, &quot;-//OASIS//DTD DocBook ...</pre>\n"],["create_report","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-create_report","(label, measured_us, iter, samples, cycles)","<p>Create report by add entry to +@full_report+. @param label [String] Report item label. @param measured_us …\n"],["create_rule","Rake::Task","Rake/Task.html#method-c-create_rule","(*args, &block)","<p>Define a rule for synthesizing tasks.\n"],["create_stats","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-create_stats","(samples)",""],["create_text_node","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_text_node","(string, &block)","<p>Create a Text Node with <code>string</code>\n"],["cross_compiling","Rake::ExtensionTask","Rake/ExtensionTask.html#method-i-cross_compiling","(&block)",""],["cross_config_options","Rake::ExtensionTask","Rake/ExtensionTask.html#method-i-cross_config_options","(for_platform=nil)",""],["cross_platform","Rake::ExtensionTask","Rake/ExtensionTask.html#method-i-cross_platform","()",""],["css","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-css","(*args)","<p>Search this fragment for CSS <code>rules</code>. <code>rules</code> must be one or more CSS selectors. For example:\n<p>For more information …\n"],["css","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-css","(*args)","<p>Search this node set for CSS <code>rules</code>. <code>rules</code> must be one or more CSS selectors. For example:\n<p>For more information …\n"],["css","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-css","(*args)","<p>Search this object for CSS <code>rules</code>. <code>rules</code> must be one or more CSS selectors. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">css</span>(<span class=\"ruby-string\">&#39;title&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["css_path","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-css_path","()","<p>Get the path to this node as a CSS expression\n"],["current_scope","Rake::TaskManager","Rake/TaskManager.html#method-i-current_scope","()","<p>Return the list of scope names currently active in the task manager.\n"],["cycles_per_100ms","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-cycles_per_100ms","(time_msec, iters)","<p>Calculate the cycles needed to run for approx 100ms, given the number of iterations to run the given …\n"],["darwin?","Object","Object.html#method-i-darwin-3F","()",""],["data","Benchmark::IPS::Report","Benchmark/IPS/Report.html#method-i-data","()","<p>Entries data in array for generate json. Each entry is a hash, consists of:\n\n<pre>name:   Entry#label\nips:  ...</pre>\n"],["declare_precedence","Racc::Grammar","Racc/Grammar.html#method-i-declare_precedence","(assoc, syms)",""],["deconstruct","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-deconstruct","()","<p>Returns the root nodes of this document fragment as an array, to use in pattern matching.\n<p>💡 Note that …\n"],["deconstruct","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-deconstruct","()","<p>Returns the members of this NodeSet as an array, to use in pattern matching.\n<p>Since v1.14.0\n"],["deconstruct_keys","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-deconstruct_keys","(keys)","<p>Returns a hash describing the Attr, to use in pattern matching.\n<p>Valid keys and their values:\n<p><code>name</code> → (String …\n"],["deconstruct_keys","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-deconstruct_keys","(keys)","<p>Returns a hash describing the Document, to use in pattern matching.\n<p>Valid keys and their values:\n<p><code>root</code> → …\n"],["deconstruct_keys","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-deconstruct_keys","(keys)","<p>Returns a hash describing the Namespace, to use in pattern matching.\n<p>Valid keys and their values:\n<p><code>prefix</code> …\n"],["deconstruct_keys","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-deconstruct_keys","(keys)","<p>Returns a hash describing the Node, to use in pattern matching.\n<p>Valid keys and their values:\n<p><code>name</code> → (String …\n"],["decorate","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-decorate","(node)","<p>Apply any decorators to <code>node</code>\n"],["decorate!","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-decorate-21","()","<p>Decorate this node with the decorators set up in this node’s Document\n"],["decorators","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-decorators","(key)","<p>Get the list of decorators given <code>key</code>\n"],["decref","Racc::Reduce","Racc/Reduce.html#method-i-decref","()",""],["default","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-default","()","<p>The default value\n"],["default?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-default-3F","()","<p>Was an attribute generated from the default value in the DTD or schema?\n"],["default_configuration","RubyMemcheck","RubyMemcheck.html#method-c-default_configuration","()",""],["default_namespace=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-default_namespace-3D","(url)","<p>Adds a default namespace supplied as a string <code>url</code> href, to self. The consequence is as an xmlns attribute …\n"],["default_sub_element","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-default_sub_element","()","<p>The default sub element for this element\n"],["define","Racc::Grammar","Racc/Grammar.html#method-c-define","(&block)","<p>Dynamic Generation Interface\n"],["define","Rake::BaseExtensionTask","Rake/BaseExtensionTask.html#method-i-define","()",""],["define","Rake::ExtensionTask","Rake/ExtensionTask.html#method-i-define","()",""],["define","Rake::JavaExtensionTask","Rake/JavaExtensionTask.html#method-i-define","()",""],["define","Rake::PackageTask","Rake/PackageTask.html#method-i-define","()","<p>Create the tasks defined by this task library.\n"],["define","Rake::TestTask","Rake/TestTask.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define_task","Rake::Task","Rake/Task.html#method-c-define_task","(*args, &block)","<p>Define a task given <code>args</code> and an option block.  If a rule with the given name already exists, the prerequisites …\n"],["delete","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-delete","(p1)","<p>Delete the encoding alias named <code>name</code>\n"],["delete","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-delete","(name)",""],["delete","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-delete","(p1)","<p>Delete <code>node</code> from the Nodeset, if it is a member. Returns the deleted node if found, otherwise returns …\n"],["delete","Racc::ISet","Racc/ISet.html#method-i-delete","(key)",""],["delete","Racc::SymbolTable","Racc/SymbolTable.html#method-i-delete","(sym)",""],["dependencies","Benchmark::IPS::Stats::Bootstrap","Benchmark/IPS/Stats/Bootstrap.html#method-i-dependencies","()",""],["deprecated?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-deprecated-3F","()","<p>Is this element deprecated?\n"],["deprecated_attributes","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-deprecated_attributes","()","<p>A list of deprecated attributes for this element\n"],["depth","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-depth","()","<p>Get the depth of the node\n"],["desc","Rake::DSL","Rake/DSL.html#method-i-desc","(description)","<p>Describes the next rake task.  Duplicate descriptions are discarded. Descriptions are shown with <code>rake</code> …\n"],["describe","Kernel","Kernel.html#method-i-describe","(desc, *additional_desc, &block)","<p>Describe a series of expectations for a given target <code>desc</code>.\n<p>Defines a test class subclassing from either …\n"],["description","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-description","()","<p>The description for this element\n"],["description","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-description","()","<p>Fetch the Nokogiri::HTML4::ElementDescription for this node.  Returns nil on XML documents and on unknown …\n"],["destroy","DuckDB::ExtractedStatementsImpl","DuckDB/ExtractedStatementsImpl.html#method-i-destroy","()",""],["dfa","Racc::Grammar","Racc/Grammar.html#method-i-dfa","()",""],["dfa","Racc::States","Racc/States.html#method-i-dfa","()","<p>DFA (Deterministic Finite Automaton) Generation\n"],["dfdxi","Jacobian","Jacobian.html#method-i-dfdxi","(f,fx,x,i)","<p>Computes the derivative of <code>f[i]</code> at <code>x[i]</code>. <code>fx</code> is the value of <code>f</code> at <code>x</code>.\n"],["diff","Minitest::Assertions","Minitest/Assertions.html#method-c-diff","()","<p>Returns the diff command to use in #diff. Tries to intelligently figure out what diff to use.\n"],["diff","Minitest::Assertions","Minitest/Assertions.html#method-i-diff","(exp, act)","<p>Returns a diff between <code>exp</code> and <code>act</code>. If there is no known diff command or if it doesn’t make sense …\n"],["diff=","Minitest::Assertions","Minitest/Assertions.html#method-c-diff-3D","(o)","<p>Set the diff command to use in #diff.\n"],["directory","Rake::DSL","Rake/DSL.html#method-i-directory","(*args, &block)","<p>Declare a set of files tasks to create the given directories on demand.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">directory</span> <span class=\"ruby-string\">&quot;testdata/doc&quot;</span>\n</pre>\n"],["disconnect","DuckDB::Connection","DuckDB/Connection.html#method-i-disconnect","()",""],["display","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-display","()","<p>Print entry to current standard output ($stdout).\n"],["div","BigDecimal","BigDecimal.html#method-i-div","(p1, p2 = v2)","<p>Divide by the specified value.\n<p>digits &mdash; If specified and less than the number of significant digits of the …\n"],["divmod","BigDecimal","BigDecimal.html#method-i-divmod","(p1)","<p>Divides by the specified value, and returns the quotient and modulus as BigDecimal numbers. The quotient …\n"],["do_clean","Object","Object.html#method-i-do_clean","()",""],["do_help","Object","Object.html#method-i-do_help","()",""],["do_parse","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-do_parse","(string_or_readable)","<p>Start parsing <code>string_or_readable</code>\n"],["do_xinclude","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-do_xinclude","(options = XML::ParseOptions::DEFAULT_XML)","<p>Do xinclude substitution on the subtree below node. If given a block, a Nokogiri::XML::ParseOptions object …\n"],["document","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-document","()","<p>A reference to <code>self</code>\n"],["document","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-document","()","<p>Returns &mdash; Parent Nokogiri::XML::Document for this node\n\n"],["document?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-document-3F","()","<p>Returns true if this is a Document\n"],["double_fig","BigDecimal","BigDecimal.html#method-c-double_fig","()","<p>Returns the number of digits a Float object is allowed to have; the result is system-dependent:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>.<span class=\"ruby-identifier\">double_fig</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["duckdb_library_name","Object","Object.html#method-i-duckdb_library_name","(library)",""],["dummy?","Racc::Sym","Racc/Sym.html#method-i-dummy-3F","()",""],["dup","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-dup","(level = 1)","<p>Duplicate this node.\n<p>Parameters &mdash; \n<p><code>level</code> (optional Integer). 0 is a shallow copy, 1 (the default) is a deep …\n\n"],["dup","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-dup","()",""],["dup","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-dup","(level = 1, new_parent_doc = document)","<p>Duplicate this node.\n<p>Parameters &mdash; \n<p><code>level</code> (optional Integer). 0 is a shallow copy, 1 (the default) is a deep …\n"],["dup","Racc::ISet","Racc/ISet.html#method-i-dup","()",""],["each","DuckDB::ExtractedStatements","DuckDB/ExtractedStatements.html#method-i-each","()",""],["each","DuckDB::Result","DuckDB/Result.html#method-i-each","(&)",""],["each","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-each","()",""],["each","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-each","()","<p>Iterate over each attribute name and value pair for this Node.\n"],["each","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-each","()","<p>Iterate over each node, yielding  to <code>block</code>\n"],["each","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-each","()","<p>Move the cursor through the document yielding the cursor to the block\n"],["each","Racc::Grammar","Racc/Grammar.html#method-i-each","(&block)",""],["each","Racc::ISet","Racc/ISet.html#method-i-each","(&block)",""],["each","Racc::Rule","Racc/Rule.html#method-i-each","(&block)",""],["each","Racc::States","Racc/States.html#method-i-each","(&block)",""],["each","Racc::SymbolTable","Racc/SymbolTable.html#method-i-each","(&block)",""],["each","Rake::LinkedList","Rake/LinkedList.html#method-i-each","()","<p>For each item in the list.\n"],["each","Rake::TaskArguments","Rake/TaskArguments.html#method-i-each","(&block)","<p>Enumerates the arguments and their values\n"],["each_index","Racc::Grammar","Racc/Grammar.html#method-i-each_index","(&block)",""],["each_index","Racc::States","Racc/States.html#method-i-each_index","(&block)",""],["each_la","Racc::Item","Racc/Item.html#method-i-each_la","(tbl)",""],["each_nonterminal","Racc::SymbolTable","Racc/SymbolTable.html#method-i-each_nonterminal","(&block)",""],["each_reduce","Racc::ActionTable","Racc/ActionTable.html#method-i-each_reduce","(&block)",""],["each_rule","Racc::Grammar","Racc/Grammar.html#method-i-each_rule","(&block)",""],["each_rule","Racc::Rule","Racc/Rule.html#method-i-each_rule","(&block)",""],["each_shift","Racc::ActionTable","Racc/ActionTable.html#method-i-each_shift","(&block)",""],["each_state","Racc::States","Racc/States.html#method-i-each_state","(&block)",""],["each_terminal","Racc::SymbolTable","Racc/SymbolTable.html#method-i-each_terminal","(&block)",""],["each_useless_nonterminal","Racc::Grammar","Racc/Grammar.html#method-i-each_useless_nonterminal","()",""],["each_useless_rule","Racc::Grammar","Racc/Grammar.html#method-i-each_useless_rule","()",""],["each_with_index","Racc::Grammar","Racc/Grammar.html#method-i-each_with_index","(&block)",""],["egrep","Rake::FileList","Rake/FileList.html#method-i-egrep","(pattern, *options)","<p>Grep each of the files in the filelist using the given pattern. If a block is given, call the block on …\n"],["elem?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-elem-3F","()",""],["element?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-element-3F","()","<p>Returns true if this is an Element node\n"],["element_children","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-element_children","()","<p>Returns &mdash; The node’s child elements as a NodeSet. Only children that are elements will be returned, …\n\n"],["element_type","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-element_type","()","<p>The element_type\n"],["elements","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-elements","()","<p>Get a hash of the elements for this DTD.\n"],["elements","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-elements","()",""],["empty","Racc::UserAction","Racc/UserAction.html#method-c-empty","()",""],["empty","Rake::LinkedList","Rake/LinkedList.html#method-c-empty","()","<p>The standard empty list class for the given LinkedList class.\n"],["empty?","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-empty-3F","()",""],["empty?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-empty-3F","()","<p>Is this an empty element?\n"],["empty?","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-empty-3F","()","<p>Is this NodeSet empty?\n"],["empty?","Racc::ISet","Racc/ISet.html#method-i-empty-3F","()",""],["empty?","Racc::Rule","Racc/Rule.html#method-i-empty-3F","()",""],["empty?","Racc::UserAction","Racc/UserAction.html#method-i-empty-3F","()",""],["empty?","Rake::LinkedList","Rake/LinkedList.html#method-i-empty-3F","()","<p>Is the list empty? .make guards against a list being empty making any instantiated LinkedList object …\n"],["empty?","Rake::LinkedList::EmptyLinkedList","Rake/LinkedList/EmptyLinkedList.html#method-i-empty-3F","()",""],["empty_element?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-empty_element-3F","()","<p>Returns true if the current node is empty, otherwise false.\n"],["enabled?","StackProf::Middleware","StackProf/Middleware.html#method-c-enabled-3F","(env)",""],["encode_special_chars","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-encode_special_chars","(p1)","<p>Encode any special characters in <code>string</code>\n"],["encoding","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-encoding","()","<p>Get the encoding for this Document\n"],["encoding","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-encoding","()",""],["encoding=","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-encoding-3D","(p1)","<p>Set the encoding string for this Document\n"],["end_document","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_document","()","<p>Called when document ends parsing.\n"],["end_element","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_element","(name)","<p>Called at the end of an element.\n<p>Parameters &mdash; \n<p><code>name</code> (String) the name of the element being closed\n\n"],["end_element","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-end_element","(name)","<p>Handle the end_element event with <code>name</code>\n"],["end_element_namespace","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_element_namespace","(name, prefix = nil, uri = nil)","<p>Called at the end of an element.\n<p>Parameters &mdash; \n<p><code>name</code> (String) is the name of the element\n<p><code>prefix</code> (String, nil) …\n"],["end_element_namespace","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-end_element_namespace","(name, prefix = nil, uri = nil)","<p>Called at the end of an element <code>name</code> is the element’s name <code>prefix</code> is the namespace prefix associated …\n"],["end_precedence_declaration","Racc::Grammar","Racc/Grammar.html#method-i-end_precedence_declaration","(reverse)",""],["end_row","DuckDB::Appender","DuckDB/Appender.html#method-i-end_row","()","<p>Finish the current row of appends. After end_row is called, the next row can be appended.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["enhance","Rake::Task","Rake/Task.html#method-i-enhance","(deps=nil, &block)","<p>Enhance a task with prerequisites or actions.  Returns self.\n"],["enhance_with_matching_rule","Rake::TaskManager","Rake/TaskManager.html#method-i-enhance_with_matching_rule","(task_name, level=0)","<p>If a rule can be found that matches the task name, enhance the task with the prerequisites and actions …\n"],["ensure_func","Object","Object.html#method-i-ensure_func","(func, headers = nil)",""],["ensure_package_configuration","Object","Object.html#method-i-ensure_package_configuration","(opt: nil, pc: nil, lib:, func:, headers:)",""],["entities","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-entities","()","<p>Get a hash of the elements for this DTD.\n"],["entity_type","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-entity_type","()","<p>Get the entity type\n"],["enum_dictionary_values","DuckDB::Result","DuckDB/Result.html#method-i-enum_dictionary_values","(col_index)","<p>returns all available ENUM type values of the specified column index.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;duckdb_database&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["enumeration","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-enumeration","()","<p>An enumeration of possible values\n"],["eql?","BigDecimal","BigDecimal.html#method-i-eql-3F","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["eql?","DuckDB::Interval","DuckDB/Interval.html#method-i-eql-3F","(other)",""],["eql?","Racc::LocationPointer","Racc/LocationPointer.html#method-i-eql-3F","(ot)",""],["eql?","Racc::State","Racc/State.html#method-i-eql-3F","(oth)",""],["error","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-error","(string)","<p>Called on document errors\n<p>Parameters &mdash; \n<p><code>string</code> contains the error\n\n"],["error","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-error","(msg)","<p>Handle errors with message <code>msg</code>\n"],["error?","Minitest::Reportable","Minitest/Reportable.html#method-i-error-3F","()","<p>Did this run error?\n"],["error?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-error-3F","()","<p>return true if this is an error\n"],["error_message","DuckDB::Appender","DuckDB/Appender.html#method-i-error_message","()","<p>Returns the error message of the appender. If there is no error, then it returns nil.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["error_percentage","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-error_percentage","()","<p>Return entry’s standard deviation of iteration per second in percentage. @return [Float] +@ips_sd+ …\n"],["error_percentage","Benchmark::IPS::Stats::StatsMetric","Benchmark/IPS/Stats/StatsMetric.html#method-i-error_percentage","()","<p>Return entry’s standard deviation of iteration per second in percentage. @return [Float] +@ips_sd+ …\n"],["errors","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-errors","()","<p>A list of Nokogiri::XML::SyntaxError found when parsing a document\n"],["evaluate","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-evaluate","(p1, p2 = v2)","<p>Evaluate the <code>search_path</code> query.\n<p>Returns &mdash; an object of the appropriate type for the query, which could be …\n\n"],["exception_details","Minitest::Assertions","Minitest/Assertions.html#method-i-exception_details","(e, msg)","<p>Returns details for exception <code>e</code>\n"],["exclude","Rake::FileList","Rake/FileList.html#method-i-exclude","(*patterns, &block)","<p>Register a list of file name patterns that should be excluded from the list.  Patterns may be regular …\n"],["excluded_from_list?","Rake::FileList","Rake/FileList.html#method-i-excluded_from_list-3F","(fn)","<p>Should the given file name be excluded from the list?\n<p>NOTE: This method was formerly named “exclude?”, …\n"],["execute","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-execute","()",""],["execute","Rake::Application","Rake/Application.html#method-i-execute","(*)",""],["execute","Rake::Task","Rake/Task.html#method-i-execute","(args=nil)","<p>Execute the actions associated with this task.\n"],["execute_check_state","DuckDB::PendingResult","DuckDB/PendingResult.html#method-i-execute_check_state","()","<p>returns the state of the pending result. the result can be :ready, :not_ready, :error, :no_tasks.\n<p>:ready …\n"],["execute_pending","DuckDB::PendingResult","DuckDB/PendingResult.html#method-i-execute_pending","()","<p>Get DuckDB::Result object after query execution finished.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span>\n<span class=\"ruby-identifier\">conn</span> = <span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">connect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["execute_task","DuckDB::PendingResult","DuckDB/PendingResult.html#method-i-execute_task","()","<p>Executes the task in the pending result.\n\n<pre>db = DuckDB::Database.open\nconn = db.connect\npending_result = ...</pre>\n"],["execution_finished?","DuckDB::PendingResult","DuckDB/PendingResult.html#method-i-execution_finished-3F","()",""],["existing","Rake::FileList","Rake/FileList.html#method-i-existing","()","<p>Return a new file list that only contains file names from the current file list that exist on the file …\n"],["existing!","Rake::FileList","Rake/FileList.html#method-i-existing-21","()","<p>Modify the current file list so that it contains only file name that exist on the file system.\n"],["exp","BigMath","BigMath.html#method-c-exp","(p1, p2)","<p>Computes the value of e (the base of natural logarithms) raised to the power of <code>decimal</code>, to the specified …\n"],["expect","Minitest::Mock","Minitest/Mock.html#method-i-expect","(name, retval, args = [], **kwargs, &blk)","<p>Expect that method <code>name</code> is called, optionally with <code>args</code> (and <code>kwargs</code> or a <code>blk</code>), and returns <code>retval</code>.\n\n<pre>@mock.expect(:meaning_of_life, ...</pre>\n"],["expect","Minitest::Spec::DSL::InstanceMethods","Minitest/Spec/DSL/InstanceMethods.html#method-i-expect","(value = nil, &block)",""],["exponent","BigDecimal","BigDecimal.html#method-i-exponent","()","<p>Returns the exponent of the BigDecimal number, as an Integer.\n<p>If the number can be represented as 0.xxxxxx …\n"],["ext","Rake::FileList","Rake/FileList.html#method-i-ext","(newext=\"\")","<p>Return a new FileList with <code>String#ext</code> method applied to each member of the array.\n<p>This method is a shortcut …\n"],["ext","String","String.html#method-i-ext","(newext=\"\")","<p>Replace the file extension with <code>newext</code>.  If there is no extension on the string, append the new extension …\n"],["extensions","Minitest","Minitest.html#method-i-extensions","","<p>Names of known extension plugins.\n"],["external_id","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-external_id","()","<p>Get the External ID for this DTD\n"],["external_id","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-external_id","()","<p>Get the external identifier for PUBLIC\n"],["external_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-external_subset","()","<p>Get the external subset\n"],["extras","Rake::TaskArguments","Rake/TaskArguments.html#method-i-extras","()","<p>Retrieve the list of values not associated with named arguments\n"],["fail_after","Minitest::Assertions","Minitest/Assertions.html#method-i-fail_after","(y, m, d, msg)","<p>Fails after a given date (in the local time zone). This allows you to put time-bombs in your tests if …\n"],["fatal?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-fatal-3F","()","<p>return true if this error is fatal\n"],["fetch","Rake::TaskArguments","Rake/TaskArguments.html#method-i-fetch","(*args, &block)",""],["file","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-file","(input, encoding = nil)","<p>Create a parser context for the file at <code>path</code>.\n<p>Parameters &mdash; \n<p><code>path</code> (String) The path to the input file\n<p><code>encoding</code> …\n"],["file","Rake::DSL","Rake/DSL.html#method-i-file","(*args, &block)","<p>Declare a file task.\n<p>Example:\n\n<pre> file &quot;config.cfg&quot; =&gt; [&quot;config.template&quot;] do\n   open(&quot;config.cfg&quot;, &quot;w&quot;) do ...</pre>\n"],["files","StackProf::Report","StackProf/Report.html#method-i-files","()",""],["filter","Minitest::BacktraceFilter","Minitest/BacktraceFilter.html#method-i-filter","(bt)","<p>Filter <code>bt</code> to something useful. Returns the whole thing if $DEBUG (ruby) or $MT_DEBUG (env).\n"],["filter","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-filter","(expr)","<p>Filter this list for nodes that match <code>expr</code>\n"],["find","Rake::CompilerConfig","Rake/CompilerConfig.html#method-i-find","(ruby_version, gem_platform)",""],["finish","Nokogiri::HTML4::SAX::PushParser","Nokogiri/HTML4/SAX/PushParser.html#method-i-finish","()","<p>Finish the parsing.  This method is only necessary for Nokogiri::HTML4::SAX::Document#end_document to …\n"],["finish","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-finish","()","<p>Finish the parsing.  This method is only necessary for Nokogiri::XML::SAX::Document#end_document to be …\n"],["finite?","BigDecimal","BigDecimal.html#method-i-finite-3F","()","<p>Returns True if the value is finite (not NaN or infinite).\n"],["first","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-first","(n = nil)","<p>Get the first element of the NodeSet.\n"],["first_element_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-first_element_child","()","<p>Returns &mdash; The first child Node that is an element.\n\n<p><strong>Example:</strong>\n<p>Note that the “hello” child, which …\n"],["fit_error","Minitest::Benchmark","Minitest/Benchmark.html#method-i-fit_error","(xys)","<p>Takes an array of x/y pairs and calculates the general R^2 value.\n<p>See: en.wikipedia.org/wiki/Coefficient_of_determination …\n"],["fit_exponential","Minitest::Benchmark","Minitest/Benchmark.html#method-i-fit_exponential","(xs, ys)","<p>To fit a functional form: y = ae^(bx).\n<p>Takes x and y values and returns [a, b, r^2].\n<p>See: mathworld.wolfram.com/LeastSquaresFittingExponential.html …\n"],["fit_linear","Minitest::Benchmark","Minitest/Benchmark.html#method-i-fit_linear","(xs, ys)","<p>Fits the functional form: a + bx.\n<p>Takes x and y values and returns [a, b, r^2].\n<p>See: mathworld.wolfram.com/LeastSquaresFitting.html …\n"],["fit_logarithmic","Minitest::Benchmark","Minitest/Benchmark.html#method-i-fit_logarithmic","(xs, ys)","<p>To fit a functional form: y = a + b*ln(x).\n<p>Takes x and y values and returns [a, b, r^2].\n<p>See: mathworld.wolfram.com/LeastSquaresFittingLogarithmic.html …\n"],["fit_power","Minitest::Benchmark","Minitest/Benchmark.html#method-i-fit_power","(xs, ys)","<p>To fit a functional form: y = ax^b.\n<p>Takes x and y values and returns [a, b, r^2].\n<p>See: mathworld.wolfram.com/LeastSquaresFittingPowerLaw.html …\n"],["fix","BigDecimal","BigDecimal.html#method-i-fix","()","<p>Return the integer part of the number, as a BigDecimal.\n"],["fix","Racc::SymbolTable","Racc/SymbolTable.html#method-i-fix","()",""],["flamegraph_row","StackProf::Report","StackProf/Report.html#method-i-flamegraph_row","(f, x, y, weight, addr)",""],["flamegraph_stacks","StackProf::Report","StackProf/Report.html#method-i-flamegraph_stacks","(raw)",""],["floor","BigDecimal","BigDecimal.html#method-i-floor","(p1 = v1)","<p>Return the largest integer less than or equal to the value, as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;3.14159&#39;</span>).<span class=\"ruby-identifier\">floor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["flunk","Minitest::Assertions","Minitest/Assertions.html#method-i-flunk","(msg = nil)","<p>Fails with <code>msg</code>.\n"],["flush","DuckDB::Appender","DuckDB/Appender.html#method-i-flush","()","<p>Flushes the appender to the table, forcing the cache of the appender to be cleared. If flushing the data …\n"],["flush_delayed","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-flush_delayed","()",""],["footer","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-footer","()",""],["footer","Benchmark::IPS::Job::StreamReport","Benchmark/IPS/Job/StreamReport.html#method-i-footer","()",""],["footer","Benchmark::IPS::Stats::Bootstrap","Benchmark/IPS/Stats/Bootstrap.html#method-i-footer","()",""],["footer","Benchmark::IPS::Stats::SD","Benchmark/IPS/Stats/SD.html#method-i-footer","()",""],["format_deps","Rake::Task","Rake/Task.html#method-c-format_deps","(deps)","<p>Format dependencies parameter to pass to task.\n"],["frac","BigDecimal","BigDecimal.html#method-i-frac","()","<p>Return the fractional part of the number, as a BigDecimal.\n"],["fragment","Nokogiri::HTML4","Nokogiri/HTML4.html#method-c-fragment","(...)","<p>Convenience method for Nokogiri::HTML4::DocumentFragment.parse\n"],["fragment","Nokogiri::HTML4","Nokogiri/HTML4.html#method-c-fragment","(...)","<p>Convenience method for Nokogiri::HTML4::DocumentFragment.parse\n"],["fragment","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-fragment","(tags = nil)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code>\n"],["fragment","Nokogiri::HTML5","Nokogiri/HTML5.html#method-c-fragment","(...)","<p>Convenience method for Nokogiri::HTML5::DocumentFragment.parse\n"],["fragment","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-i-fragment","(markup = nil)","<p>Parse a HTML5 document fragment from <code>markup</code>, returning a Nokogiri::HTML5::DocumentFragment.\n<p>Properties … &mdash; \n"],["fragment","Nokogiri::HTML5::Node","Nokogiri/HTML5/Node.html#method-i-fragment","(tags)",""],["fragment","Nokogiri::XML","Nokogiri/XML.html#method-c-fragment","(...)","<p>Convenience method for Nokogiri::XML::DocumentFragment.parse\n"],["fragment","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-fragment","(tags = nil)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code> Returns an empty fragment if <code>tags</code> is nil.\n"],["fragment","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-fragment","(data)",""],["fragment","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-fragment","(tags)","<p>Create a DocumentFragment containing <code>tags</code> that is relative to <em>this</em> context node.\n"],["fragment?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-fragment-3F","()","<p>Returns true if this is a DocumentFragment\n"],["frames","StackProf::Report","StackProf/Report.html#method-i-frames","(sort_by_total=false)",""],["from","Minitest::Result","Minitest/Result.html#method-c-from","(runnable)","<p>Create a new test result from a Runnable instance.\n"],["from_document","Nokogiri::XML::RelaxNG","Nokogiri/XML/RelaxNG.html#method-c-from_document","(p1, p2 = v2)","<p>Parse a RELAX NG schema definition from a Document to create a new Nokogiri::XML::RelaxNG.\n<p>Parameters … &mdash; \n"],["from_document","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-from_document","(p1, p2 = v2)","<p>Parse an XSD schema definition from a Document to create a new Nokogiri::XML::Schema\n<p>Parameters &mdash; \n<p><code>input</code> …\n"],["from_file","StackProf::Report","StackProf/Report.html#method-c-from_file","(file)",""],["from_io","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-c-from_io","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Create a new Reader to parse an IO stream.\n"],["from_json","StackProf::Report","StackProf/Report.html#method-c-from_json","(json)",""],["from_memory","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-c-from_memory","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Create a new Reader to parse a String.\n"],["full_comment","Rake::Task","Rake/Task.html#method-i-full_comment","()","<p>Full collection of comments. Multiple comments are separated by newlines.\n"],["gem_file","Object","Object.html#method-i-gem_file","(folder, name, version)",""],["gem_file_platform","Object","Object.html#method-i-gem_file_platform","(folder, name, version, platform = nil)",""],["gen_action_tables","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-gen_action_tables","(t, states)",""],["gen_goto_tables","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-gen_goto_tables","(t, grammar)",""],["generate","Racc::ParserClassGenerator","Racc/ParserClassGenerator.html#method-i-generate","()",""],["generate","Racc::StateTransitionTable","Racc/StateTransitionTable.html#method-c-generate","(states)",""],["generate","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-generate","()",""],["generate_cross_compile_extension_task_for","GeneratorHelpers","GeneratorHelpers.html#method-i-generate_cross_compile_extension_task_for","(extension_name)",""],["generate_did_you_mean_suggestions","Rake::TaskManager","Rake/TaskManager.html#method-i-generate_did_you_mean_suggestions","(task_name)",""],["generate_extension_task_for","GeneratorHelpers","GeneratorHelpers.html#method-i-generate_extension_task_for","(extension_name, platform = nil)",""],["generate_gem_task","GeneratorHelpers","GeneratorHelpers.html#method-i-generate_gem_task","(gem_name)",""],["generate_java_compile_extension_task_for","GeneratorHelpers","GeneratorHelpers.html#method-i-generate_java_compile_extension_task_for","(extension_name)",""],["generate_java_source_code_for","GeneratorHelpers","GeneratorHelpers.html#method-i-generate_java_source_code_for","(extension_name)",""],["generate_json","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-generate_json","()","<p>Generate json from +@full_report+.\n"],["generate_json","Benchmark::IPS::Report","Benchmark/IPS/Report.html#method-i-generate_json","(path)","<p>Generate json from Report#data to given path. @param path [String] path to generate json.\n"],["generate_message_for_undefined_task","Rake::TaskManager","Rake/TaskManager.html#method-i-generate_message_for_undefined_task","(task_name)",""],["generate_multi_cross_compile_extension_task_for","GeneratorHelpers","GeneratorHelpers.html#method-i-generate_multi_cross_compile_extension_task_for","(extension_name)",""],["generate_parser","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-generate_parser","()",""],["generate_parser_file","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-generate_parser_file","(destpath)",""],["generate_scaffold_structure","GeneratorHelpers","GeneratorHelpers.html#method-i-generate_scaffold_structure","()",""],["generate_source_code_for","GeneratorHelpers","GeneratorHelpers.html#method-i-generate_source_code_for","(extension_name)",""],["get","Nokogiri::HTML4::EntityLookup","Nokogiri/HTML4/EntityLookup.html#method-i-get","(p1)","<p>Get the HTML4::EntityDescription for <code>key</code>\n"],["get_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-get_attribute","(name)",""],["get_config_flag","DuckDB::Config","DuckDB/Config.html#method-c-get_config_flag","(p1)",""],["glob","Rake::FileList","Rake/FileList.html#method-c-glob","(pattern, *args)","<p>Get a sorted list of files matching the pattern. This method should be preferred to Dir and Dir.glob(pattern) …\n"],["gnome_source","Object","Object.html#method-i-gnome_source","()",""],["goto_id","Racc::Shift","Racc/Shift.html#method-i-goto_id","()",""],["grammar","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-grammar","()",""],["gsub","Rake::FileList","Rake/FileList.html#method-i-gsub","(pat, rep)","<p>Return a new FileList with the results of running <code>gsub</code> against each element of the original list.\n<p>Example: …\n"],["gsub!","Rake::FileList","Rake/FileList.html#method-i-gsub-21","(pat, rep)","<p>Same as <code>gsub</code> except that the original file list is modified.\n"],["has_attribute?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-has_attribute-3F","(p1)",""],["has_key?","Rake::TaskArguments","Rake/TaskArguments.html#method-i-has_key-3F","(key)","<p>Returns true if <code>key</code> is one of the arguments\n"],["hash","BigDecimal","BigDecimal.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>Two instances of BigDecimal have the same hash value if and only …\n"],["hash=","Racc::Rule","Racc/Rule.html#method-i-hash-3D","(n)",""],["have_builtin_func","Object","Object.html#method-i-have_builtin_func","(name, check_expr, opt = \"\", &b)",""],["have_libxml_headers?","Object","Object.html#method-i-have_libxml_headers-3F","(version = nil)",""],["have_package_configuration","Object","Object.html#method-i-have_package_configuration","(opt: nil, pc: nil, lib:, func:, headers:)","<p>set up mkmf to link against the library if we can find it\n"],["head?","Racc::LocationPointer","Racc/LocationPointer.html#method-i-head-3F","()",""],["header","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-header","()","<p>Return header with padding if +@label+ is &lt; length of 20. @return [String] Right justified header …\n"],["higher","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-higher","()",""],["hold!","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-hold-21","(held_path)","<p>Hold after each iteration. @param held_path [String] File name to store hold file.\n"],["hold?","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-hold-3F","()","<p>Return true if results are held while multiple Ruby invocations @return [Boolean] Need to hold results …\n"],["href","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-href","()","<p>Returns the URI reference for this Namespace.\n<p><strong>Example</strong>\n\n<pre>doc = Nokogiri::XML.parse(&lt;&lt;~XML)\n  &lt;?xml version=&quot;1.0&quot;?&gt; ...</pre>\n"],["html5_dtd?","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-html5_dtd-3F","()",""],["html?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-html-3F","()","<p>Returns true if this is an HTML4::Document or HTML5::Document node\n"],["html_dtd?","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-html_dtd-3F","()",""],["humanize_duration","Benchmark::IPS::Helpers","Benchmark/IPS/Helpers.html#method-c-humanize_duration","(duration_ns)",""],["i_suck_and_my_tests_are_order_dependent!","Minitest::Test","Minitest/Test.html#method-c-i_suck_and_my_tests_are_order_dependent-21","()","<p>Call this at the top of your tests when you absolutely positively need to have ordered tests. In doing …\n"],["iconv_configure_flags","Object","Object.html#method-i-iconv_configure_flags","()",""],["implied_end_tag?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-implied_end_tag-3F","()","<p>Can the end tag be implied for this tag?\n"],["implied_start_tag?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-implied_start_tag-3F","()","<p>Can the start tag be implied for this tag?\n"],["import","Rake::DSL","Rake/DSL.html#method-i-import","(*fns)","<p>Import the partial Rakefiles <code>fn</code>.  Imported files are loaded <em>after</em> the current file is completely loaded. …\n"],["in_binary?","RubyMemcheck::Frame","RubyMemcheck/Frame.html#method-i-in_binary-3F","()",""],["in_namespace","Rake::TaskManager","Rake/TaskManager.html#method-i-in_namespace","(name)","<p>Evaluate the block in a nested namespace named <code>name</code>.  Create an anonymous namespace if <code>name</code> is nil.\n"],["in_ruby?","RubyMemcheck::Frame","RubyMemcheck/Frame.html#method-i-in_ruby-3F","()",""],["include","Rake::FileList","Rake/FileList.html#method-i-include","(*filenames)","<p>Add file names defined by glob patterns to the file list.  If an array is given, add each element of …\n"],["include?","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-include-3F","(p1)","<p>Returns true if any member of node set equals <code>node</code>.\n"],["include?","Racc::ISet","Racc/ISet.html#method-i-include-3F","(key)",""],["incref","Racc::Reduce","Racc/Reduce.html#method-i-incref","()",""],["increment","Racc::LocationPointer","Racc/LocationPointer.html#method-i-increment","()",""],["index","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-index","(node = nil)","<p>Returns the index of the first node in self that is == to <code>node</code> or meets the given block. Returns nil …\n"],["infinite?","BigDecimal","BigDecimal.html#method-i-infinite-3F","()","<p>Returns nil, -1, or +1 depending on whether the value is finite, -Infinity, or +Infinity.\n"],["info_signal","Minitest","Minitest.html#method-i-info_signal","","<p>The signal to use for dumping information to STDERR. Defaults to “INFO”.\n"],["init","Racc::ActionTable","Racc/ActionTable.html#method-i-init","()",""],["init","Racc::Grammar","Racc/Grammar.html#method-i-init","()","<p>Computation\n"],["init","Rake::Application","Rake/Application.html#method-i-init","(app_name=\"rake\", argv = ARGV)","<p>Initialize the command line parameters and app name.\n"],["init","Rake::BaseExtensionTask","Rake/BaseExtensionTask.html#method-i-init","(name = nil, gem_spec = nil)",""],["init","Rake::ExtensionTask","Rake/ExtensionTask.html#method-i-init","(name = nil, gem_spec = nil)",""],["init","Rake::JavaExtensionTask","Rake/JavaExtensionTask.html#method-i-init","(name = nil, gem_spec = nil)",""],["init","Rake::PackageTask","Rake/PackageTask.html#method-i-init","(name, version)","<p>Initialization that bypasses the “yield self” and “define” step.\n"],["inline?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-inline-3F","()","<p>Is this element an inline element?\n"],["inner_html","Nokogiri::HTML5::Node","Nokogiri/HTML5/Node.html#method-i-inner_html","(options = {})",""],["inner_html","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_html","(*args)","<p>Get the inner_html for this node’s Node#children\n"],["inner_html","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inner_html","(*args)","<p>Get the inner html of all contained Node objects\n"],["inner_html=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_html-3D","(node_or_tags)","<p>Set the content for this Node to <code>node_or_tags</code>.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment …\n"],["inner_text","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_text","()",""],["inner_text","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inner_text","()","<p>Get the inner text of all contained Node objects\n<p>Note: This joins the text of all Node objects in the …\n"],["inner_xml","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-inner_xml","()","<p>Read the contents of the current node, including child nodes and markup. Returns a utf-8 encoded string. …\n"],["inspect","BigDecimal","BigDecimal.html#method-i-inspect","()","<p>Returns a string representation of self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;1234.5678&quot;</span>).<span class=\"ruby-identifier\">inspect</span>\n  <span class=\"ruby-comment\">#=&gt; &quot;0.12345678e4&quot;</span>\n</pre>\n"],["inspect","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-inspect","()","<p>Inspection information\n"],["inspect","Nokogiri::XML::Node::SaveOptions","Nokogiri/XML/Node/SaveOptions.html#method-i-inspect","()",""],["inspect","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inspect","()","<p>Return a nicely formatted string representation\n"],["inspect","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-inspect","()",""],["inspect","Racc::Accept","Racc/Accept.html#method-i-inspect","()",""],["inspect","Racc::Error","Racc/Error.html#method-i-inspect","()",""],["inspect","Racc::Goto","Racc/Goto.html#method-i-inspect","()",""],["inspect","Racc::GroupEndMark","Racc/GroupEndMark.html#method-i-inspect","()",""],["inspect","Racc::GroupStartMark","Racc/GroupStartMark.html#method-i-inspect","()",""],["inspect","Racc::ISet","Racc/ISet.html#method-i-inspect","()",""],["inspect","Racc::LocationPointer","Racc/LocationPointer.html#method-i-inspect","()",""],["inspect","Racc::Many1Mark","Racc/Many1Mark.html#method-i-inspect","()",""],["inspect","Racc::ManyMark","Racc/ManyMark.html#method-i-inspect","()",""],["inspect","Racc::OptionMark","Racc/OptionMark.html#method-i-inspect","()",""],["inspect","Racc::OrMark","Racc/OrMark.html#method-i-inspect","()",""],["inspect","Racc::Prec","Racc/Prec.html#method-i-inspect","()",""],["inspect","Racc::Reduce","Racc/Reduce.html#method-i-inspect","()",""],["inspect","Racc::Rule","Racc/Rule.html#method-i-inspect","()",""],["inspect","Racc::Shift","Racc/Shift.html#method-i-inspect","()",""],["inspect","Racc::State","Racc/State.html#method-i-inspect","()",""],["inspect","Racc::States","Racc/States.html#method-i-inspect","()",""],["inspect","Racc::Sym","Racc/Sym.html#method-i-inspect","()",""],["inspect","Racc::UserAction","Racc/UserAction.html#method-i-inspect","()",""],["inspect","Rake::LinkedList","Rake/LinkedList.html#method-i-inspect","()","<p>Same as <code>to_s</code>, but with inspected items.\n"],["inspect","String","String.html#method-i-inspect","()",""],["inspect_attributes","Nokogiri::XML::EntityReference","Nokogiri/XML/EntityReference.html#method-i-inspect_attributes","()",""],["install_default_aliases","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-install_default_aliases","()",""],["intern","Racc::Grammar","Racc/Grammar.html#method-i-intern","(value, dummy = false)",""],["intern","Racc::SymbolTable","Racc/SymbolTable.html#method-i-intern","(val, dummy = false)",""],["intern","Rake::TaskManager","Rake/TaskManager.html#method-i-intern","(task_class, task_name)","<p>Lookup a task.  Return an existing task if found, otherwise create a task of the current type.\n"],["internal_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-internal_subset","()","<p>Get the internal subset\n"],["interpret_loosely","BigDecimal","BigDecimal.html#method-c-interpret_loosely","(p1)","<p>Returns the <code>BigDecimal</code> converted loosely from <code>string</code>.\n"],["interrupt","DuckDB::Connection","DuckDB/Connection.html#method-i-interrupt","()","<p>Interrupts the currently running query.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span>\n<span class=\"ruby-identifier\">conn</span> = <span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">connect</span>\n<span class=\"ruby-identifier\">con</span>.<span class=\"ruby-identifier\">query</span>(<span class=\"ruby-string\">&#39;SET ENABLE_PROGRESS_BAR=true&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["investigation","Rake::Task","Rake/Task.html#method-i-investigation","()","<p>Return a string describing the internal state of a task.  Useful for debugging.\n"],["invoke","Rake::Task","Rake/Task.html#method-i-invoke","(*args)","<p>Invoke the task if it is needed.  Prerequisites are invoked first.\n"],["invoke_with_call_chain","Rake::Task","Rake/Task.html#method-i-invoke_with_call_chain","(task_args, invocation_chain)","<p>Same as invoke, but explicitly pass a call chain to detect circular dependencies.\n<p>If multiple tasks depend …\n"],["io","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-io","(input, encoding = nil)","<p>Create a parser context for an <code>input</code> IO which will assume <code>encoding</code>\n<p>Parameters &mdash; \n<p><code>io</code> (IO) The readable IO …\n"],["ips","Benchmark","Benchmark.html#method-c-ips","","\n<pre>require &#39;benchmark/ips&#39;\n\nBenchmark.ips do |x|\n  # Configure the number of seconds used during\n  # the ...</pre>\n"],["ips","Benchmark::IPS","Benchmark/IPS.html#method-i-ips","(*args)","<p>Measure code in block, each code’s benchmarked result will display in iteration per second with standard …\n"],["ips","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-ips","()","<p>LEGACY: Iterations per second. @return [Float] number of iterations per second.\n"],["ips_quick","Benchmark::IPS","Benchmark/IPS.html#method-i-ips_quick","(*methods, on: Kernel, **opts)","<p>Quickly compare multiple methods on the same object. @param methods [Symbol…] A list of method names …\n"],["ips_sd","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-ips_sd","()","<p>LEGACY: Standard deviation of iteration per second. @return [Float] standard deviation of iteration per …\n"],["isEqual","Jacobian","Jacobian.html#method-i-isEqual","(a,b,zero=0.0,e=1.0e-8)","<p>Determines the equality of two numbers by comparing to zero, or using the epsilon value\n"],["is_a?","Rake::FileList","Rake/FileList.html#method-i-is_a-3F","(klass)","<p>Lie about our class.\n"],["iso8601_parse","DuckDB::Interval","DuckDB/Interval.html#method-c-iso8601_parse","(value)","<p>parses the ISO8601 format string and return the Interval object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Interval</span>.<span class=\"ruby-identifier\">iso8601_parse</span>(<span class=\"ruby-string\">&#39;P1Y2M3DT4H5M6.123456S&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["it","Minitest::Spec::DSL","Minitest/Spec/DSL.html#method-i-it","(desc = \"anonymous\", &block)","<p>Define an expectation with name <code>desc</code>. Name gets morphed to a proper test method name. For some freakish …\n"],["item","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-item","(label=\"\", str=nil)","<p>Registers the given label and block pair in the job list. @param label [String] Label of benchmarked …\n"],["iterations_per_sec","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-iterations_per_sec","(cycles, time_us)","<p>Calculate the iterations per second given the number of cycles run and the time in microseconds that …\n"],["jacobian","Jacobian","Jacobian.html#method-i-jacobian","(f,fx,x)","<p>Computes the Jacobian of <code>f</code> at <code>x</code>. <code>fx</code> is the value of <code>f</code> at <code>x</code>.\n"],["java_compiling","Rake::JavaExtensionTask","Rake/JavaExtensionTask.html#method-i-java_compiling","(&block)",""],["jruby?","Minitest::Guard","Minitest/Guard.html#method-i-jruby-3F","(platform = RUBY_PLATFORM)","<p>Is this running on jruby?\n"],["json!","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-json-21","(path=\"data.json\")","<p>Generate json to given path, defaults to “data.json”.\n"],["json?","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-json-3F","()","<p>Return true if job needs to generate json. @return [Boolean] Need to generate json?\n"],["key?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-key-3F","(p1)","<p>Returns true if <code>attribute</code> is set\n"],["key?","Racc::ISet","Racc/ISet.html#method-i-key-3F","(key)",""],["key?","Rake::TaskArguments","Rake/TaskArguments.html#method-i-key-3F","(key)",""],["key_description","DuckDB::Config","DuckDB/Config.html#method-c-key_description","(p1)","<p>returns available configuration name and the description. The return value is array object. The first …\n"],["key_descriptions","DuckDB::Config","DuckDB/Config.html#method-c-key_descriptions","()","<p>returns the Hash object of all available configuration names and the descriptions.\n<p>configs = DuckDB::Config.key_descriptions …\n"],["keys","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-keys","()",""],["keys","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-keys","()","<p>Get the attribute names for this Node.\n"],["kind_of?","Rake::FileList","Rake/FileList.html#method-i-kind_of-3F","(klass)",""],["kwattr_add","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-kwattr_add","(attribute_name, keywords)","<p>Ensure that values are present in a keyword attribute.\n<p>Any values in <code>keywords</code> that already exist in the …\n"],["kwattr_append","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-kwattr_append","(attribute_name, keywords)","<p>Add keywords to a Node’s keyword attribute, regardless of duplication. Compare with #kwattr_add. …\n"],["kwattr_remove","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-kwattr_remove","(attribute_name, keywords)","<p>Remove keywords from a keyword attribute. Any matching keywords that exist in the named attribute are …\n"],["kwattr_values","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-kwattr_values","(attribute_name)","<p>Fetch values from a keyword attribute of a Node.\n<p>A “keyword attribute” is a node attribute that …\n"],["la=","Racc::State","Racc/State.html#method-i-la-3D","(la)",""],["lang","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-lang","()","<p>Searches the language of a node, i.e. the values of the xml:lang attribute or the one carried by the …\n"],["lang","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-lang","()","<p>Get the xml:lang scope within which the node resides.\n"],["lang=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-lang-3D","(p1)","<p>Set the language of a node, i.e. the values of the xml:lang attribute.\n"],["last","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-last","()","<p>Get the last element of the NodeSet.\n"],["last_element_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-last_element_child","()","<p>Returns &mdash; The last child Node that is an element.\n\n<p><strong>Example:</strong>\n<p>Note that the “hello” child, which is …\n"],["left","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-left","(*syms)",""],["length","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-length","()","<p>Get the length of the node set\n"],["let","Minitest::Spec::DSL","Minitest/Spec/DSL.html#method-i-let","(name, &block)","<p>Essentially, define an accessor for <code>name</code> with <code>block</code>.\n<p>Why use let instead of def? I honestly don’t …\n"],["libflag_to_filename","Object","Object.html#method-i-libflag_to_filename","(ldflag)",""],["library_version","DuckDB","DuckDB.html#method-c-library_version","()","<p>Returns the version of the DuckDB library.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DuckDB</span>.<span class=\"ruby-identifier\">library_version</span> <span class=\"ruby-comment\"># =&gt; &quot;0.2.0&quot;</span>\n</pre>\n"],["limit","BigDecimal","BigDecimal.html#method-c-limit","(p1 = v1)","<p>Limit the number of significant digits in newly created BigDecimal numbers to the specified value. Rounding …\n"],["line","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-line","()","<p>Returns &mdash; The line number of this Node.\n\n<p><strong> ⚠ The CRuby and JRuby implementations differ in important ways!</strong> …\n"],["line","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-line","()","<p>Returns &mdash; (Integer) the line number of the line being currently parsed.\n\n"],["line=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-line-3D","(p1)","<p>Sets the line for this Node. num must be less than 65535.\n"],["lineno","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-lineno","()",""],["load","Minitest","Minitest.html#method-c-load","(*names)","<p>Manually load plugins by name.\n"],["load","Rake::DefaultLoader","Rake/DefaultLoader.html#method-i-load","(fn)","<p>Loads a rakefile into the current application from <code>fn</code>\n"],["load_held_results","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-load_held_results","()",""],["load_rakefile","Rake","Rake.html#method-c-load_rakefile","(path)","<p>Load a rakefile.\n"],["load_rakefile","Rake::Application","Rake/Application.html#method-i-load_rakefile","()","<p>Find the rakefile and then load it and any pending imports.\n"],["local_have_library","Object","Object.html#method-i-local_have_library","(lib, func = nil, headers = nil)",""],["local_name","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-local_name","()","<p>Get the local name of the node\n"],["location","Minitest::Assertion","Minitest/Assertion.html#method-i-location","()","<p>Where was this run before an assertion was raised?\n"],["location","Minitest::Reportable","Minitest/Reportable.html#method-i-location","()","<p>The location identifier of this test. Depends on a method existing called class_name.\n"],["location","Racc::SourceText","Racc/SourceText.html#method-i-location","()",""],["log","BigMath","BigMath.html#method-c-log","(p1, p2)","<p>Computes the natural logarithm of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n<p>If …\n"],["log_conflict","Object","Object.html#method-i-log_conflict","(states)",""],["log_useless","Object","Object.html#method-i-log_useless","(grammar)",""],["logging","Object","Object.html#method-i-logging","(mode, &block)",""],["logical_type","DuckDB::Column","DuckDB/Column.html#method-i-logical_type","()","<p>Returns the logical type class.\n"],["lookup","Rake::TaskManager","Rake/TaskManager.html#method-i-lookup","(task_name, initial_scope=nil)","<p>Lookup a task, using scope and the scope hints in the task name. This method performs straight lookups …\n"],["lower","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-lower","()",""],["ludecomp","LUSolve","LUSolve.html#method-i-ludecomp","(a,n,zero=0,one=1)","<p>Performs LU decomposition of the n by n matrix a.\n"],["lusolve","LUSolve","LUSolve.html#method-i-lusolve","(a,b,ps,zero=0.0)","<p>Solves a*x = b for x, using LU decomposition.\n<p>a is a matrix, b is a constant vector, x is the solution …\n"],["maglev?","Minitest::Guard","Minitest/Guard.html#method-i-maglev-3F","(platform = defined?(RUBY_ENGINE) && RUBY_ENGINE)","<p>Is this running on maglev?\n"],["main","Object","Object.html#method-i-main","()",""],["make","Nokogiri","Nokogiri.html#method-c-make","(input = nil, opts = {}, &blk)","<p>Create a new Nokogiri::XML::DocumentFragment\n"],["make","Rake::LinkedList","Rake/LinkedList.html#method-c-make","(*args)","<p>Make a list out of the given arguments. This method is polymorphic\n"],["make_closure","Racc::State","Racc/State.html#method-i-make_closure","(core)",""],["make_filename","Object","Object.html#method-i-make_filename","(path, suffix)",""],["make_my_diffs_pretty!","Minitest::Test","Minitest/Test.html#method-c-make_my_diffs_pretty-21","()","<p>Make diffs for this Test use #pretty_inspect so that diff in assert_equal can have more details. NOTE: …\n"],["make_test_cmd","Minitest::TestTask","Minitest/TestTask.html#method-i-make_test_cmd","(globs = test_globs)","<p>Generate the test command-line.\n"],["many","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-many","(sym, &block)",""],["many1","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-many1","(sym, &block)",""],["matches?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-matches-3F","(selector)","<p>Returns true if this Node matches <code>selector</code>\n"],["math","A","A.html#method-i-math","()",""],["max_samples","StackProf::Report","StackProf/Report.html#method-i-max_samples","()",""],["mean","Benchmark::Timing","Benchmark/Timing.html#method-c-mean","(samples)","<p>Calculate (arithmetic) mean of given samples. @param [Array] samples Samples to calculate mean. @return …\n"],["member?","Rake::InvocationChain","Rake/InvocationChain.html#method-i-member-3F","(invocation)","<p>Is the invocation already in the chain?\n"],["member?","Rake::InvocationChain::EmptyInvocationChain","Rake/InvocationChain/EmptyInvocationChain.html#method-i-member-3F","(obj)",""],["memory","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-memory","(input, encoding = nil)","<p>Create a parser context for the <code>input</code> String.\n<p>Parameters &mdash; \n<p><code>input</code> (String) The input string to be parsed. …\n"],["message","Minitest::Assertions","Minitest/Assertions.html#method-i-message","(msg = nil, ending = nil, &default)","<p>Returns a proc that will output <code>msg</code> along with the default message.\n"],["message","Rake::RuleRecursionOverflowError","Rake/RuleRecursionOverflowError.html#method-i-message","()",""],["meta_encoding","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-meta_encoding","()","<p>Get the meta tag encoding for this document.  If there is no meta tag, then nil is returned.\n"],["meta_encoding=","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-meta_encoding-3D","(encoding)","<p>Set the meta tag encoding for this document.\n<p>If an meta encoding tag is already present, its content is …\n"],["metadata","Minitest::Runnable","Minitest/Runnable.html#method-i-metadata","()","<p>Metadata you attach to the test results that get sent to the reporter.\n<p>Lazily initializes to a hash, to …\n"],["metadata?","Minitest::Runnable","Minitest/Runnable.html#method-i-metadata-3F","()","<p>Returns true if metadata exists.\n"],["method_missing","Nokogiri::Decorators::Slop","Nokogiri/Decorators/Slop.html#method-i-method_missing","(name, *args, &block)","<p>look for node with <code>name</code>.  See Nokogiri.Slop\n"],["method_missing","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-method_missing","(mid, *args, &block)",""],["method_missing","Rake::TaskArguments","Rake/TaskArguments.html#method-i-method_missing","(sym, *args)","<p>Returns the value of the given argument via method_missing\n"],["methods_matching","Minitest::Runnable","Minitest/Runnable.html#method-c-methods_matching","(re)","<p>Returns all instance methods matching the pattern <code>re</code>.\n"],["mingw_gcc_executable","Rake::ExtensionCompiler","Rake/ExtensionCompiler.html#method-c-mingw_gcc_executable","()","<p>return the first compiler found that includes both mingw and gcc conditions (this assumes you have one …\n"],["mingw_host","Rake::ExtensionCompiler","Rake/ExtensionCompiler.html#method-c-mingw_host","()","<p>return the host portion from the installed MinGW\n"],["mk_interval","DuckDB::Interval","DuckDB/Interval.html#method-c-mk_interval","(year: 0, month: 0, day: 0, hour: 0, min: 0, sec: 0, usec: 0)","<p>creates the Interval object.\n\n<pre>DuckDB::Interval.mk_interval(year: 1, month: 2, day: 3, hour: 4, min: 5, ...</pre>\n"],["mkmapexp","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-mkmapexp","(arr)",""],["mode","BigDecimal","BigDecimal.html#method-c-mode","(p1, p2 = v2)","<p>Returns an integer representing the mode settings for exception handling and rounding.\n<p>These modes control …\n"],["modeline","StackProf::Report","StackProf/Report.html#method-i-modeline","()",""],["modulo","BigDecimal","BigDecimal.html#method-i-modulo","(p1)","<p>Returns the modulus from dividing by b.\n<p>See BigDecimal#divmod.\n"],["mri?","Minitest::Guard","Minitest/Guard.html#method-i-mri-3F","(platform = RUBY_DESCRIPTION)","<p>Is this running on mri?\n"],["mu_pp","Minitest::Assertions","Minitest/Assertions.html#method-i-mu_pp","(obj)","<p>This returns a human-readable version of <code>obj</code>. By default #inspect is called. You can override this to …\n"],["mu_pp_for_diff","Minitest::Assertions","Minitest/Assertions.html#method-i-mu_pp_for_diff","(obj)","<p>This returns a diff-able more human-readable version of <code>obj</code>. This differs from the regular mu_pp because …\n"],["mult","BigDecimal","BigDecimal.html#method-i-mult","(p1, p2)","<p>Returns the BigDecimal product of <code>self</code> and <code>value</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> …\n"],["multitask","Rake::DSL","Rake/DSL.html#method-i-multitask","(*args, &block)","<p>Declare a task that performs its prerequisites in parallel. Multitasks does <strong>not</strong> guarantee that its prerequisites …\n"],["must_be","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be","","<p>See Minitest::Assertions#assert_operator\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">n</span>).<span class=\"ruby-identifier\">must_be</span> <span class=\"ruby-value\">:&lt;=</span>, <span class=\"ruby-value\">42</span>\n</pre>\n<p>This can also do predicates:\n"],["must_be_close_to","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be_close_to","","<p>See Minitest::Assertions#assert_in_delta\n\n<pre>_(n).must_be_close_to m [, delta]</pre>\n"],["must_be_empty","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be_empty","","<p>See Minitest::Assertions#assert_empty.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">collection</span>).<span class=\"ruby-identifier\">must_be_empty</span>\n</pre>\n"],["must_be_instance_of","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be_instance_of","","<p>See Minitest::Assertions#assert_instance_of\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">obj</span>).<span class=\"ruby-identifier\">must_be_instance_of</span> <span class=\"ruby-identifier\">klass</span>\n</pre>\n"],["must_be_kind_of","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be_kind_of","","<p>See Minitest::Assertions#assert_kind_of\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">obj</span>).<span class=\"ruby-identifier\">must_be_kind_of</span> <span class=\"ruby-identifier\">mod</span>\n</pre>\n"],["must_be_nil","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be_nil","","<p>See Minitest::Assertions#assert_nil\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">obj</span>).<span class=\"ruby-identifier\">must_be_nil</span>\n</pre>\n"],["must_be_same_as","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be_same_as","","<p>See Minitest::Assertions#assert_same\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">a</span>).<span class=\"ruby-identifier\">must_be_same_as</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["must_be_silent","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be_silent","","<p>See Minitest::Assertions#assert_silent\n\n<pre>_ { ... }.must_be_silent</pre>\n"],["must_be_within_epsilon","Minitest::Expectations","Minitest/Expectations.html#method-i-must_be_within_epsilon","","<p>See Minitest::Assertions#assert_in_epsilon\n\n<pre>_(n).must_be_within_epsilon m [, epsilon]</pre>\n"],["must_equal","Minitest::Expectations","Minitest/Expectations.html#method-i-must_equal","","<p>See Minitest::Assertions#assert_equal\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">a</span>).<span class=\"ruby-identifier\">must_equal</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["must_include","Minitest::Expectations","Minitest/Expectations.html#method-i-must_include","","<p>See Minitest::Assertions#assert_includes\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">collection</span>).<span class=\"ruby-identifier\">must_include</span> <span class=\"ruby-identifier\">obj</span>\n</pre>\n"],["must_match","Minitest::Expectations","Minitest/Expectations.html#method-i-must_match","","<p>See Minitest::Assertions#assert_match\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">a</span>).<span class=\"ruby-identifier\">must_match</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["must_output","Minitest::Expectations","Minitest/Expectations.html#method-i-must_output","","<p>See Minitest::Assertions#assert_output\n\n<pre>_ { ... }.must_output out_or_nil [, err]</pre>\n"],["must_pattern_match","Minitest::Expectations","Minitest/Expectations.html#method-i-must_pattern_match","","<p>See Minitest::Assertions#assert_pattern_match\n\n<pre>_ { ... }.must_pattern_match [...]</pre>\n"],["must_raise","Minitest::Expectations","Minitest/Expectations.html#method-i-must_raise","","<p>See Minitest::Assertions#assert_raises\n\n<pre>_ { ... }.must_raise exception</pre>\n"],["must_respond_to","Minitest::Expectations","Minitest/Expectations.html#method-i-must_respond_to","","<p>See Minitest::Assertions#assert_respond_to\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">obj</span>).<span class=\"ruby-identifier\">must_respond_to</span> <span class=\"ruby-identifier\">msg</span>\n</pre>\n"],["must_throw","Minitest::Expectations","Minitest/Expectations.html#method-i-must_throw","","<p>See Minitest::Assertions#assert_throws\n\n<pre>_ { ... }.must_throw sym</pre>\n"],["n_rrconflicts","Racc::State","Racc/State.html#method-i-n_rrconflicts","()",""],["n_rrconflicts","Racc::States","Racc/States.html#method-i-n_rrconflicts","()",""],["n_significant_digits","BigDecimal","BigDecimal.html#method-i-n_significant_digits","()","<p>Returns the number of decimal significant digits in <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;0&quot;</span>).<span class=\"ruby-identifier\">n_significant_digits</span>        <span class=\"ruby-operator\">...</span>\n</pre>\n"],["n_srconflicts","Racc::State","Racc/State.html#method-i-n_srconflicts","()",""],["n_srconflicts","Racc::States","Racc/States.html#method-i-n_srconflicts","()",""],["n_useless_nonterminals","Racc::Grammar","Racc/Grammar.html#method-i-n_useless_nonterminals","()",""],["n_useless_rules","Racc::Grammar","Racc/Grammar.html#method-i-n_useless_rules","()",""],["name","DuckDB::Column","DuckDB/Column.html#method-i-name","()","<p>Returns the column name.\n"],["name","Minitest::Runnable","Minitest/Runnable.html#method-i-name","()","<p>Name of the run.\n"],["name","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-i-name","()","<p>Get the name of this EncodingHandler\n"],["name","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-name","()","<p>Get the tag name for this ElementDescription\n"],["name","Nokogiri::XML::CDATA","Nokogiri/XML/CDATA.html#method-i-name","()","<p>Get the name of this CDATA node\n"],["name","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-name","()","<p>The name of this document.  Always returns “document”\n"],["name","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-name","()","<p>return the name for DocumentFragment\n"],["name","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-name","()","<p>Returns &mdash; The content element’s <code>name</code>\n\n"],["name","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-name","()",""],["name","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-name","()","<p>Get the name of the node. Returns a utf-8 encoded string.\n"],["name","Racc::GroupEndMark","Racc/GroupEndMark.html#method-i-name","()",""],["name","Racc::GroupStartMark","Racc/GroupStartMark.html#method-i-name","()",""],["name","Racc::Many1Mark","Racc/Many1Mark.html#method-i-name","()",""],["name","Racc::ManyMark","Racc/ManyMark.html#method-i-name","()",""],["name","Racc::OptionMark","Racc/OptionMark.html#method-i-name","()",""],["name","Racc::OrMark","Racc/OrMark.html#method-i-name","()",""],["name","Racc::Prec","Racc/Prec.html#method-i-name","()",""],["name","Racc::UserAction","Racc/UserAction.html#method-i-name","()",""],["name","Rake::Task","Rake/Task.html#method-i-name","()","<p>Name of the task, including any namespace qualifiers.\n"],["name=","Minitest::Runnable","Minitest/Runnable.html#method-i-name-3D","(o)","<p>Set the name of the run.\n"],["name=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-name-3D","(p1)",""],["namespace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace","()","<p>Returns &mdash; The Namespace of the element or attribute node, or <code>nil</code> if there is no namespace.\n\n<p><strong>Example:</strong>\n\n<pre>doc = ...</pre>\n"],["namespace","Rake::DSL","Rake/DSL.html#method-i-namespace","(name=nil, &block)","<p>Create a new rake namespace and use it for evaluating the given block.  Returns a NameSpace object that …\n"],["namespace=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace-3D","(ns)","<p>Set the default namespace on this node (as would be defined with an “xmlns=” attribute in  …\n"],["namespace_definitions","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace_definitions","()","<p>Returns &mdash; Namespaces that are defined directly on this node, as an Array of Namespace objects. The array …\n\n"],["namespace_scopes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace_scopes","()","<p>Returns &mdash; Array of all the Namespaces on this node and its ancestors.\n\n<p>See also #namespaces\n<p><strong>Example:</strong>\n"],["namespace_uri","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-namespace_uri","()","<p>Get the URI defining the namespace associated with the node\n"],["namespaced_key?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespaced_key-3F","(p1, p2)","<p>Returns true if <code>attribute</code> is set with <code>namespace</code>\n"],["namespaces","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-namespaces","()","<p>Get the hash of namespaces on the root Nokogiri::XML::Node\n"],["namespaces","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespaces","()","<p>Fetch all the namespaces on this node and its ancestors.\n<p>Note that the keys in this hash XML attributes …\n"],["namespaces","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-namespaces","()","<p>Get a hash of namespaces for this Node\n"],["nan?","BigDecimal","BigDecimal.html#method-i-nan-3F","()","<p>Returns True if the value is Not a Number.\n"],["native_content=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-native_content-3D","(p1)","<p>Set the content of this node to <code>input</code>.\n<p>Parameters &mdash; \n<p><code>input</code> (String) The new content for this node.\n\n<p>⚠ This …\n"],["needed?","Rake::FileCreationTask","Rake/FileCreationTask.html#method-i-needed-3F","()","<p>Is this file task needed?  Yes if it doesn’t exist.\n"],["needed?","Rake::FileTask","Rake/FileTask.html#method-i-needed-3F","()","<p>Is this file task needed?  Yes if it doesn’t exist, or if its time stamp is out of date.\n"],["needed?","Rake::Task","Rake/Task.html#method-i-needed-3F","()","<p>Is this task needed?\n"],["needs_darwin_linker_hack","Object","Object.html#method-i-needs_darwin_linker_hack","()","<p>In ruby 3.2, symbol resolution changed on Darwin, to introduce the ‘-bundle_loader` flag to resolve symbols …\n"],["new","A","A.html#method-c-new","()",""],["new","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-c-new","(opts={})","<p>Instantiate the Benchmark::IPS::Job.\n"],["new","Benchmark::IPS::Job::Entry","Benchmark/IPS/Job/Entry.html#method-c-new","(label, action)","<p>Instantiate the Benchmark::IPS::Job::Entry. @param label [#to_s] Label of Benchmarked code. @param action …\n"],["new","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-c-new","(out = nil)","<p>@param out [Array&lt;StreamReport&gt;] list of reports to send output\n"],["new","Benchmark::IPS::Job::StreamReport","Benchmark/IPS/Job/StreamReport.html#method-c-new","(stream = $stdout)",""],["new","Benchmark::IPS::Report","Benchmark/IPS/Report.html#method-c-new","()","<p>Instantiate the Report.\n"],["new","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-c-new","(label, us, iters, stats, cycles)","<p>Instantiate the Benchmark::IPS::Report::Entry. @param [#to_s] label Label of entry. @param [Integer] …\n"],["new","Benchmark::IPS::Share","Benchmark/IPS/Share.html#method-c-new","(report, job)",""],["new","Benchmark::IPS::Stats::Bootstrap","Benchmark/IPS/Stats/Bootstrap.html#method-c-new","(samples, confidence)",""],["new","Benchmark::IPS::Stats::SD","Benchmark/IPS/Stats/SD.html#method-c-new","(samples)",""],["new","DuckDB::Appender","DuckDB/Appender.html#method-c-new","(p1, p2, p3)",""],["new","DuckDB::Config","DuckDB/Config.html#method-c-new","()",""],["new","DuckDB::ExtractedStatements","DuckDB/ExtractedStatements.html#method-c-new","(con, sql)",""],["new","DuckDB::ExtractedStatementsImpl","DuckDB/ExtractedStatementsImpl.html#method-c-new","(p1, p2)",""],["new","DuckDB::Interval","DuckDB/Interval.html#method-c-new","(interval_months: 0, interval_days: 0, interval_micros: 0)","<p>creates the Interval object. The arguments are the number of months, days, and microseconds. The default …\n"],["new","DuckDB::PendingResult","DuckDB/PendingResult.html#method-c-new","(p1, p2 = v2)",""],["new","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-c-new","(p1, p2)",""],["new","DuckDB::Result","DuckDB/Result.html#method-c-new","()",""],["new","Minitest::Parallel::Executor","Minitest/Parallel/Executor.html#method-c-new","(size)","<p>Create a parallel test executor of with <code>size</code> workers.\n"],["new","Nokogiri::CSS::XPathVisitor","Nokogiri/CSS/XPathVisitor.html#method-c-new","( builtins: BuiltinsConfig::NEVER, doctype: DoctypeConfig::XML, prefix: Nokogiri::XML::XPath::GLOBAL_SEARCH_PREFIX, namespaces: nil )","<p>Parameters &mdash; \n<p><code>builtins:</code> (BuiltinsConfig) Determine when to use Nokogiri’s built-in xpath functions for …\n"],["new","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-c-new","(*args)","<p>Create a new empty document with base URI <code>uri</code> and external ID <code>external_id</code>.\n"],["new","Nokogiri::HTML4::DocumentFragment","Nokogiri/HTML4/DocumentFragment.html#method-c-new","( document, input = nil, context_ = nil, options_ = XML::ParseOptions::DEFAULT_HTML, context: context_, options: options_ )","<p>Parse HTML4 fragment input from a String, and return a new HTML4::DocumentFragment.\n<p>💡 It’s recommended …\n"],["new","Nokogiri::HTML4::SAX::PushParser","Nokogiri/HTML4/SAX/PushParser.html#method-c-new","(doc = HTML4::SAX::Document.new, file_name = nil, encoding = \"UTF-8\")",""],["new","Nokogiri::HTML5::DocumentFragment","Nokogiri/HTML5/DocumentFragment.html#method-c-new","( doc, input = nil, context_ = nil, positional_options_hash = nil, context: context_, **options )","<p>Parse HTML5 fragment input from a String, and return a new HTML5::DocumentFragment.\n<p>💡 It’s recommended …\n"],["new","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-c-new","(p1, p2, *args)","<p>Create a new Attr element on the <code>document</code> with <code>name</code>\n"],["new","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-c-new","(options = {}, root = nil, &block)","<p>Create a new Builder object.  <code>options</code> are sent to the top level Document that is being built.\n<p>Building …\n"],["new","Nokogiri::XML::CDATA","Nokogiri/XML/CDATA.html#method-c-new","(p1, p2, *args)","<p>Create a new CDATA element on the <code>document</code> with <code>content</code>\n<p>If <code>content</code> cannot be implicitly converted to a …\n"],["new","Nokogiri::XML::Comment","Nokogiri/XML/Comment.html#method-c-new","(p1, p2, *args)","<p>Create a new Comment element on the <code>document</code> with <code>content</code>. Alternatively, if a <code>node</code> is passed, the <code>node</code> …\n"],["new","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-new","(*args)","<p>Create a new empty document declaring XML version <code>version</code>.\n"],["new","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-c-new","( document, tags = nil, context_ = nil, options_ = ParseOptions::DEFAULT_XML, context: context_, options: options_ )","<p>Parse XML fragment input from a String, and return a new DocumentFragment that is associated with the …\n"],["new","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-c-new","(name, doc, *args)",""],["new","Nokogiri::XML::EntityReference","Nokogiri/XML/EntityReference.html#method-c-new","(p1, p2, *args)","<p>Create a new EntityReference element on the <code>document</code> with <code>name</code>\n"],["new","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-c-new","(name, document)","<p>Create a new node with <code>name</code> that belongs to <code>document</code>.\n<p>If you intend to add a node to a document tree, …\n"],["new","Nokogiri::XML::Node::SaveOptions","Nokogiri/XML/Node/SaveOptions.html#method-c-new","(options = 0)","<p>Create a new SaveOptions object with <code>options</code>\n"],["new","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-c-new","(document, list = [])","<p>Create a NodeSet with <code>document</code> defaulting to <code>list</code>\n"],["new","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-c-new","(options = STRICT)",""],["new","Nokogiri::XML::ProcessingInstruction","Nokogiri/XML/ProcessingInstruction.html#method-c-new","(p1, p2, p3, *args)","<p>Create a new ProcessingInstruction element on the <code>document</code> with <code>name</code> and <code>content</code>\n"],["new","Nokogiri::XML::ProcessingInstruction","Nokogiri/XML/ProcessingInstruction.html#method-c-new","(document, name, content)",""],["new","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-c-new","( string_or_io, url_ = nil, encoding_ = nil, options_ = ParseOptions::STRICT, url: url_, encoding: encoding_, options: options_ )","<p>Create a new Reader to parse an XML document.\n<p>Required Parameters &mdash; \n<p><code>input</code> (String | IO): The XML document …\n\n"],["new","Nokogiri::XML::RelaxNG","Nokogiri/XML/RelaxNG.html#method-c-new","(input, parse_options_ = ParseOptions::DEFAULT_SCHEMA, options: parse_options_)","<p>Parse a RELAX NG schema definition from a String or IO to create a new Nokogiri::XML::RelaxNG.\n<p>Parameters … &mdash; \n"],["new","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-c-new","(doc = Nokogiri::XML::SAX::Document.new, encoding = nil)","<p>Create a new Parser.\n<p>Parameters &mdash; \n<p><code>handler</code> (optional Nokogiri::XML::SAX::Document) The document that will …\n"],["new","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-new","(input, encoding = nil)","<p>Create a parser context for an IO or a String. This is a shorthand method for ParserContext.io and ParserContext.memory …\n"],["new","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-c-new","(doc = XML::SAX::Document.new, file_name = nil, encoding = \"UTF-8\")","<p>Create a new PushParser with <code>doc</code> as the SAX Document, providing an optional <code>file_name</code> and <code>encoding</code>\n"],["new","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-new","(input, parse_options_ = ParseOptions::DEFAULT_SCHEMA, parse_options: parse_options_)","<p>Parse an XSD schema definition from a String or IO to create a new Nokogiri::XML::Schema\n<p>Parameters &mdash; \n<p><code>input</code> …\n"],["new","Nokogiri::XML::Text","Nokogiri/XML/Text.html#method-c-new","(p1, p2, *args)","<p>Create a new Text element on the <code>document</code> with <code>content</code>\n"],["new","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-c-new","(p1)","<p>Create a new XPathContext with <code>node</code> as the context node.\n"],["new","Racc::ActionTable","Racc/ActionTable.html#method-c-new","(rt, st)",""],["new","Racc::DebugFlags","Racc/DebugFlags.html#method-c-new","(parse = false, rule = false, token = false, state = false, la = false, prec = false, conf = false)",""],["new","Racc::Goto","Racc/Goto.html#method-c-new","(ident, sym, from, to)",""],["new","Racc::Grammar","Racc/Grammar.html#method-c-new","(debug_flags = DebugFlags.new)",""],["new","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-c-new","()",""],["new","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-c-new","(g)",""],["new","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-c-new","(debug_flags = DebugFlags.new)",""],["new","Racc::GrammarFileParser::Result","Racc/GrammarFileParser/Result.html#method-c-new","(grammar)",""],["new","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-c-new","(str, filename = '-')",""],["new","Racc::GroupEndMark","Racc/GroupEndMark.html#method-c-new","(lineno)",""],["new","Racc::GroupStartMark","Racc/GroupStartMark.html#method-c-new","(lineno)",""],["new","Racc::ISet","Racc/ISet.html#method-c-new","(a = [])",""],["new","Racc::Item","Racc/Item.html#method-c-new","(rule, la)",""],["new","Racc::LocationPointer","Racc/LocationPointer.html#method-c-new","(rule, i, sym)",""],["new","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-c-new","(states, debug_flags = DebugFlags.new)",""],["new","Racc::Many1Mark","Racc/Many1Mark.html#method-c-new","(lineno)",""],["new","Racc::ManyMark","Racc/ManyMark.html#method-c-new","(lineno)",""],["new","Racc::OptionMark","Racc/OptionMark.html#method-c-new","(lineno)",""],["new","Racc::OrMark","Racc/OrMark.html#method-c-new","(lineno)",""],["new","Racc::ParserClassGenerator","Racc/ParserClassGenerator.html#method-c-new","(states)",""],["new","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-c-new","(states, params)",""],["new","Racc::ParserFileGenerator::Params","Racc/ParserFileGenerator/Params.html#method-c-new","()",""],["new","Racc::Prec","Racc/Prec.html#method-c-new","(symbol, lineno)",""],["new","Racc::RRconflict","Racc/RRconflict.html#method-c-new","(sid, high, low, tok)",""],["new","Racc::Reduce","Racc/Reduce.html#method-c-new","(rule)",""],["new","Racc::Rule","Racc/Rule.html#method-c-new","(target, syms, act)",""],["new","Racc::SRconflict","Racc/SRconflict.html#method-c-new","(sid, shift, reduce)",""],["new","Racc::Shift","Racc/Shift.html#method-c-new","(goto)",""],["new","Racc::SourceText","Racc/SourceText.html#method-c-new","(text, filename, lineno)",""],["new","Racc::State","Racc/State.html#method-c-new","(ident, core)",""],["new","Racc::StateTransitionTable","Racc/StateTransitionTable.html#method-c-new","(states)",""],["new","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-c-new","(states)",""],["new","Racc::States","Racc/States.html#method-c-new","(grammar, debug_flags = DebugFlags.new)",""],["new","Racc::Sym","Racc/Sym.html#method-c-new","(value, dummyp)",""],["new","Racc::SymbolTable","Racc/SymbolTable.html#method-c-new","()",""],["new","Racc::UserAction","Racc/UserAction.html#method-c-new","(src, proc)",""],["new","RaccProfiler","RaccProfiler.html#method-c-new","(really)",""],["new","Rake::Application","Rake/Application.html#method-c-new","()","<p>Initialize a Rake::Application object.\n"],["new","Rake::BaseExtensionTask","Rake/BaseExtensionTask.html#method-c-new","(name = nil, gem_spec = nil)",""],["new","Rake::CompilerConfig","Rake/CompilerConfig.html#method-c-new","(config_path)",""],["new","Rake::FileList","Rake/FileList.html#method-c-new","(*patterns)","<p>Create a file list from the globbable patterns given.  If you wish to perform multiple includes or excludes …\n"],["new","Rake::LinkedList","Rake/LinkedList.html#method-c-new","(head, tail=EMPTY)",""],["new","Rake::LinkedList::EmptyLinkedList","Rake/LinkedList/EmptyLinkedList.html#method-c-new","()",""],["new","Rake::NameSpace","Rake/NameSpace.html#method-c-new","(task_manager, scope_list)","<p>Create a namespace lookup object using the given task manager and the list of scopes.\n"],["new","Rake::PackageTask","Rake/PackageTask.html#method-c-new","(name=nil, version=nil)","<p>Create a Package Task with the given name and version.  Use <code>:noversion</code> as the version to build a package …\n"],["new","Rake::RuleRecursionOverflowError","Rake/RuleRecursionOverflowError.html#method-c-new","(*args)",""],["new","Rake::Task","Rake/Task.html#method-c-new","(task_name, app)","<p>Create a task named <code>task_name</code> with no actions or prerequisites. Use <code>enhance</code> to add actions and prerequisites. …\n"],["new","Rake::TaskArguments","Rake/TaskArguments.html#method-c-new","(names, values, parent=nil)","<p>Create a TaskArgument object with a list of argument <code>names</code> and a set of associated <code>values</code>.  <code>parent</code> is …\n"],["new","Rake::TestTask","Rake/TestTask.html#method-c-new","(name=:test)","<p>Create a testing task.\n"],["new","RubyMemcheck::Configuration","RubyMemcheck/Configuration.html#method-c-new","( binary_name: nil, ruby: FileUtils::RUBY, valgrind: DEFAULT_VALGRIND, valgrind_options: DEFAULT_VALGRIND_OPTIONS, valgrind_suppressions_dir: DEFAULT_VALGRIND_SUPPRESSIONS_DIR, valgrind_generate_suppressions: false, skipped_ruby_functions: DEFAULT_SKIPPED_RUBY_FUNCTIONS, temp_dir: Dir.mktmpdir, output_io: $stderr, filter_all_errors: false, use_only_ruby_free_at_exit: RUBY_FREE_AT_EXIT_SUPPORTED )",""],["new","RubyMemcheck::Frame","RubyMemcheck/Frame.html#method-c-new","(configuration, loaded_binaries, frame_xml)",""],["new","RubyMemcheck::RSpec::RakeTask","RubyMemcheck/RSpec/RakeTask.html#method-c-new","(*args)",""],["new","RubyMemcheck::RubyRunner","RubyMemcheck/RubyRunner.html#method-c-new","(*args)",""],["new","RubyMemcheck::Stack","RubyMemcheck/Stack.html#method-c-new","(configuration, loaded_binaries, stack_xml)",""],["new","RubyMemcheck::Suppression","RubyMemcheck/Suppression.html#method-c-new","(configuration, suppression_node)",""],["new","RubyMemcheck::TestTask","RubyMemcheck/TestTask.html#method-c-new","(*args)",""],["new","RubyMemcheck::TestTaskReporter","RubyMemcheck/TestTaskReporter.html#method-c-new","(configuration)",""],["new","RubyMemcheck::ValgrindError","RubyMemcheck/ValgrindError.html#method-c-new","(configuration, loaded_binaries, error)",""],["new","StackProf::Middleware","StackProf/Middleware.html#method-c-new","(app, options = {})",""],["new","StackProf::Report","StackProf/Report.html#method-c-new","(data)",""],["new","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-c-new","(host, opt = {})","<p>Create a new XSD parser with <code>host</code> and <code>opt</code>\n"],["new_scope","Rake::TaskArguments","Rake/TaskArguments.html#method-i-new_scope","(names)","<p>Create a new argument scope using the prerequisite argument names.\n"],["newobj","A","A.html#method-c-newobj","()",""],["next","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next","()",""],["next","Racc::LocationPointer","Racc/LocationPointer.html#method-i-next","()",""],["next=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next-3D","(node_or_tags)",""],["next_element","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next_element","()","<p>Returns the next Nokogiri::XML::Element type sibling node.\n"],["next_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next_sibling","()","<p>Returns the next sibling node\n"],["next_token","Racc::Parser","Racc/Parser.html#method-i-next_token","()","<p>The method to fetch next token. If you use #do_parse method, you must implement #next_token.\n<p>The format …\n"],["nfa","Racc::Grammar","Racc/Grammar.html#method-i-nfa","()",""],["nfa","Racc::States","Racc/States.html#method-i-nfa","()","<p>NFA (Non-deterministic Finite Automaton) Computation\n"],["nix?","Object","Object.html#method-i-nix-3F","()",""],["nlsolve","Newton","Newton.html#method-i-nlsolve","(f,x)","<p>See also Newton\n"],["node_name","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_name","()","<p>Returns the name for this Node\n"],["node_name=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_name-3D","(p1)","<p>Set the name for this Node\n"],["node_type","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_type","()","<p>Get the type for this Node\n"],["node_type","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-node_type","()","<p>Get the type of readers current node\n"],["nonassoc","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-nonassoc","(*syms)",""],["none?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-none-3F","()","<p>return true if this is a non error\n"],["nonterminal?","Racc::Sym","Racc/Sym.html#method-i-nonterminal-3F","()",""],["nonterminal_base","Racc::Grammar","Racc/Grammar.html#method-i-nonterminal_base","()",""],["nonterminals","Racc::SymbolTable","Racc/SymbolTable.html#method-i-nonterminals","()",""],["nonzero?","BigDecimal","BigDecimal.html#method-i-nonzero-3F","()","<p>Returns self if the value is non-zero, nil otherwise.\n"],["normalized_frames","StackProf::Report","StackProf/Report.html#method-i-normalized_frames","()",""],["notations","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-notations","()","<p>Returns &mdash; All the notations for this DTD in a Hash of Notation <code>name</code> to Notation.\n\n"],["now","Benchmark::Timing","Benchmark/Timing.html#method-c-now","()","<p>Get an object that represents now and can be converted to microseconds\n"],["nowrite","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-nowrite","(value=nil)","<p>Get/set the nowrite flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["nowrite","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-nowrite","(value=nil)","<p>Get/set the nowrite flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["nparams","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-nparams","()",""],["nt_max","Racc::SymbolTable","Racc/SymbolTable.html#method-i-nt_max","()",""],["null","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-null","(&block)",""],["null=","Racc::Rule","Racc/Rule.html#method-i-null-3D","(n)",""],["null=","Racc::Sym","Racc/Sym.html#method-i-null-3D","(n)",""],["nullable?","Racc::Rule","Racc/Rule.html#method-i-nullable-3F","()",""],["nullable?","Racc::Sym","Racc/Sym.html#method-i-nullable-3F","()",""],["occur","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-occur","()","<p>Returns &mdash; The content element’s <code>occur</code> flag. Possible values are <code>ONCE</code>, <code>OPT</code>, <code>MULT</code> or <code>PLUS</code>.\n\n"],["on_error","Racc::Parser","Racc/Parser.html#method-i-on_error","(t, val, vstack)","<p>This method is called when a parse error is found.\n<p>ERROR_TOKEN_ID is an internal ID of token which caused …\n"],["once_writer","Racc::Sym","Racc/Sym.html#method-c-once_writer","(nm)",""],["open","DuckDB::Database","DuckDB/Database.html#method-c-open","(dbpath = nil, config = nil)","<p>Opens database. The first argument is DuckDB database file path to open. If there is no argument, the …\n"],["openbsd?","Object","Object.html#method-i-openbsd-3F","()",""],["option","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-option","(sym, default = nil, &block)",""],["optional_attributes","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-optional_attributes","()","<p>A list of optional attributes for this element\n"],["options","Benchmark::IPS","Benchmark/IPS.html#method-c-options","()","<p>Set options for running the benchmarks. :format =&gt; [:human, :raw]\n\n<pre>:human format narrows precision and ...</pre>\n"],["options","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-options","()",""],["options","Rake::Application","Rake/Application.html#method-i-options","()","<p>Application options from the command line\n"],["options=","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-options-3D","(p1)",""],["original_content","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-original_content","()","<p>Get the original_content before ref substitution\n"],["original_dir","Rake","Rake.html#method-c-original_dir","()","<p>Return the original directory where the Rake application was started.\n"],["osx?","Minitest::Guard","Minitest/Guard.html#method-i-osx-3F","(platform = RUBY_PLATFORM)","<p>Is this running on macOS?\n"],["outact","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-outact","(f, t, act)",""],["outer_xml","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-outer_xml","()","<p>Read the current node and its contents, including child nodes and markup. Returns a utf-8 encoded string. …\n"],["output","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output","(out)",""],["output_conflict","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_conflict","(out)","<p>Warnings\n"],["output_rule","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_rule","(out)","<p>Rules\n"],["output_state","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_state","(out)","<p>States\n"],["output_token","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_token","(out)","<p>Tokens\n"],["output_useless","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_useless","(out)",""],["outrrconf","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-outrrconf","(f, confs)",""],["outsrconf","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-outsrconf","(f, confs)",""],["overall_samples","StackProf::Report","StackProf/Report.html#method-i-overall_samples","()",""],["overlaps?","Benchmark::IPS::Stats::StatsMetric","Benchmark/IPS/Stats/StatsMetric.html#method-i-overlaps-3F","(baseline)",""],["package_dir_path","Rake::PackageTask","Rake/PackageTask.html#method-i-package_dir_path","()","<p>The directory this package will be built in\n"],["package_name","Rake::PackageTask","Rake/PackageTask.html#method-i-package_name","()","<p>The name of this package\n"],["parallel_executor","Minitest","Minitest.html#method-i-parallel_executor","","<p>Parallel test executor\n"],["parallelize_me!","Minitest::Test","Minitest/Test.html#method-c-parallelize_me-21","()","<p>Call this at the top of your tests (inside the <code>Minitest::Test</code> subclass or <code>describe</code> block) when you want …\n"],["param_type","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-param_type","(index)","<p>returns parameter type. The argument must be index of parameter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameter_name","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-parameter_name","(p1)",""],["parent","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parent","()","<p>Get the parent Node for this Node\n"],["parent=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parent-3D","(parent_node)","<p>Set the parent Node for this Node\n"],["parse","Nokogiri","Nokogiri.html#method-c-parse","(string, url = nil, encoding = nil, options = nil)","<p>Parse an HTML or XML document.  <code>string</code> contains the document.\n"],["parse","Nokogiri::HTML4","Nokogiri/HTML4.html#method-c-parse","(...)","<p>Convenience method for Nokogiri::HTML4::Document.parse\n"],["parse","Nokogiri::HTML4","Nokogiri/HTML4.html#method-c-parse","(...)","<p>Convenience method for Nokogiri::HTML4::Document.parse\n"],["parse","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-c-parse","( input, url_ = nil, encoding_ = nil, options_ = XML::ParseOptions::DEFAULT_HTML, url: url_, encoding: encoding_, options: options_ )","<p>Parse HTML4 input from a String or IO object, and return a new HTML4::Document.\n<p>Required Parameters &mdash; \n<p><code>input</code> …\n\n"],["parse","Nokogiri::HTML4::DocumentFragment","Nokogiri/HTML4/DocumentFragment.html#method-c-parse","( input, encoding_ = nil, options_ = XML::ParseOptions::DEFAULT_HTML, encoding: encoding_, options: options_, &block )","<p>Parse HTML4 fragment input from a String, and return a new HTML4::DocumentFragment. This method creates …\n"],["parse","Nokogiri::HTML5","Nokogiri/HTML5.html#method-c-parse","(...)","<p>Convenience method for Nokogiri::HTML5::Document.parse\n"],["parse","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-c-parse","( string_or_io, url_ = nil, encoding_ = nil, url: url_, encoding: encoding_, **options, &block )","<p>Parse HTML input with a parser compliant with the HTML5 spec. This method uses the encoding of <code>input</code> …\n"],["parse","Nokogiri::HTML5::DocumentFragment","Nokogiri/HTML5/DocumentFragment.html#method-c-parse","( input, encoding_ = nil, positional_options_hash = nil, encoding: encoding_, **options )","<p>Parse HTML5 fragment input from a String, and return a new HTML5::DocumentFragment. This method creates …\n"],["parse","Nokogiri::XML","Nokogiri/XML.html#method-c-parse","(...)","<p>Convenience method for Nokogiri::XML::Document.parse\n"],["parse","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-parse","( string_or_io, url_ = nil, encoding_ = nil, options_ = XML::ParseOptions::DEFAULT_XML, url: url_, encoding: encoding_, options: options_ )","<p>Parse XML input from a String or IO object, and return a new XML::Document.\n<p>🛡 By default, Nokogiri treats …\n"],["parse","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-c-parse","(tags, options_ = ParseOptions::DEFAULT_XML, options: options_, &block)","<p>Parse XML fragment input from a String, and return a new XML::DocumentFragment. This method creates a …\n"],["parse","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parse","(string_or_io, options = nil)","<p>Parse <code>string_or_io</code> as a document fragment within the context of <strong>this</strong> node.  Returns a XML::NodeSet containing …\n"],["parse","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse","(input, &block)","<p>Parse the input, sending events to the SAX::Document at #document.\n<p>Parameters &mdash; \n<p><code>input</code> (String, IO) The input …\n\n"],["parse","Nokogiri::XSLT","Nokogiri/XSLT.html#method-c-parse","(string, modules = {})","<p>Parse the stylesheet in <code>xsl</code>, registering optional <code>modules</code> as custom class handlers.\n<p>Parameters &mdash; \n<p><code>xsl</code> (String …\n"],["parse","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-c-parse","(src, filename = '-', lineno = 1)",""],["parse","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-parse","(src, filename = '-', lineno = 1)",""],["parse_file","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_file","(filename, encoding = @encoding)","<p>Parse a file.\n<p>Parameters &mdash; \n<p><code>filename</code> (String) The path to the file to be parsed.\n<p><code>encoding</code> (optional Encoding …\n"],["parse_file","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-c-parse_file","(filename)",""],["parse_io","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_io","(io, encoding = @encoding)","<p>Parse an input stream.\n<p>Parameters &mdash; \n<p><code>io</code> (IO) The readable IO object from which to read input\n<p><code>encoding</code> (optional …\n"],["parse_json","StackProf::Report","StackProf/Report.html#method-c-parse_json","(json)",""],["parse_memory","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_memory","(input, encoding = @encoding)","<p>Parse an input string.\n<p>Parameters &mdash; \n<p><code>input</code> (String) The input string to be parsed.\n<p><code>encoding</code> (optional Encoding …\n"],["parse_option_string","Racc::DebugFlags","Racc/DebugFlags.html#method-c-parse_option_string","(s)",""],["parse_stylesheet_doc","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-c-parse_stylesheet_doc","(p1)","<p>Parse an XSLT::Stylesheet from <code>document</code>.\n<p>Parameters &mdash; \n<p><code>document</code> (Nokogiri::XML::Document) the document to …\n\n"],["parse_with","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-parse_with","(p1)","<p>Use <code>sax_handler</code> and parse the current document\n<p>💡 Calling this method directly is discouraged. Use Nokogiri::XML::SAX::Parser …\n"],["parser_class","Racc::Grammar","Racc/Grammar.html#method-i-parser_class","()",""],["parser_class","Racc::StateTransitionTable","Racc/StateTransitionTable.html#method-i-parser_class","()",""],["pass","Minitest::Assertions","Minitest/Assertions.html#method-i-pass","(_msg = nil)","<p>used for counting assertions\n"],["passed?","Minitest::AbstractReporter","Minitest/AbstractReporter.html#method-i-passed-3F","()","<p>Did this run pass?\n"],["passed?","Minitest::Reportable","Minitest/Reportable.html#method-i-passed-3F","()","<p>Did this run pass?\n<p>Note: skipped runs are not considered passing, but they don’t cause the process …\n"],["passed?","Minitest::Runnable","Minitest/Runnable.html#method-i-passed-3F","()","<p>Did this run pass?\n<p>Note: skipped runs are not considered passing, but they don’t cause the process …\n"],["path","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-path","()","<p>Returns the path associated with this Node\n"],["path_must_exist","Minitest::Expectations","Minitest/Expectations.html#method-i-path_must_exist","","<p>See Minitest::Assertions#assert_path_exists\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">some_path</span>).<span class=\"ruby-identifier\">path_must_exist</span>\n</pre>\n"],["path_wont_exist","Minitest::Expectations","Minitest/Expectations.html#method-i-path_wont_exist","","<p>See Minitest::Assertions#refute_path_exists\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">some_path</span>).<span class=\"ruby-identifier\">path_wont_exist</span>\n</pre>\n"],["pathmap","Rake::FileList","Rake/FileList.html#method-i-pathmap","(spec=nil, &block)","<p>Apply the pathmap spec to each of the included file names, returning a new file list with the modified …\n"],["pathmap","String","String.html#method-i-pathmap","(spec=nil, &block)","<p>Map the path according to the given specification.  The specification controls the details of the mapping. …\n"],["pathmap_explode","String","String.html#method-i-pathmap_explode","()","<p>Explode a path into individual components.  Used by <code>pathmap</code>.\n<p>This String extension comes from Rake\n"],["pathmap_partial","String","String.html#method-i-pathmap_partial","(n)","<p>Extract a partial path from the path.  Include <code>n</code> directories from the front end (left hand side) if  …\n"],["pathmap_replace","String","String.html#method-i-pathmap_replace","(patterns, &block)","<p>Perform the pathmap replacement operations on the given path. The patterns take the form ‘pat1,rep1;pat2,rep2…’. …\n"],["pending_prepared","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-pending_prepared","()",""],["pending_prepared_stream","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-pending_prepared_stream","()",""],["platform","Rake::BaseExtensionTask","Rake/BaseExtensionTask.html#method-i-platform","()",""],["platform","Rake::JavaExtensionTask","Rake/JavaExtensionTask.html#method-i-platform","()",""],["pointer_id","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-pointer_id","()","<p>Returns &mdash; A unique id for this node based on the internal memory structures. This method is used by #== …\n\n"],["pointer_out","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-pointer_out","(out, ptr)",""],["pop","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-pop","()","<p>Removes the last element from set and returns it, or <code>nil</code> if the set is empty\n"],["pow","A","A.html#method-i-pow","()",""],["power","BigDecimal","BigDecimal.html#method-i-power","(p1, p2 = v2)","<p>Returns the value raised to the power of n.\n<p>Note that n must be an Integer.\n<p>Also available as the operator …\n"],["prec","Racc::Rule","Racc/Rule.html#method-i-prec","(sym, &block)",""],["precedence","Racc::Rule","Racc/Rule.html#method-i-precedence","()",""],["precedence=","Racc::Rule","Racc/Rule.html#method-i-precedence-3D","(sym)",""],["precedence_table","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-precedence_table","(&block)",""],["precision","BigDecimal","BigDecimal.html#method-i-precision","()","<p>Returns the number of decimal digits in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;0&quot;</span>).<span class=\"ruby-identifier\">precision</span>         <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;1&quot;</span>).<span class=\"ruby-identifier\">precision</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["precision_scale","BigDecimal","BigDecimal.html#method-i-precision_scale","()","<p>Returns a 2-length array; the first item is the result of BigDecimal#precision and the second one is …\n"],["precs","BigDecimal","BigDecimal.html#method-i-precs","()","<p>Returns an Array of two Integer values that represent platform-dependent internal storage properties. …\n"],["prefix","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-prefix","()","<p>Returns &mdash; The content element’s namespace <code>prefix</code>.\n\n"],["prefix","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-prefix","()","<p>Returns &mdash; The namespace <code>prefix</code> for this element declaration.\n\n"],["prefix","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-prefix","()","<p>Return the prefix for this Namespace, or <code>nil</code> if there is no prefix (e.g., default namespace).\n<p><strong>Example</strong> …\n"],["prefix","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-prefix","()","<p>Get the shorthand reference to the namespace associated with the node.\n"],["prepare","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-c-prepare","(con, sql)","<p>return DuckDB::PreparedStatement object. The first argument is DuckDB::Connection object. The second …\n"],["prepared_statement","DuckDB::Connection","DuckDB/Connection.html#method-i-prepared_statement","(str, &)","<p>returns PreparedStatement object. The first argument is SQL string. If block is given, the block is executed …\n"],["prepared_statement","DuckDB::ExtractedStatementsImpl","DuckDB/ExtractedStatementsImpl.html#method-i-prepared_statement","(p1, p2)",""],["prepend_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-prepend_child","(node_or_tags)","<p>Add <code>node_or_tags</code> as the first child of this Node.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["prerecord","Minitest::AbstractReporter","Minitest/AbstractReporter.html#method-i-prerecord","(klass, name)","<p>About to start running a test. This allows a reporter to show that it is starting or that we are in the …\n"],["prerequisite_tasks","Rake::Task","Rake/Task.html#method-i-prerequisite_tasks","()","<p>List of prerequisite tasks\n"],["preserving_globals","Object","Object.html#method-i-preserving_globals","()",""],["previous","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous","()",""],["previous=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous-3D","(node_or_tags)",""],["previous_element","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous_element","()","<p>Returns the previous Nokogiri::XML::Element type sibling node.\n"],["previous_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous_sibling","()","<p>Returns the previous sibling node\n"],["pride","Minitest::PrideIO","Minitest/PrideIO.html#method-i-pride","(string)","<p>Color a string.\n"],["pride","Minitest::PrideLOL","Minitest/PrideLOL.html#method-i-pride","(string)","<p>Make the string even more colorful. Damnit.\n"],["pride!","Minitest::PrideIO","Minitest/PrideIO.html#method-c-pride-21","()","<p>Activate the pride plugin. Called from both -p option and minitest/pride\n"],["pride?","Minitest::PrideIO","Minitest/PrideIO.html#method-c-pride-3F","()","<p>Are we showing our testing pride?\n"],["print","Minitest::PrideIO","Minitest/PrideIO.html#method-i-print","(o)","<p>Wrap print to colorize the output.\n"],["print_alphabetical_flamegraph","StackProf::Report","StackProf/Report.html#method-i-print_alphabetical_flamegraph","(f=STDOUT, skip_common=true)",""],["print_callgrind","StackProf::Report","StackProf/Report.html#method-i-print_callgrind","(f = STDOUT)",""],["print_d3_flamegraph","StackProf::Report","StackProf/Report.html#method-i-print_d3_flamegraph","(f=STDOUT, skip_common=true)",""],["print_debug","StackProf::Report","StackProf/Report.html#method-i-print_debug","()",""],["print_dump","StackProf::Report","StackProf/Report.html#method-i-print_dump","(f=STDOUT)",""],["print_file","StackProf::Report","StackProf/Report.html#method-i-print_file","(filter, f = STDOUT)",""],["print_files","StackProf::Report","StackProf/Report.html#method-i-print_files","(sort_by_total=false, limit=nil, f = STDOUT)",""],["print_flamegraph","StackProf::Report","StackProf/Report.html#method-i-print_flamegraph","(f, skip_common, alphabetical=false)",""],["print_graphviz","StackProf::Report","StackProf/Report.html#method-i-print_graphviz","(options = {}, f = STDOUT)",""],["print_json","StackProf::Report","StackProf/Report.html#method-i-print_json","(f=STDOUT)",""],["print_message","Object","Object.html#method-i-print_message","(msg)",""],["print_method","StackProf::Report","StackProf/Report.html#method-i-print_method","(name, f = STDOUT)",""],["print_stackcollapse","StackProf::Report","StackProf/Report.html#method-i-print_stackcollapse","()",""],["print_text","StackProf::Report","StackProf/Report.html#method-i-print_text","(sort_by_total=false, limit=nil, select_files= nil, reject_files=nil, select_names=nil, reject_names=nil, f = STDOUT)",""],["print_timeline_flamegraph","StackProf::Report","StackProf/Report.html#method-i-print_timeline_flamegraph","(f=STDOUT, skip_common=true)",""],["proc","Racc::UserAction","Racc/UserAction.html#method-c-proc","(pr = nil, &block)",""],["proc?","Racc::UserAction","Racc/UserAction.html#method-i-proc-3F","()",""],["process_env","Minitest::TestTask","Minitest/TestTask.html#method-i-process_env","()","<p>Extract variables from the environment and convert them to command line arguments. See #extra_args.\n<p>Environment …\n"],["process_recipe","Object","Object.html#method-i-process_recipe","(name, version, static_p, cross_p, cacheable_p = true)",""],["processing_instruction","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-processing_instruction","(name, content)","<p>Called when processing instructions are found\n<p>Parameters &mdash; \n<p><code>name</code> is the target of the instruction\n<p><code>content</code> …\n"],["processing_instruction?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-processing_instruction-3F","()","<p>Returns true if this is a ProcessingInstruction node\n"],["push","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-push","(p1)","<p>Append <code>node</code> to the NodeSet.\n"],["put_state_transition_table","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-put_state_transition_table","(f)","<p>State Transition Table Serialization\n"],["query","DuckDB::Connection","DuckDB/Connection.html#method-i-query","(sql, *args, **kwargs)","<p>executes sql with args. The first argument sql must be SQL string. The rest arguments are parameters …\n"],["query_multi_sql","DuckDB::Connection","DuckDB/Connection.html#method-i-query_multi_sql","(sql)",""],["query_progress","DuckDB::Connection","DuckDB/Connection.html#method-i-query_progress","()","<p>Returns the progress of the currently running query.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;duckdb&#39;</span>\n\n<span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">DuckDB</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Database</span>.<span class=\"ruby-identifier\">open</span>\n<span class=\"ruby-identifier\">conn</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["quiet","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-quiet","()","<p>Silence output @return [Boolean]\n"],["quiet!","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-quiet-21","()",""],["quiet=","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-quiet-3D","(val)",""],["quiet?","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-quiet-3F","()",""],["quo","BigDecimal","BigDecimal.html#method-i-quo","(p1, p2 = v2)","<p>Divide by the specified value.\n<p>digits &mdash; If specified and less than the number of significant digits of the …\n"],["quote_params","Nokogiri::XSLT","Nokogiri/XSLT.html#method-c-quote_params","(params)","<p>Quote parameters in <code>params</code> for stylesheet safety. See Nokogiri::XSLT::Stylesheet.transform for example …\n"],["racc_accept","Racc::Parser","Racc/Parser.html#method-i-racc_accept","()",""],["racc_e_pop","Racc::Parser","Racc/Parser.html#method-i-racc_e_pop","(state, tstack, vstack)",""],["racc_next_state","Racc::Parser","Racc/Parser.html#method-i-racc_next_state","(curstate, state)",""],["racc_print_stacks","Racc::Parser","Racc/Parser.html#method-i-racc_print_stacks","(t, v)",""],["racc_print_states","Racc::Parser","Racc/Parser.html#method-i-racc_print_states","(s)",""],["racc_read_token","Racc::Parser","Racc/Parser.html#method-i-racc_read_token","(t, tok, val)","<p>For debugging output\n"],["racc_reduce","Racc::Parser","Racc/Parser.html#method-i-racc_reduce","(toks, sim, tstack, vstack)",""],["racc_shift","Racc::Parser","Racc/Parser.html#method-i-racc_shift","(tok, tstack, vstack)",""],["racc_token2str","Racc::Parser","Racc/Parser.html#method-i-racc_token2str","(tok)",""],["raise_not_found_library","Object","Object.html#method-i-raise_not_found_library","(library, version)",""],["rake_check_options","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-rake_check_options","(options, *optdecl)","<p>Check that the options do not contain options not listed in <code>optdecl</code>.  An ArgumentError exception is thrown …\n"],["rake_check_options","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-rake_check_options","(options, *optdecl)","<p>Check that the options do not contain options not listed in <code>optdecl</code>.  An ArgumentError exception is thrown …\n"],["rake_output_message","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-rake_output_message","(message)","<p>Send the message to the default rake output (which is $stderr).\n"],["rake_output_message","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-rake_output_message","(message)","<p>Send the message to the default rake output (which is $stderr).\n"],["read","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-read","()","<p>Move the Reader forward through the XML document.\n"],["read_io","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-c-read_io","(p1, p2, p3, p4)","<p>Read the HTML document from <code>io</code> with given <code>url</code>, <code>encoding</code>, and <code>options</code>.  See Nokogiri::HTML4.parse\n"],["read_io","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-c-read_io","(io, url_ = nil, encoding_ = nil, url: url_, encoding: encoding_, **options)","<p>Create a new document from an IO object.\n<p>💡 Most users should prefer Document.parse to this method.\n"],["read_io","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-read_io","(p1, p2, p3, p4)","<p>Create a new document from an IO object\n"],["read_memory","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-c-read_memory","(p1, p2, p3, p4)","<p>Read the HTML document contained in <code>string</code> with given <code>url</code>, <code>encoding</code>, and <code>options</code>.  See Nokogiri::HTML4.parse …\n"],["read_memory","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-c-read_memory","(string, url_ = nil, encoding_ = nil, url: url_, encoding: encoding_, **options)","<p>Create a new document from a String.\n<p>💡 Most users should prefer Document.parse to this method.\n"],["read_memory","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-read_memory","(p1, p2, p3, p4)","<p>Create a new document from a String\n"],["read_memory","Nokogiri::XML::RelaxNG","Nokogiri/XML/RelaxNG.html#method-c-read_memory","(...)","<p>Convenience method for Nokogiri::XML::RelaxNG.new.\n"],["read_memory","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-read_memory","(...)","<p>Convenience method for Nokogiri::XML::Schema.new\n"],["read_only?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-read_only-3F","()","<p>Is this a read only node?\n"],["record","Minitest::AbstractReporter","Minitest/AbstractReporter.html#method-i-record","(result)","<p>Output and record the result of the test. Call result#result_code to get the result character string. …\n"],["recovery","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-recovery","()","<p>Inspect whether this parser will recover from parsing errors. If set to <code>true</code>, the parser will invoke …\n"],["recovery=","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-recovery-3D","(p1)","<p>Controls whether this parser will recover from parsing errors. If set to <code>true</code>, the parser will invoke …\n"],["reduce","Racc::ActionTable","Racc/ActionTable.html#method-i-reduce","(i)",""],["reduce_n","Racc::ActionTable","Racc/ActionTable.html#method-i-reduce_n","()",""],["reduce_table","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-reduce_table","(grammar)",""],["reenable","Rake::Task","Rake/Task.html#method-i-reenable","()","<p>Reenable the task, allowing its tasks to be executed if the task is invoked again.\n"],["reference","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-reference","(name, content)","<p>Called when a parsed entity is referenced and not replaced.\n<p>Parameters &mdash; \n<p><code>name</code> (String) is the name of the …\n"],["refute","Minitest::Assertions","Minitest/Assertions.html#method-i-refute","(test, msg = nil)","<p>Fails if <code>test</code> is truthy.\n"],["refute_empty","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_empty","(obj, msg = nil)","<p>Fails if <code>obj</code> is empty.\n"],["refute_equal","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_equal","(exp, act, msg = nil)","<p>Fails if <code>exp == act</code>.\n<p>For floats use refute_in_delta.\n"],["refute_in_delta","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_in_delta","(exp, act, delta = 0.001, msg = nil)","<p>For comparing Floats.  Fails if <code>exp</code> is within <code>delta</code> of <code>act</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">refute_in_delta</span> <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span>, (<span class=\"ruby-value\">22.0</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">7.0</span>)\n</pre>\n"],["refute_in_epsilon","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_in_epsilon","(a, b, epsilon = 0.001, msg = nil)","<p>For comparing Floats.  Fails if <code>exp</code> and <code>act</code> have a relative error less than <code>epsilon</code>.\n"],["refute_includes","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_includes","(collection, obj, msg = nil)","<p>Fails if <code>collection</code> includes <code>obj</code>.\n"],["refute_instance_of","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_instance_of","(cls, obj, msg = nil)","<p>Fails if <code>obj</code> is an instance of <code>cls</code>.\n"],["refute_kind_of","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_kind_of","(cls, obj, msg = nil)","<p>Fails if <code>obj</code> is a kind of <code>cls</code>.\n"],["refute_match","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_match","(matcher, obj, msg = nil)","<p>Fails if <code>matcher</code> <code>=~</code> <code>obj</code>.\n"],["refute_nil","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_nil","(obj, msg = nil)","<p>Fails if <code>obj</code> is nil.\n"],["refute_operator","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_operator","(o1, op, o2 = UNDEFINED, msg = nil)","<p>Fails if <code>o1</code> is not <code>op</code> <code>o2</code>. Eg:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">refute_operator</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">:&gt;</span>, <span class=\"ruby-value\">2</span> <span class=\"ruby-comment\">#=&gt; pass</span>\n<span class=\"ruby-identifier\">refute_operator</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">:&lt;</span>, <span class=\"ruby-value\">2</span> <span class=\"ruby-comment\">#=&gt; fail</span>\n</pre>\n"],["refute_path_exists","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_path_exists","(path, msg = nil)","<p>Fails if <code>path</code> exists.\n"],["refute_pattern","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_pattern","()","<p>For testing with pattern matching (only supported with Ruby 3.0 and later)\n\n<pre># pass\nrefute_pattern { [1,2,3] ...</pre>\n"],["refute_predicate","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_predicate","(o1, op, msg = nil)","<p>For testing with predicates.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">refute_predicate</span> <span class=\"ruby-identifier\">str</span>, <span class=\"ruby-value\">:empty?</span>\n</pre>\n<p>This is really meant for specs and is front-ended …\n"],["refute_respond_to","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_respond_to","(obj, meth, msg = nil, include_all: false)","<p>Fails if <code>obj</code> responds to the message <code>meth</code>. include_all defaults to false to match Object#respond_to? …\n"],["refute_same","Minitest::Assertions","Minitest/Assertions.html#method-i-refute_same","(exp, act, msg = nil)","<p>Fails if <code>exp</code> is the same (by object identity) as <code>act</code>.\n"],["register","Nokogiri::XSLT","Nokogiri/XSLT.html#method-c-register","(uri, custom_handler_class)","<p>Register a class that implements custom XSLT transformation functions.\n<p>⚠ The XSLT handler classes are …\n"],["register_namespaces","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_namespaces","(namespaces)","<p>Register namespaces in <code>namespaces</code>\n"],["register_ns","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_ns","(p1, p2)","<p>Register the namespace with <code>prefix</code> and <code>uri</code> for use in future queries. Passing a uri of <code>nil</code> will unregister …\n"],["register_plugin","Minitest","Minitest.html#method-c-register_plugin","(name_or_mod)","<p>Register a plugin to be used. Does NOT require / load it.\n"],["register_spec_type","Minitest::Spec::DSL","Minitest/Spec/DSL.html#method-i-register_spec_type","(*args, &block)","<p>Register a new type of spec that matches the spec’s description. This method can take either a Regexp …\n"],["register_variable","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_variable","(p1, p2)","<p>Register the variable <code>name</code> with <code>value</code> for use in future queries. Passing a value of <code>nil</code> will unregister …\n"],["register_variables","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_variables","(binds)",""],["related_class","Nokogiri::ClassResolver","Nokogiri/ClassResolver.html#method-i-related_class","(class_name)","<p>Find a class constant within the\n<p>Some examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Nokogiri</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Document</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">related_class</span>(<span class=\"ruby-string\">&quot;DocumentFragment&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["remainder","BigDecimal","BigDecimal.html#method-i-remainder","(p1)","<p>Returns the remainder from dividing by the value.\n<p>x.remainder(y) means x-y*(x/y).truncate\n"],["remove","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-remove","()",""],["remove","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove","()",""],["remove_attr","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove_attr","(name)","<p>Remove the attributed named <code>name</code> from all Node objects in the NodeSet\n"],["remove_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-remove_attribute","(name)","<p>Remove the attribute named <code>name</code>\n"],["remove_attribute","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove_attribute","(name)",""],["remove_class","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-remove_class","(names = nil)","<p>Remove HTML CSS classes from this node. Any CSS class names in <code>css_classes</code> that exist in this node’s …\n"],["remove_class","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove_class","(name = nil)","<p>Remove the class attribute <code>name</code> from all Node objects in the NodeSet.\n<p>See Nokogiri::XML::Node#remove_class …\n"],["remove_namespaces!","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-remove_namespaces-21","()","<p>Remove all namespaces from all nodes in the document.\n<p>This could be useful for developers who either don’t …\n"],["replace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-replace","(node_or_tags)","<p>Replace this Node with <code>node_or_tags</code>.\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment, …\n"],["replace","Racc::Rule","Racc/Rule.html#method-i-replace","(src, dest)",""],["replace_entities","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-replace_entities","()","<p>See Document@Entity+Handling for an explanation of the behavior controlled by this flag.\n<p>Returns &mdash; (Boolean …\n\n"],["replace_entities","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-replace_entities","()","<p>See Document@Entity+Handling for an explanation of the behavior controlled by this flag.\n<p>Returns &mdash; (Boolean …\n\n"],["replace_entities=","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-replace_entities-3D","(p1)","<p>See Document@Entity+Handling for an explanation of the behavior controlled by this flag.\n<p>Parameters &mdash; \n<p><code>value</code> …\n\n"],["replace_entities=","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-replace_entities-3D","(p1)","<p>See Document@Entity+Handling for an explanation of the behavior controlled by this flag.\n<p>Parameters &mdash; \n<p><code>value</code> …\n\n"],["report","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-report","(label=\"\", str=nil)",""],["report","Minitest::AbstractReporter","Minitest/AbstractReporter.html#method-i-report","()","<p>Outputs the summary of the run.\n"],["report","Minitest::StatisticsReporter","Minitest/StatisticsReporter.html#method-i-report","()","<p>Report on the tracked statistics.\n"],["report","RaccProfiler","RaccProfiler.html#method-i-report","()",""],["report_conflict","Object","Object.html#method-i-report_conflict","(states)","<p>@return [Boolean] if anything was reported\n"],["report_list","Object","Object.html#method-i-report_list","(enum, label)",""],["report_useless","Object","Object.html#method-i-report_useless","(grammar)","<p>@return [Boolean] if anything was reported\n"],["report_valgrind_errors","RubyMemcheck::TestTaskReporter","RubyMemcheck/TestTaskReporter.html#method-i-report_valgrind_errors","()",""],["reporter","Minitest","Minitest.html#method-i-reporter","","<p>Reporter object to be used for all runs.\n<p>NOTE: This accessor is only available during setup, not during …\n"],["required_attributes","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-required_attributes","()","<p>A list of required attributes for this element\n"],["resolve","Rake::FileList","Rake/FileList.html#method-i-resolve","()","<p>Resolve all the pending adds now.\n"],["resolve_args","Rake::TaskManager","Rake/TaskManager.html#method-i-resolve_args","(args)","<p>Resolve the arguments for a task/rule.  Returns a tuple of [task_name, arg_name_list, prerequisites, …\n"],["respond_to_missing?","Nokogiri::Decorators::Slop","Nokogiri/Decorators/Slop.html#method-i-respond_to_missing-3F","(name, include_private = false)",""],["result_code","Minitest::Reportable","Minitest/Reportable.html#method-i-result_code","()","<p>Returns “.”, “F”, or “E” based on the result of the run.\n"],["result_code","Minitest::Runnable","Minitest/Runnable.html#method-i-result_code","()","<p>Returns a single character string to print based on the result of the run. One of <code>&quot;.&quot;</code>, <code>&quot;F&quot;</code> …\n"],["results","StackProf","StackProf.html#method-c-results","(*args)",""],["return_type","DuckDB::Result","DuckDB/Result.html#method-i-return_type","()","<p>returns return type. The return value is one of the following symbols:\n\n<pre>:invalid, :changed_rows, :nothing, ...</pre>\n"],["reverse","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-reverse","()","<p>Returns a new NodeSet containing all the nodes in the NodeSet in reverse order\n"],["right","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-right","(*syms)",""],["root","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-root","()","<p>Get the root node for this document.\n"],["root=","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-root-3D","(p1)","<p>Set the root element on this document\n"],["round","BigDecimal","BigDecimal.html#method-i-round","(p1 = v1, p2 = v2)","<p>Round to the nearest integer (by default), returning the result as a BigDecimal if n is specified, or …\n"],["row_count","DuckDB::Result","DuckDB/Result.html#method-i-row_count","()","<p>Returns the column size of the result.\n\n<pre>DuckDB::Database.open do |db|\n  db.connect do |con|\n    r = con.query(&#39;CREATE ...</pre>\n"],["row_size","DuckDB::Result","DuckDB/Result.html#method-i-row_size","()",""],["rows_changed","DuckDB::Result","DuckDB/Result.html#method-i-rows_changed","()","<p>Returns the count of rows changed.\n\n<pre>DuckDB::Database.open do |db|\n  db.connect do |con|\n    r = con.query(&#39;CREATE ...</pre>\n"],["rr_conflict","Racc::State","Racc/State.html#method-i-rr_conflict","(high, low, ctok)",""],["rrconflict_exist?","Racc::States","Racc/States.html#method-i-rrconflict_exist-3F","()",""],["rruleid","Racc::State","Racc/State.html#method-i-rruleid","(rule)",""],["rubinius?","Minitest::Guard","Minitest/Guard.html#method-i-rubinius-3F","(platform = defined?(RUBY_ENGINE) && RUBY_ENGINE)","<p>Is this running on rubinius?\n"],["ruby","FileUtils","FileUtils.html#method-i-ruby","(*args, **options, &block)","<p>Run a Ruby interpreter with the given arguments.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ruby</span> <span class=\"ruby-string\">%{-pe &#39;$_.upcase!&#39; &lt;README}</span>\n</pre>\n"],["ruby","RubyMemcheck::TestTask","RubyMemcheck/TestTask.html#method-i-ruby","(*args, **options, &block)",""],["rule","Racc::Rule","Racc/Rule.html#method-i-rule","()",""],["rule","Racc::Sym","Racc/Sym.html#method-i-rule","()",""],["rule","Rake::DSL","Rake/DSL.html#method-i-rule","(*args, &block)","<p>Declare a rule for auto-tasks.\n<p>Example:\n\n<pre>rule &#39;.o&#39; =&gt; &#39;.c&#39; do |t|\n  sh &#39;cc&#39;, &#39;-c&#39;, &#39;-o&#39;, t.name, t.source ...</pre>\n"],["ruleid","Racc::Reduce","Racc/Reduce.html#method-i-ruleid","()",""],["run","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-run","()",""],["run","Minitest","Minitest.html#method-c-run","(args = [])","<p>This is the top-level run method. Everything starts from here. It tells each Runnable sub-class to run, …\n"],["run","Minitest::Runnable","Minitest/Runnable.html#method-c-run","(reporter, options = {})","<p>Responsible for running all runnable methods in a given class, each in its own instance. Each instance …\n"],["run","Minitest::Runnable","Minitest/Runnable.html#method-i-run","()","<p>Runs a single method. Needs to return self.\n"],["run","Minitest::Test","Minitest/Test.html#method-i-run","()","<p>Runs a single test with setup/teardown hooks.\n"],["run","Rake::Application","Rake/Application.html#method-i-run","(argv = ARGV)","<p>Run the Rake application.  The run method performs the following three steps:\n<p>Initialize the command line …\n"],["run","RubyMemcheck::RubyRunner","RubyMemcheck/RubyRunner.html#method-i-run","(*args, **options)",""],["run","StackProf","StackProf.html#method-c-run","(*args)",""],["run_benchmark","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-run_benchmark","()","<p>Run calculation.\n"],["run_comparison","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-run_comparison","()","<p>Run comparison of entries in +@full_report+.\n"],["run_comparison","Benchmark::IPS::Report","Benchmark/IPS/Report.html#method-i-run_comparison","(order)","<p>Run comparison of entries.\n"],["run_one_method","Minitest::Runnable","Minitest/Runnable.html#method-c-run_one_method","(klass, method_name, reporter)","<p>Runs a single method and has the reporter record the result. This was considered internal API but is …\n"],["run_ruby_with_valgrind","RubyMemcheck::TestTaskReporter","RubyMemcheck/TestTaskReporter.html#method-i-run_ruby_with_valgrind","(&block)",""],["run_single?","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-run_single-3F","()","<p>Return true if items are to be run one at a time. For the traditional hold, this is true @return [Boolean] …\n"],["run_task","RubyMemcheck::RSpec::RakeTask","RubyMemcheck/RSpec/RakeTask.html#method-i-run_task","(verbose)",""],["run_warmup","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-run_warmup","()","<p>Run warmup.\n"],["run_with_threads","Rake::Application","Rake/Application.html#method-i-run_with_threads","()","<p>Run the given block with the thread startup and shutdown.\n"],["runnable_methods","Minitest::Runnable","Minitest/Runnable.html#method-c-runnable_methods","()","<p>Each subclass of Runnable is responsible for overriding this method to return all runnable methods.  …\n"],["runnable_methods","Minitest::Test","Minitest/Test.html#method-c-runnable_methods","()","<p>Returns all instance methods starting with “test_”. Based on #test_order, the methods are either …\n"],["runnables","Minitest::Runnable","Minitest/Runnable.html#method-c-runnables","()","<p>Returns all subclasses of Runnable.\n"],["running","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-running","(label, warmup)",""],["running","Benchmark::IPS::Job::StreamReport","Benchmark/IPS/Job/StreamReport.html#method-i-running","(label, _warmup)",""],["running?","StackProf","StackProf.html#method-c-running-3F","()",""],["runtime","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-runtime","()",""],["safe_ln","FileUtils","FileUtils.html#method-i-safe_ln","(*args, **options)","<p>Attempt to do a normal file link, but fall back to a copy if the link fails.\n"],["safe_read","Object","Object.html#method-i-safe_read","(uri_or_path)",""],["sample","StackProf","StackProf.html#method-c-sample","()",""],["samples","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-samples","()",""],["save","StackProf::Middleware","StackProf/Middleware.html#method-c-save","()",""],["save!","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-save-21","(held_path)","<p>Save interim results. Similar to hold, but all reports are run The report label must change for each …\n"],["save_end_tag?","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-save_end_tag-3F","()","<p>Should the end tag be saved?\n"],["save_exception_mode","BigDecimal","BigDecimal.html#method-c-save_exception_mode","()","<p>Execute the provided block, but preserve the exception mode\n\n<pre>BigDecimal.save_exception_mode do\n  BigDecimal.mode(BigDecimal::EXCEPTION_OVERFLOW, ...</pre>\n"],["save_held_results","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-save_held_results","()",""],["save_limit","BigDecimal","BigDecimal.html#method-c-save_limit","()","<p>Execute the provided block, but preserve the precision limit\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>.<span class=\"ruby-identifier\">limit</span>(<span class=\"ruby-value\">100</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-constant\">BigDecimal</span>.<span class=\"ruby-identifier\">limit</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["save_rounding_mode","BigDecimal","BigDecimal.html#method-c-save_rounding_mode","()","<p>Execute the provided block, but preserve the rounding mode\n\n<pre>BigDecimal.save_rounding_mode do\n  BigDecimal.mode(BigDecimal::ROUND_MODE, ...</pre>\n"],["scale","Benchmark::IPS::Helpers","Benchmark/IPS/Helpers.html#method-c-scale","(value)",""],["scale","BigDecimal","BigDecimal.html#method-i-scale","()","<p>Returns the number of decimal digits following the decimal digits in <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;0&quot;</span>).<span class=\"ruby-identifier\">scale</span>      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["scale","DuckDB::LogicalType","DuckDB/LogicalType.html#method-i-scale","()","<p>Returns the scale of the decimal column.\n"],["scope","Rake::NameSpace","Rake/NameSpace.html#method-i-scope","()","<p>The scope of the namespace (a LinkedList)\n"],["scope_name","Rake::FileTask","Rake/FileTask.html#method-c-scope_name","(scope, task_name)","<p>Apply the scope to the task name according to the rules for this kind of task.  File based tasks ignore …\n"],["scope_name","Rake::Task","Rake/Task.html#method-c-scope_name","(scope, task_name)","<p>Apply the scope to the task name according to the rules for this kind of task.  Generic tasks will accept …\n"],["search","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-search","(*rules)","<p>Search this fragment for <code>paths</code>. <code>paths</code> must be one or more XPath or CSS queries.\n<p>For more information see …\n"],["search","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-search","(*args)","<p>Search this object for <code>paths</code>. <code>paths</code> must be one or more XPath or CSS queries:\n\n<pre>node.search(&quot;div.employee&quot;, ...</pre>\n"],["search_path","PlatformExtensionHelpers","PlatformExtensionHelpers.html#method-i-search_path","(binaries)",""],["seconds","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-seconds","()","<p>Return entry’s microseconds in seconds. @return [Float] +@microseconds+ in seconds.\n"],["section","RaccProfiler","RaccProfiler.html#method-i-section","(name)",""],["seed","Minitest","Minitest.html#method-i-seed","","<p>The random seed used for this run. This is used to srand at the start of the run and between each <code>Runnable.run</code> …\n"],["self_closing?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-self_closing-3F","()",""],["self_null?","Racc::Sym","Racc/Sym.html#method-i-self_null-3F","()",""],["separated_by","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-separated_by","(sep, sym, &block)",""],["separated_by1","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-separated_by1","(sep, sym, &block)",""],["seq","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-seq","(*list, &block)",""],["serialize","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-serialize","(options = {})","<p>Serialize Node using <code>options</code>. Save options can also be set using a block.\n<p>See also Nokogiri::XML::Node::SaveOptions …\n"],["serialize","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-serialize","()",""],["serialize","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-serialize","(*args, &block)","<p>Serialize Node using <code>options</code>. Save options can also be set using a block.\n<p>See also Nokogiri::XML::Node::SaveOptions …\n"],["serialize","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-serialize","(p1)","<p>Serialize <code>document</code> to an xml string, as specified by the <code>method</code> parameter in the Stylesheet.\n"],["serialize","Racc::Sym","Racc/Sym.html#method-i-serialize","()",""],["set","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-set","(key, value = nil, &block)",""],["set_arg_names","Rake::Task","Rake/Task.html#method-i-set_arg_names","(args)","<p>Set the names of the arguments for this task. <code>args</code> should be an array of symbols, one for each argument …\n"],["set_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-set_attribute","(name, value)",""],["set_config","DuckDB::Config","DuckDB/Config.html#method-i-set_config","(p1, p2)",""],["set_table","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-set_table","(entries, dummy, tbl, chk, ptr)",""],["setup","Minitest::Test::LifecycleHooks","Minitest/Test/LifecycleHooks.html#method-i-setup","()","<p>Runs before every test. Use this to set up before each test run.\n"],["setup","RubyMemcheck::TestTaskReporter","RubyMemcheck/TestTaskReporter.html#method-i-setup","()",""],["setup","SubThingySpec","SubThingySpec.html#method-i-setup","()",""],["setup","ThingySpec","ThingySpec.html#method-i-setup","()",""],["sh","FileUtils","FileUtils.html#method-i-sh","(*cmd, &block)","<p>Run the system command <code>cmd</code>.  If multiple arguments are given the command is run directly (without the …\n"],["sh_export_path","Object","Object.html#method-i-sh_export_path","(path)",""],["share","Benchmark::IPS::Share","Benchmark/IPS/Share.html#method-i-share","()",""],["shift","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-shift","()","<p>Returns the first element of the NodeSet and removes it.  Returns <code>nil</code> if the set is empty.\n"],["shift","Racc::ActionTable","Racc/ActionTable.html#method-i-shift","(i)",""],["shift_n","Racc::ActionTable","Racc/ActionTable.html#method-i-shift_n","()",""],["should_error_on_expect_mismatch?","Racc::States","Racc/States.html#method-i-should_error_on_expect_mismatch-3F","()",""],["should_report_srconflict?","Racc::States","Racc/States.html#method-i-should_report_srconflict-3F","()",""],["should_terminal","Racc::Sym","Racc/Sym.html#method-i-should_terminal","()",""],["should_terminal?","Racc::Sym","Racc/Sym.html#method-i-should_terminal-3F","()",""],["show_total_time!","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-show_total_time-21","()","<p>Control if the total time the job took is reported. Typically this value is not significant because it’s …\n"],["shutdown","Minitest::Parallel::Executor","Minitest/Parallel/Executor.html#method-i-shutdown","()","<p>Shuts down the pool of workers by signalling them to quit and waiting for them all to finish what they’re …\n"],["sigma","Minitest::Benchmark","Minitest/Benchmark.html#method-i-sigma","(enum, &block)","<p>Enumerates over <code>enum</code> mapping <code>block</code> if given, returning the sum of the result. Eg:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sigma</span>([<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>])    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sign","BigDecimal","BigDecimal.html#method-i-sign","()","<p>Returns the sign of the value.\n<p>Returns a positive value if &gt; 0, a negative value if &lt; 0. It behaves …\n"],["sin","BigMath","BigMath.html#method-i-sin","(x, prec)","<p>Computes the sine of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> is Infinity …\n"],["size","DuckDB::Config","DuckDB/Config.html#method-c-size","()",""],["size","DuckDB::ExtractedStatementsImpl","DuckDB/ExtractedStatementsImpl.html#method-i-size","()",""],["size","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-size","()",""],["size","Racc::Grammar","Racc/Grammar.html#method-i-size","()",""],["size","Racc::ISet","Racc/ISet.html#method-i-size","()",""],["size","Racc::Rule","Racc/Rule.html#method-i-size","()",""],["size","Racc::States","Racc/States.html#method-i-size","()",""],["skip","Minitest::Assertions","Minitest/Assertions.html#method-i-skip","(msg = nil, _ignored = nil)","<p>Skips the current run. If run in verbose-mode, the skipped run gets listed at the end of the run but …\n"],["skip?","RubyMemcheck::Stack","RubyMemcheck/Stack.html#method-i-skip-3F","()",""],["skip?","RubyMemcheck::ValgrindError","RubyMemcheck/ValgrindError.html#method-i-skip-3F","()",""],["skip_until","Minitest::Assertions","Minitest/Assertions.html#method-i-skip_until","(y, m, d, msg)","<p>Skips the current run until a given date (in the local time zone). This allows you to put some fixes …\n"],["skipped?","Minitest::Assertions","Minitest/Assertions.html#method-i-skipped-3F","()","<p>Was this testcase skipped? Meant for #teardown.\n"],["skipped?","Minitest::Reportable","Minitest/Reportable.html#method-i-skipped-3F","()","<p>Was this run skipped?\n"],["skipped?","Minitest::Runnable","Minitest/Runnable.html#method-i-skipped-3F","()","<p>Was this run skipped? See #passed? for more information.\n"],["slice","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-slice","(p1, p2 = v2)","<p>Element reference - returns the node at <code>index</code>, or returns a NodeSet containing nodes starting at <code>start</code> …\n"],["slop!","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-slop-21","()","<p>Explore a document with shortcut methods. See Nokogiri::Slop for details.\n<p>Note that any nodes that have …\n"],["slowdown","Benchmark::IPS::Stats::Bootstrap","Benchmark/IPS/Stats/Bootstrap.html#method-i-slowdown","(baseline)","<p>Determines how much slower this stat is than the baseline stat if this average is lower than the faster …\n"],["slowdown","Benchmark::IPS::Stats::SD","Benchmark/IPS/Stats/SD.html#method-i-slowdown","(baseline)","<p>Determines how much slower this stat is than the baseline stat if this average is lower than the faster …\n"],["solaris?","Object","Object.html#method-i-solaris-3F","()",""],["source","Rake::Task","Rake/Task.html#method-i-source","()","<p>First source from a rule (nil if no sources)\n"],["source?","Racc::UserAction","Racc/UserAction.html#method-i-source-3F","()",""],["source_text","Racc::UserAction","Racc/UserAction.html#method-c-source_text","(src)",""],["sources","Rake::Task","Rake/Task.html#method-i-sources","()",""],["spec_type","Minitest::Spec::DSL","Minitest/Spec/DSL.html#method-i-spec_type","(desc, *additional)","<p>Figure out the spec class to use based on a spec’s description. Eg:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec_type</span>(<span class=\"ruby-string\">&quot;BlahController&quot;</span>) <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["specify","Minitest::Spec::DSL","Minitest/Spec/DSL.html#method-i-specify","(desc = \"anonymous\", &block)",""],["speedup","Benchmark::IPS::Stats::Bootstrap","Benchmark/IPS/Stats/Bootstrap.html#method-i-speedup","(baseline)",""],["speedup","Benchmark::IPS::Stats::SD","Benchmark/IPS/Stats/SD.html#method-i-speedup","(baseline)",""],["split","BigDecimal","BigDecimal.html#method-i-split","()","<p>Splits a BigDecimal number into four parts, returned as an array of values.\n<p>The first value represents …\n"],["split_all","FileUtils","FileUtils.html#method-i-split_all","(path)","<p>Split a file path into individual directory names.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">split_all</span>(<span class=\"ruby-string\">&quot;a/b/c&quot;</span>) <span class=\"ruby-operator\">=&gt;</span>  [<span class=\"ruby-string\">&#39;a&#39;</span>, <span class=\"ruby-string\">&#39;b&#39;</span>, <span class=\"ruby-string\">&#39;c&#39;</span>]\n</pre>\n"],["sqrt","BigDecimal","BigDecimal.html#method-i-sqrt","(p1)","<p>Returns the square root of the value.\n<p>Result has at least n significant digits.\n"],["sqrt","BigMath","BigMath.html#method-i-sqrt","(x, prec)","<p>Computes the square root of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n\n<pre>BigMath.sqrt(BigDecimal(&#39;2&#39;), ...</pre>\n"],["sr_conflict","Racc::State","Racc/State.html#method-i-sr_conflict","(shift, reduce)",""],["srconflict_exist?","Racc::States","Racc/States.html#method-i-srconflict_exist-3F","()",""],["start","Minitest::AbstractReporter","Minitest/AbstractReporter.html#method-i-start","()","<p>Starts reporting on the run.\n"],["start","Minitest::Parallel::Executor","Minitest/Parallel/Executor.html#method-i-start","()","<p>Start the executor\n"],["start","StackProf","StackProf.html#method-c-start","(p1 = {})",""],["start_document","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_document","()","<p>Called when document starts parsing.\n"],["start_element","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_element","(name, attrs = [])","<p>Called at the beginning of an element.\n<p>Parameters &mdash; \n<p><code>name</code> (String) the name of the element\n<p><code>attrs</code> (Array&lt;Array&lt;String&gt;&gt;) …\n"],["start_element","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-start_element","(name, attrs = [])","<p>Handle the start_element event with <code>name</code> and <code>attrs</code>\n"],["start_element_namespace","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_element_namespace","(name, attrs = [], prefix = nil, uri = nil, ns = [])","<p>Called at the beginning of an element.\n<p>Parameters &mdash; \n<p><code>name</code> (String) is the name of the element\n<p><code>attrs</code> (Array …\n"],["start_element_namespace","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-start_element_namespace","(name, attrs = [], prefix = nil, uri = nil, ns = [])","<p>Called at the beginning of an element <code>name</code> is the element name <code>attrs</code> is a list of attributes <code>prefix</code> is …\n"],["start_running","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-start_running","()",""],["start_running","Benchmark::IPS::Job::StreamReport","Benchmark/IPS/Job/StreamReport.html#method-i-start_running","()",""],["start_symbol=","Racc::Grammar","Racc/Grammar.html#method-i-start_symbol-3D","(s)",""],["start_warming","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-start_warming","()",""],["start_warming","Benchmark::IPS::Job::StreamReport","Benchmark/IPS/Job/StreamReport.html#method-i-start_warming","()",""],["state","DuckDB::PendingResult","DuckDB/PendingResult.html#method-i-state","()","<p>returns the state of the pending result. the result can be :ready, :not_ready, :error, :no_tasks.\n<p>:ready …\n"],["state","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-state","()","<p>Get the state of the reader\n"],["state_transition_table","Racc::Grammar","Racc/Grammar.html#method-i-state_transition_table","()",""],["state_transition_table","Racc::States","Racc/States.html#method-i-state_transition_table","()",""],["statement_type","DuckDB::PreparedStatement","DuckDB/PreparedStatement.html#method-i-statement_type","()","<p>returns statement type. The return value is one of the following symbols:\n\n<pre>:invalid, :select, :insert, ...</pre>\n"],["statement_type","DuckDB::Result","DuckDB/Result.html#method-i-statement_type","()","<p>returns statement type. The return value is one of the following symbols:\n\n<pre>:invalid, :select, :insert, ...</pre>\n"],["states","Racc::Grammar","Racc/Grammar.html#method-i-states","()",""],["stddev","Benchmark::Timing","Benchmark/Timing.html#method-c-stddev","(samples, m=nil)","<p>Calculate standard deviation of given samples. @param [Array] samples Samples to calculate standard deviation. …\n"],["stop","StackProf","StackProf.html#method-c-stop","()",""],["streaming?","DuckDB::Result","DuckDB/Result.html#method-i-streaming-3F","()","<p>Returns true if the result is streaming, otherwise false.\n"],["strict","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-strict","()",""],["strict?","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-strict-3F","()",""],["string_symbol?","Racc::Sym","Racc/Sym.html#method-i-string_symbol-3F","()",""],["stub","Object","Object.html#method-i-stub","(name, val_or_callable, *block_args, **block_kwargs, &block)","<p>Add a temporary stubbed method replacing <code>name</code> for the duration of the <code>block</code>. If <code>val_or_callable</code> responds …\n"],["sub","BigDecimal","BigDecimal.html#method-i-sub","(p1, p2)","<p>Subtract the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">sub</span>(<span class=\"ruby-identifier\">b</span>,<span class=\"ruby-identifier\">n</span>)\n</pre>\n"],["sub","Object","Object.html#method-i-sub","()",""],["sub","Rake::FileList","Rake/FileList.html#method-i-sub","(pat, rep)","<p>Return a new FileList with the results of running <code>sub</code> against each element of the original list.\n<p>Example: …\n"],["sub!","Rake::FileList","Rake/FileList.html#method-i-sub-21","(pat, rep)","<p>Same as <code>sub</code> except that the original file list is modified.\n"],["sub_elements","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-sub_elements","()","<p>A list of allowed sub elements for this element.\n"],["subject","Minitest::Spec::DSL","Minitest/Spec/DSL.html#method-i-subject","(&block)","<p>Another lazy man’s accessor generator. Made even more lazy by setting the name for you to <code>subject</code> …\n"],["suite","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-suite","()","<p>Suite @return [Benchmark::IPS::MultiReport]\n"],["suite=","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-suite-3D","(suite)",""],["swap","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-swap","(node_or_tags)","<p>Swap this Node for <code>node_or_tags</code>\n<p><code>node_or_tags</code> can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet …\n"],["symbol_locations","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-symbol_locations","(locs)",""],["symbols","Racc::Grammar","Racc/Grammar.html#method-i-symbols","()",""],["system_id","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-system_id","()","<p>Get the System ID for this DTD\n"],["system_id","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-system_id","()","<p>Get the URI for a SYSTEM or PUBLIC Entity\n"],["tar_bz2_file","Rake::PackageTask","Rake/PackageTask.html#method-i-tar_bz2_file","()","<p>The package name with .tar.bz2 added\n"],["tar_gz_file","Rake::PackageTask","Rake/PackageTask.html#method-i-tar_gz_file","()","<p>The package name with .tar.gz added\n"],["tar_xz_file","Rake::PackageTask","Rake/PackageTask.html#method-i-tar_xz_file","()","<p>The package name with .tar.xz added\n"],["target_dir","Rake::PackageTask","Rake/PackageTask.html#method-i-target_dir","()","<p>target directory relative to working_dir\n"],["task","Rake::DSL","Rake/DSL.html#method-i-task","(*args, &block)","<p>Declare a basic task.  The <code>task_name</code> is always the first argument.  If the task name contains a “:” …\n"],["task_defined?","Rake::Task","Rake/Task.html#method-c-task_defined-3F","(task_name)","<p>TRUE if the task name is already defined.\n"],["tasks","Rake::NameSpace","Rake/NameSpace.html#method-i-tasks","()","<p>Return the list of tasks defined in this and nested namespaces.\n"],["tasks","Rake::Task","Rake/Task.html#method-c-tasks","()","<p>List of all defined tasks.\n"],["tasks","Rake::TaskManager","Rake/TaskManager.html#method-i-tasks","()","<p>List of all defined tasks in this application.\n"],["tasks_in_scope","Rake::TaskManager","Rake/TaskManager.html#method-i-tasks_in_scope","(scope)","<p>List of all the tasks defined in the given scope (and its sub-scopes).\n"],["teardown","Minitest::Test::LifecycleHooks","Minitest/Test/LifecycleHooks.html#method-i-teardown","()","<p>Runs after every test. Use this to clean up after each test run.\n"],["template_extconf","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_extconf","(extension_name)",""],["template_rake_extension","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_rake_extension","(extension_name, gem_spec = nil)",""],["template_rake_extension_cross_compile","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_rake_extension_cross_compile","(extension_name, gem_spec = nil)",""],["template_rake_extension_java_compile","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_rake_extension_java_compile","(extension_name, gem_spec = nil)",""],["template_rake_extension_multi_cross_compile","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_rake_extension_multi_cross_compile","(extension_name)",""],["template_rake_extension_with_platform","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_rake_extension_with_platform","(extension_name, platform)",""],["template_rake_gemspec","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_rake_gemspec","(gem_name)",""],["template_rakefile","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_rakefile","()",""],["template_source_c","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_source_c","(extension_name)",""],["template_source_h","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_source_h","()",""],["template_source_java","FileTemplateHelpers","FileTemplateHelpers.html#method-i-template_source_java","(extension_name)",""],["term=","Racc::Sym","Racc/Sym.html#method-i-term-3D","(t)",""],["terminal?","Racc::Sym","Racc/Sym.html#method-i-terminal-3F","()",""],["terminals","Racc::SymbolTable","Racc/SymbolTable.html#method-i-terminals","(&block)",""],["test_files=","Rake::TestTask","Rake/TestTask.html#method-i-test_files-3D","(list)","<p>Explicitly define the list of test files to be included in a test.  <code>list</code> is expected to be an array of …\n"],["test_order","Minitest::Runnable","Minitest/Runnable.html#method-c-test_order","()","<p>Defines the order to run tests (:random by default). Override this or use a convenience method to change …\n"],["test_should_do_the_first_thing","ThingySpec","ThingySpec.html#method-i-test_should_do_the_first_thing","()",""],["test_should_do_the_second_thing","SubThingySpec","SubThingySpec.html#method-i-test_should_do_the_second_thing","()",""],["text","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-text","(string)","<p>Create a Text Node with content of <code>string</code>\n"],["text","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-text","()",""],["text","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-text","()",""],["text?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-text-3F","()","<p>Returns true if this is a Text node\n"],["tgz_file","Rake::PackageTask","Rake/PackageTask.html#method-i-tgz_file","()","<p>The package name with .tgz added\n"],["things_to_diff","Minitest::Assertions","Minitest/Assertions.html#method-i-things_to_diff","(exp, act)","<p>Returns things to diff [expect, butwas], or [nil, nil] if nothing to diff.\n<p>Criterion:\n<p>Strings include newlines …\n"],["time_us","Benchmark::IPS::Job","Benchmark/IPS/Job.html#method-i-time_us","(before, after)","<p>Calculate the time difference of before and after in microseconds. @param [Time] before time. @param …\n"],["time_us","Benchmark::Timing","Benchmark/Timing.html#method-c-time_us","(before, after)","<p>Return the number of microseconds between the 2 moments\n"],["timestamp","Rake::FileCreationTask","Rake/FileCreationTask.html#method-i-timestamp","()","<p>Time stamp for file creation task.  This time stamp is earlier than any other time stamp.\n"],["timestamp","Rake::FileTask","Rake/FileTask.html#method-i-timestamp","()","<p>Time stamp for file task.\n"],["timestamp","Rake::Task","Rake/Task.html#method-i-timestamp","()","<p>Timestamp for this task.  Basic tasks return the current time for their time stamp.  Other tasks can …\n"],["title","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-title","()","<p>Get the title string of this document.  Return nil if there is no title tag.\n"],["title=","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-title-3D","(text)","<p>Set the title string of this document.\n<p>If a title element is already present, its content is replaced …\n"],["to_a","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_a","()","<p>Return this list as an Array\n"],["to_a","Racc::ISet","Racc/ISet.html#method-i-to_a","()",""],["to_a","Rake::FileList","Rake/FileList.html#method-i-to_a","()","<p>Return the internal array object.\n"],["to_a","Rake::TaskArguments","Rake/TaskArguments.html#method-i-to_a","()","<p>Retrieve the complete array of sequential values\n"],["to_ary","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_ary","()",""],["to_ary","Rake::FileList","Rake/FileList.html#method-i-to_ary","()","<p>Return the internal array object.\n"],["to_d","BigDecimal","BigDecimal.html#method-i-to_d","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;3.14&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">to_d</span>                       <span class=\"ruby-comment\"># =&gt; 0.314e1</span>\n</pre>\n"],["to_d","Complex","Complex.html#method-i-to_d","(*args)","<p>Returns the value as a BigDecimal.\n<p>The <code>precision</code> parameter is required for a rational complex number. …\n"],["to_d","Float","Float.html#method-i-to_d","(precision=0)","<p>Returns the value of <code>float</code> as a BigDecimal. The <code>precision</code> parameter is used to determine the number of …\n"],["to_d","Integer","Integer.html#method-i-to_d","()","<p>Returns the value of <code>int</code> as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-value\">42</span>.<span class=\"ruby-identifier\">to_d</span>   <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["to_d","NilClass","NilClass.html#method-i-to_d","()","<p>Returns nil represented as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_d</span>   <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["to_d","Rational","Rational.html#method-i-to_d","(precision)","<p>Returns the value as a BigDecimal.\n<p>The required <code>precision</code> parameter is used to determine the number of …\n"],["to_d","String","String.html#method-i-to_d","()","<p>Returns the result of interpreting leading characters in <code>str</code> as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_digits","BigDecimal","BigDecimal.html#method-i-to_digits","()","<p>Converts a BigDecimal to a String of the form “nnnnnn.mmm”. This method is deprecated; use …\n"],["to_f","BigDecimal","BigDecimal.html#method-i-to_f","()","<p>Returns a new Float object having approximately the same value as the BigDecimal number. Normal accuracy …\n"],["to_hash","Rake::TaskArguments","Rake/TaskArguments.html#method-i-to_hash","()","<p>Returns a Hash of arguments and their values\n"],["to_html","Nokogiri::HTML4::Builder","Nokogiri/HTML4/Builder.html#method-i-to_html","()","<p>Convert the builder to HTML\n"],["to_html","Nokogiri::HTML5::Builder","Nokogiri/HTML5/Builder.html#method-i-to_html","()","<p>Convert the builder to HTML\n"],["to_html","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_html","(*args)","<p>Convert this DocumentFragment to html See Nokogiri::XML::NodeSet#to_html\n"],["to_html","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_html","(options = {})","<p>Serialize this Node to HTML\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_html</span>\n</pre>\n<p>See Node#write_to for a list of <code>options</code>.  For formatted output, …\n"],["to_html","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_html","(*args)","<p>Convert this NodeSet to HTML\n"],["to_i","BigDecimal","BigDecimal.html#method-i-to_i","()","<p>Returns the value as an Integer.\n<p>If the BigDecimal is infinity or NaN, raises FloatDomainError.\n"],["to_int","BigDecimal","BigDecimal.html#method-i-to_int","()","<p>Returns the value as an Integer.\n<p>If the BigDecimal is infinity or NaN, raises FloatDomainError.\n"],["to_interval","DuckDB::Interval","DuckDB/Interval.html#method-c-to_interval","(value)","<p>Convert the value to the Interval object. The value can be String or Interval object. If the value is …\n"],["to_java","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-to_java","","<p>⚠ This method is only available when running JRuby.\n<p>Returns the underlying Java DOM document object for …\n"],["to_r","BigDecimal","BigDecimal.html#method-i-to_r","()","<p>Converts a BigDecimal to a Rational.\n"],["to_s","Benchmark::IPS::Report::Entry","Benchmark/IPS/Report/Entry.html#method-i-to_s","()","<p>Return string representation of Entry object. @return [String] Header and body.\n"],["to_s","BigDecimal","BigDecimal.html#method-i-to_s","(p1 = v1)","<p>Converts the value to a string.\n<p>The default format looks like  0.xxxxEnn.\n<p>The optional parameter s consists …\n"],["to_s","Nokogiri::HTML4::ElementDescription","Nokogiri/HTML4/ElementDescription.html#method-i-to_s","()","<p>Convert this description to a string\n"],["to_s","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_s","()","<p>Convert this DocumentFragment to a string\n"],["to_s","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_s","()","<p>Turn this node in to a string.  If the document is HTML, this method returns html.  If the document is …\n"],["to_s","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_s","()","<p>Convert this NodeSet to a string.\n"],["to_s","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-to_s","()",""],["to_s","Nokogiri::XML::XPath::SyntaxError","Nokogiri/XML/XPath/SyntaxError.html#method-i-to_s","()",""],["to_s","Racc::Grammar","Racc/Grammar.html#method-i-to_s","()",""],["to_s","Racc::ISet","Racc/ISet.html#method-i-to_s","()",""],["to_s","Racc::LocationPointer","Racc/LocationPointer.html#method-i-to_s","()",""],["to_s","Racc::RRconflict","Racc/RRconflict.html#method-i-to_s","()",""],["to_s","Racc::Rule","Racc/Rule.html#method-i-to_s","()",""],["to_s","Racc::SRconflict","Racc/SRconflict.html#method-i-to_s","()",""],["to_s","Racc::SourceText","Racc/SourceText.html#method-i-to_s","()",""],["to_s","Racc::State","Racc/State.html#method-i-to_s","()",""],["to_s","Racc::States","Racc/States.html#method-i-to_s","()",""],["to_s","Racc::Sym","Racc/Sym.html#method-i-to_s","()",""],["to_s","Rake::FileList","Rake/FileList.html#method-i-to_s","()","<p>Convert a FileList to a string by joining all elements with a space.\n"],["to_s","Rake::InvocationChain","Rake/InvocationChain.html#method-i-to_s","()","<p>Convert to string, ie: TOP =&gt; invocation =&gt; invocation\n"],["to_s","Rake::InvocationChain::EmptyInvocationChain","Rake/InvocationChain/EmptyInvocationChain.html#method-i-to_s","()",""],["to_s","Rake::LateTime","Rake/LateTime.html#method-i-to_s","()",""],["to_s","Rake::LinkedList","Rake/LinkedList.html#method-i-to_s","()","<p>Convert to string: LL(item, item…)\n"],["to_s","Rake::Task","Rake/Task.html#method-i-to_s","()","<p>Return task name\n"],["to_s","RubyMemcheck::Frame","RubyMemcheck/Frame.html#method-i-to_s","()",""],["to_s","RubyMemcheck::Suppression","RubyMemcheck/Suppression.html#method-i-to_s","()",""],["to_s","RubyMemcheck::ValgrindError","RubyMemcheck/ValgrindError.html#method-i-to_s","()",""],["to_str","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_str","()",""],["to_xhtml","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_xhtml","(*args)","<p>Convert this DocumentFragment to xhtml See Nokogiri::XML::NodeSet#to_xhtml\n"],["to_xhtml","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_xhtml","(options = {})","<p>Serialize this Node to XHTML using <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_xhtml</span>(<span class=\"ruby-value\">indent:</span> <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">encoding:</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>)\n</pre>\n<p>See Node#write_to …\n"],["to_xhtml","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_xhtml","(*args)","<p>Convert this NodeSet to XHTML\n"],["to_xml","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-to_xml","(*args)","<p>Convert this Builder object to XML\n"],["to_xml","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_xml","(*args)","<p>Convert this DocumentFragment to xml See Nokogiri::XML::NodeSet#to_xml\n"],["to_xml","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_xml","(options = {})","<p>Serialize this Node to XML using <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_xml</span>(<span class=\"ruby-value\">indent:</span> <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">encoding:</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>)\n</pre>\n<p>See Node#write_to for …\n"],["to_xml","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_xml","(*args)","<p>Convert this NodeSet to XML\n"],["token_table","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-token_table","(grammar)",""],["token_to_str","Racc::Parser","Racc/Parser.html#method-i-token_to_str","(t)","<p>Convert internal ID of token symbol to the string.\n"],["token_value_table","Racc::StateTransitionTable","Racc/StateTransitionTable.html#method-i-token_value_table","()",""],["top_level","Rake::Application","Rake/Application.html#method-i-top_level","()","<p>Run the top level tasks of a Rake application.\n"],["transform","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-transform","(p1, p2 = v2)","<p>Transform an XML::Document as defined by an XSLT::Stylesheet.\n<p>Parameters &mdash; \n<p><code>document</code> (Nokogiri::XML::Document …\n"],["traverse","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-traverse","(&block)","<p>Yields self and all children to <code>block</code> recursively.\n"],["truffle?","Object","Object.html#method-i-truffle-3F","()",""],["truncate","BigDecimal","BigDecimal.html#method-i-truncate","(p1 = v1)","<p>Truncate to the nearest integer (by default), returning the result as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;3.14159&#39;</span>).<span class=\"ruby-identifier\">truncate</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["try_link_iconv","Object","Object.html#method-i-try_link_iconv","(using = nil)",""],["try_package_configuration","Object","Object.html#method-i-try_package_configuration","(pc)","<p>wrapper around MakeMakefil#pkg_config and the PKGConfig gem\n"],["type","DuckDB::Column","DuckDB/Column.html#method-i-type","()","<p>returns column type symbol ‘:unknown` means that the column type is unknown/unsupported by ruby-duckdb. …\n"],["type","DuckDB::LogicalType","DuckDB/LogicalType.html#method-i-type","()","<p>returns logical type’s type symbol ‘:unknown` means that the logical type’s type is unknown/unsupported …\n"],["type","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-type","()","<p>The type for this document\n"],["type","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-type","()","<p>Returns &mdash; The content element’s <code>type</code>. Possible values are <code>PCDATA</code>, <code>ELEMENT</code>, <code>SEQ</code>, or <code>OR</code>.\n\n"],["type","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-type","()",""],["unix?","Object","Object.html#method-i-unix-3F","()",""],["unlink","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-unlink","()","<p>Unlink this node from its current context.\n"],["unlink","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-unlink","()","<p>Unlink this NodeSet and all Node objects it contains from their current context.\n"],["unpacked_gem_dir_platform","Object","Object.html#method-i-unpacked_gem_dir_platform","(folder, name, version, platform = nil)",""],["update","Racc::ISet","Racc/ISet.html#method-i-update","(other)",""],["update_a","Racc::ISet","Racc/ISet.html#method-i-update_a","(a)",""],["url","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-url","()","<p>Get the url name for this document.\n"],["use_postponed_job!","StackProf","StackProf.html#method-c-use_postponed_job-21","()",""],["useless=","Racc::Rule","Racc/Rule.html#method-i-useless-3D","(u)",""],["useless=","Racc::Sym","Racc/Sym.html#method-i-useless-3D","(f)",""],["useless?","Racc::Rule","Racc/Rule.html#method-i-useless-3F","()",""],["useless?","Racc::Sym","Racc/Sym.html#method-i-useless-3F","()",""],["useless_nonterminal_exist?","Racc::Grammar","Racc/Grammar.html#method-i-useless_nonterminal_exist-3F","()",""],["useless_rule_exist?","Racc::Grammar","Racc/Grammar.html#method-i-useless_rule_exist-3F","()",""],["valid?","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-i-valid-3F","(input)","<p>Validate <code>input</code> and return a Boolean indicating whether the document is valid\n<p>Parameters &mdash; \n<p><code>input</code> (Nokogiri::XML::Document …\n\n"],["validate","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-validate","(p1)","<p>Validate <code>document</code> returning a list of errors\n"],["validate","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-validate","()","<p>Validate this Document against its DTD.  Returns a list of errors on the document or <code>nil</code> when there is …\n"],["validate","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-i-validate","(input)","<p>Validate <code>input</code> and return any errors that are found.\n<p>Parameters &mdash; \n<p><code>input</code> (Nokogiri::XML::Document | String …\n\n"],["validation_for_fit","Minitest::Benchmark","Minitest/Benchmark.html#method-i-validation_for_fit","(msg, threshold)","<p>Returns a proc that calls the specified fit method and asserts that the error is within a tolerable threshold. …\n"],["value","Minitest::Spec::DSL::InstanceMethods","Minitest/Spec/DSL/InstanceMethods.html#method-i-value","(value = nil, &block)",""],["value","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-value","()","<p>Get the text value of the node if present. Returns a utf-8 encoded string.\n"],["value=","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-value-3D","(p1)","<p>Set the value for this Attr to <code>content</code>. Use <code>nil</code> to remove the value (e.g., a HTML boolean attribute). …\n"],["value?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-value-3F","(value)","<p>Does this Node’s attributes include &lt;value&gt;\n"],["value?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-value-3F","()","<p>Does this node have a text value?\n"],["values","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-values","()","<p>Get the attribute values for this Node.\n"],["values_at","Rake::TaskArguments","Rake/TaskArguments.html#method-i-values_at","(*keys)","<p>Extracts the argument values at <code>keys</code>\n"],["variance","Benchmark::Timing","Benchmark/Timing.html#method-c-variance","(samples, m=nil)","<p>Calculate variance of given samples. @param [Float] m Optional mean (Expected value). @return [Float] …\n"],["verbose","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-verbose","(value=nil)","<p>Get/set the verbose flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["verbose","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-verbose","(value=nil)","<p>Get/set the verbose flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["verify","Minitest::Mock","Minitest/Mock.html#method-i-verify","()","<p>Verify that all methods were called as expected. Raises <code>MockExpectationError</code> if the mock object was not …\n"],["version","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-version","()","<p>Get the XML version for this Document\n"],["version","StackProf::Report","StackProf/Report.html#method-i-version","()",""],["walk_method","StackProf::Report","StackProf/Report.html#method-i-walk_method","(name)","<p>Walk up and down the stack from a given starting point (name).  Loops until ‘:exit` is selected\n"],["warming","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-warming","(label, warmup)",""],["warming","Benchmark::IPS::Job::StreamReport","Benchmark/IPS/Job/StreamReport.html#method-i-warming","(label, _warmup)",""],["warmup_stats","Benchmark::IPS::Job::MultiReport","Benchmark/IPS/Job/MultiReport.html#method-i-warmup_stats","(warmup_time_us, timing)",""],["warmup_stats","Benchmark::IPS::Job::StreamReport","Benchmark/IPS/Job/StreamReport.html#method-i-warmup_stats","(_warmup_time_us, timing)",""],["warning","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-warning","(string)","<p>Called on document warnings\n<p>Parameters &mdash; \n<p><code>string</code> contains the warning\n\n"],["warning","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-warning","(msg)",""],["warning?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-warning-3F","()","<p>return true if this is a warning\n"],["when_writing","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-when_writing","(msg=nil)","<p>Use this function to prevent potentially destructive ruby code from running when the :nowrite flag is …\n"],["when_writing","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-when_writing","(msg=nil)","<p>Use this function to prevent potentially destructive ruby code from running when the :nowrite flag is …\n"],["width","DuckDB::LogicalType","DuckDB/LogicalType.html#method-i-width","()","<p>Returns the width of the decimal column.\n"],["windows?","Minitest::Guard","Minitest/Guard.html#method-i-windows-3F","(platform = RUBY_PLATFORM)","<p>Is this running on windows?\n"],["windows?","Object","Object.html#method-i-windows-3F","()",""],["with","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-c-with","(root, &block)","<p>Create a builder with an existing root object.  This is for use when you have an existing document that …\n"],["with_application","Rake","Rake.html#method-c-with_application","(block_application = Rake::Application.new)","<p>Make <code>block_application</code> the default rake application inside a block so you can load rakefiles into a different …\n"],["with_defaults","Rake::TaskArguments","Rake/TaskArguments.html#method-i-with_defaults","(defaults)","<p>Specify a hash of default values for task arguments. Use the defaults only if there is no specific value …\n"],["wont_be","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_be","","<p>See Minitest::Assertions#refute_operator\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">n</span>).<span class=\"ruby-identifier\">wont_be</span> <span class=\"ruby-value\">:&lt;=</span>, <span class=\"ruby-value\">42</span>\n</pre>\n<p>This can also do predicates:\n"],["wont_be_close_to","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_be_close_to","","<p>See Minitest::Assertions#refute_in_delta\n\n<pre>_(n).wont_be_close_to m [, delta]</pre>\n"],["wont_be_empty","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_be_empty","","<p>See Minitest::Assertions#refute_empty\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">collection</span>).<span class=\"ruby-identifier\">wont_be_empty</span>\n</pre>\n"],["wont_be_instance_of","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_be_instance_of","","<p>See Minitest::Assertions#refute_instance_of\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">obj</span>).<span class=\"ruby-identifier\">wont_be_instance_of</span> <span class=\"ruby-identifier\">klass</span>\n</pre>\n"],["wont_be_kind_of","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_be_kind_of","","<p>See Minitest::Assertions#refute_kind_of\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">obj</span>).<span class=\"ruby-identifier\">wont_be_kind_of</span> <span class=\"ruby-identifier\">mod</span>\n</pre>\n"],["wont_be_nil","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_be_nil","","<p>See Minitest::Assertions#refute_nil\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">obj</span>).<span class=\"ruby-identifier\">wont_be_nil</span>\n</pre>\n"],["wont_be_same_as","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_be_same_as","","<p>See Minitest::Assertions#refute_same\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">a</span>).<span class=\"ruby-identifier\">wont_be_same_as</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["wont_be_within_epsilon","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_be_within_epsilon","","<p>See Minitest::Assertions#refute_in_epsilon\n\n<pre>_(n).wont_be_within_epsilon m [, epsilon]</pre>\n"],["wont_equal","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_equal","","<p>See Minitest::Assertions#refute_equal\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">a</span>).<span class=\"ruby-identifier\">wont_equal</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["wont_include","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_include","","<p>See Minitest::Assertions#refute_includes\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">collection</span>).<span class=\"ruby-identifier\">wont_include</span> <span class=\"ruby-identifier\">obj</span>\n</pre>\n"],["wont_match","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_match","","<p>See Minitest::Assertions#refute_match\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">a</span>).<span class=\"ruby-identifier\">wont_match</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["wont_pattern_match","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_pattern_match","","<p>See Minitest::Assertions#refute_pattern_match\n\n<pre>_ { ... }.wont_pattern_match [...]</pre>\n"],["wont_respond_to","Minitest::Expectations","Minitest/Expectations.html#method-i-wont_respond_to","","<p>See Minitest::Assertions#refute_respond_to\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>(<span class=\"ruby-identifier\">obj</span>).<span class=\"ruby-identifier\">wont_respond_to</span> <span class=\"ruby-identifier\">msg</span>\n</pre>\n"],["working_dir","Rake::PackageTask","Rake/PackageTask.html#method-i-working_dir","()",""],["wrap","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-wrap","","<p>⚠ This method is only available when running JRuby.\n<p>Create a Document using an existing Java DOM document …\n"],["wrap","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-wrap","(node_or_tags)","<p>Wrap this Node with the node parsed from <code>markup</code> or a dup of the <code>node</code>.\n<p>Parameters &mdash; \n<p><strong>markup</strong> (String) Markup …\n"],["wrap","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-wrap","(node_or_tags)","<p>Wrap each member of this NodeSet with the node parsed from <code>markup</code> or a dup of the <code>node</code>.\n<p>Parameters &mdash; \n<p><strong>markup</strong> …\n"],["write","Nokogiri::HTML4::SAX::PushParser","Nokogiri/HTML4/SAX/PushParser.html#method-i-write","(chunk, last_chunk = false)","<p>Write a <code>chunk</code> of HTML to the PushParser.  Any callback methods that can be called will be called immediately. …\n"],["write","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-write","(chunk, last_chunk = false)","<p>Write a <code>chunk</code> of XML to the PushParser.  Any callback methods that can be called will be called immediately. …\n"],["write_html_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_html_to","(io, options = {})","<p>Write Node as HTML to <code>io</code> with <code>options</code>\n<p>See Node#write_to for a list of <code>options</code>\n"],["write_log","Racc::Grammar","Racc/Grammar.html#method-i-write_log","(path)",""],["write_to","Nokogiri::HTML5::Node","Nokogiri/HTML5/Node.html#method-i-write_to","(io, *options)",""],["write_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_to","(io, *options)","<p>Serialize this node or document to <code>io</code>.\n<p>Parameters &mdash; \n<p><code>io</code> (IO) An IO-like object to which the serialized content …\n"],["write_xhtml_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_xhtml_to","(io, options = {})","<p>Write Node as XHTML to <code>io</code> with <code>options</code>\n<p>See Node#write_to for a list of <code>options</code>\n"],["write_xml_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_xml_to","(io, options = {})","<p>Write Node as XML to <code>io</code> with <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">write_xml_to</span> <span class=\"ruby-identifier\">io</span>, <span class=\"ruby-value\">:encoding</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>\n</pre>\n<p>See Node#write_to for a …\n"],["xml?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-xml-3F","()","<p>Returns true if this is an XML::Document node\n"],["xml_version","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-xml_version","()","<p>Get the XML version of the document being read\n"],["xmldecl","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML declaration is parsed.\n<p>Parameters &mdash; \n<p><code>version</code> (String) the version attribute\n<p><code>encoding</code> ( …\n"],["xpath","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-xpath","(*args)","<p>Search this node set for XPath <code>paths</code>. <code>paths</code> must be one or more XPath queries.\n<p>For more information see …\n"],["xpath","Nokogiri::XML::Searchable","Nokogiri/XML/Searchable.html#method-i-xpath","(*args)","<p>Search this node for XPath <code>paths</code>. <code>paths</code> must be one or more XPath queries.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">xpath</span>(<span class=\"ruby-string\">&#39;.//title&#39;</span>)\n</pre>\n<p>A hash …\n"],["xpath_doctype","Nokogiri::HTML4::Document","Nokogiri/HTML4/Document.html#method-i-xpath_doctype","()","<p>Returns &mdash; The document type which determines CSS-to-XPath translation.\n\n<p>See XPathVisitor for more information. …\n"],["xpath_doctype","Nokogiri::HTML5::Document","Nokogiri/HTML5/Document.html#method-i-xpath_doctype","()","<p>Returns &mdash; The document type which determines CSS-to-XPath translation.\n\n<p>See CSS::XPathVisitor for more information. …\n"],["xpath_doctype","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-xpath_doctype","()","<p>Returns &mdash; The document type which determines CSS-to-XPath translation.\n\n<p>See XPathVisitor for more information. …\n"],["xpath_for","Nokogiri::CSS","Nokogiri/CSS.html#method-c-xpath_for","( selector, options = nil, prefix: options&.delete(:prefix), visitor: options&.delete(:visitor), ns: options&.delete(:ns), cache: true )","<p>Translate a CSS selector list to the equivalent XPath expressions.\n<p>💡 Note that translated queries are …\n"],["yyaccept","Racc::Parser","Racc/Parser.html#method-i-yyaccept","()","<p>Exit parser. Return value is <code>Symbol_Value_Stack[0]</code>.\n"],["yyerrok","Racc::Parser","Racc/Parser.html#method-i-yyerrok","()","<p>Leave error recovering mode.\n"],["yyerror","Racc::Parser","Racc/Parser.html#method-i-yyerror","()","<p>Enter error recovering mode. This method does not call #on_error.\n"],["yylex","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-yylex","(&block)",""],["zero?","BigDecimal","BigDecimal.html#method-i-zero-3F","()","<p>Returns True if the value is zero.\n"],["zip_file","Rake::PackageTask","Rake/PackageTask.html#method-i-zip_file","()","<p>The package name with .zip added\n"],["zlib_source","Object","Object.html#method-i-zlib_source","(version_string)",""],["|","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-7C","(p1)","<p>Returns a new set built by merging the set and the elements of the given set.\n"],["|","Racc::Rule","Racc/Rule.html#method-i-7C","(x)",""],["|","Racc::Sym","Racc/Sym.html#method-i-7C","(x)",""],["|","Rake::Task","Rake/Task.html#method-i-7C","(deps)","<p>Add order only dependencies.\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>Changelog\n<p>All notable changes to this project will be documented in this file.\n<p>Unreleased\n"],["CONTRIBUTION","","CONTRIBUTION_md.html","","<p>Contribution Guide\n<p>Environment setup\n<p>With docker\n"],["Dockerfile","","Dockerfile.html","","<p>ARG RUBY_VERSION=3.3.6 FROM ruby:${RUBY_VERSION}\n<p>ARG DUCKDB_VERSION=1.1.3 ARG VALGRIND_VERSION=3.21.0 …\n"],["Gemfile","","Gemfile.html","","<p>source ‘rubygems.org’\n<p># Specify your gem’s dependencies in duckdb.gemspec gemspec\n<p>if /(linux|darwin)/ …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  duckdb (1.1.3.1)\n    bigdecimal (&gt;= 3.1.4)</pre>\n<p>GEM\n"],["LICENSE","","LICENSE.html","","<p>MIT License\n<p>Copyright © 2019 suketa\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>ruby-duckdb\n<p><img src=\"https://github.com/suketa/ruby-duckdb/workflows/Ubuntu/badge.svg\">\n<img src=\"https://github.com/suketa/ruby-duckdb/workflows/MacOS/badge.svg\"> ...\n"],["Rakefile","","Rakefile.html","","<p>require ‘bundler/gem_tasks’ require ‘rake/testtask’ ruby_memcheck_avaiable = begin\n\n<pre class=\"ruby\">  <span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["setup","","bin/setup.html","","<p>#!/usr/bin/env bash set -euo pipefail IFS=$‘nt’ set -vx\n<p>bundle install\n<p># Do any other automated …\n"],["getduckdb.sh","","getduckdb_sh.html","","<p>#!/bin/sh\n<p>MACHINE=‘uname -m`\n<p>case “$MACHINE” in\n"],["stackprof-flamegraph.pl","","vendor/bundle/ruby/3_4_0/bin/stackprof-flamegraph_pl.html","","<p>#!/usr/bin/env ruby # # This file was generated by RubyGems. # # The application ‘stackprof’ …\n"],["stackprof-gprof2dot.py","","vendor/bundle/ruby/3_4_0/bin/stackprof-gprof2dot_py.html","","<p>#!/usr/bin/env ruby # # This file was generated by RubyGems. # # The application ‘stackprof’ …\n"],["gem.build_complete","","vendor/bundle/ruby/3_4_0/extensions/x86_64-linux/3_4_0/bigdecimal-3_1_8/gem_build_complete.html","",""],["gem_make.out","","vendor/bundle/ruby/3_4_0/extensions/x86_64-linux/3_4_0/bigdecimal-3_1_8/gem_make_out.html","","<p>current directory: /home/runner/work/ruby-duckdb/ruby-duckdb/vendor/bundle/ruby/3.4.0/gems/bigdecimal-3.1.8/ext/bigdecimal …\n"],["mkmf.log","","vendor/bundle/ruby/3_4_0/extensions/x86_64-linux/3_4_0/bigdecimal-3_1_8/mkmf_log.html","","<p>have_builtin_func: checking for __builtin_clz()… ——————– yes\n<p>LD_LIBRARY_PATH=.:/opt/hostedtoolcache/Ruby/3.4.1/x64/lib …\n"],["gem.build_complete","","vendor/bundle/ruby/3_4_0/extensions/x86_64-linux/3_4_0/racc-1_8_1/gem_build_complete.html","",""],["gem_make.out","","vendor/bundle/ruby/3_4_0/extensions/x86_64-linux/3_4_0/racc-1_8_1/gem_make_out.html","","<p>current directory: /home/runner/work/ruby-duckdb/ruby-duckdb/vendor/bundle/ruby/3.4.0/gems/racc-1.8.1/ext/racc/cparse …\n"],["gem.build_complete","","vendor/bundle/ruby/3_4_0/extensions/x86_64-linux/3_4_0/stackprof-0_2_26/gem_build_complete.html","",""],["gem_make.out","","vendor/bundle/ruby/3_4_0/extensions/x86_64-linux/3_4_0/stackprof-0_2_26/gem_make_out.html","","<p>current directory: /home/runner/work/ruby-duckdb/ruby-duckdb/vendor/bundle/ruby/3.4.0/gems/stackprof-0.2.26/ext/stackprof …\n"],["mkmf.log","","vendor/bundle/ruby/3_4_0/extensions/x86_64-linux/3_4_0/stackprof-0_2_26/mkmf_log.html","","<p>have_func: checking for rb_postponed_job_register_one()… ——————– yes\n<p>LD_LIBRARY_PATH=.:/opt/hostedtoolcache/Ruby/3.4.1/x64/lib …\n"],["History","","vendor/bundle/ruby/3_4_0/gems/benchmark-ips-2_14_0/History_md.html","","<p>2.14.0 / 2024-09-08\n<p>Feature\n<p>Adds Benchmark::IPS.quick_compare.\n"],["LICENSE","","vendor/bundle/ruby/3_4_0/gems/benchmark-ips-2_14_0/LICENSE.html","","<p>Copyright © 2015 Evan Phoenix\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","vendor/bundle/ruby/3_4_0/gems/benchmark-ips-2_14_0/README_md.html","","<p>benchmark-ips\n<p>rdoc :: rubydoc.info/gems/benchmark-ips\n<p>home :: github.com/evanphx/benchmark-ips\n"],["LICENSE","","vendor/bundle/ruby/3_4_0/gems/bigdecimal-3_1_8/LICENSE.html","","<p>Ruby is copyrighted free software by Yukihiro Matsumoto &lt;matz@netlab.jp&gt;. You can redistribute …\n"],["Makefile","","vendor/bundle/ruby/3_4_0/gems/bigdecimal-3_1_8/ext/bigdecimal/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don’t work. V = 0 V0 = $(V:0=) Q1 = $(V:1=) …\n"],["History","","vendor/bundle/ruby/3_4_0/gems/minitest-5_25_2/History_rdoc.html","","<p>5.25.2 / 2024-11-21\n<p>4 bug fixes:\n<p>Include class name in spec name. (thomasmarshall)\n"],["Manifest","","vendor/bundle/ruby/3_4_0/gems/minitest-5_25_2/Manifest_txt.html","","<p>.autotest History.rdoc Manifest.txt README.rdoc Rakefile design_rationale.rb lib/hoe/minitest.rb lib/minitest.rb …\n"],["README","","vendor/bundle/ruby/3_4_0/gems/minitest-5_25_2/README_rdoc.html","","<p>minitest/{test,spec,mock,benchmark}\n<p>home  &mdash; github.com/minitest/minitest\n<p>bugs  &mdash; github.com/minitest/minitest/issues …\n"],["Rakefile","","vendor/bundle/ruby/3_4_0/gems/minitest-5_25_2/Rakefile.html","","<p>require “rubygems” require “hoe” $:.unshift “lib” # to pick up lib/minitest/test_task.rb …\n"],["Gemfile","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org”\n<p>gemspec\n"],["LICENSE-DEPENDENCIES","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/LICENSE-DEPENDENCIES_md.html","","<p>Vendored Dependency Licenses\n<p>Nokogiri ships with some third party dependencies, which are listed here …\n"],["LICENSE","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/LICENSE_md.html","","<p>The MIT License\n<p>Copyright 2008 – 2023 by Mike Dalessio, Aaron Patterson, Yoko Harada, Akinori MUSHA, …\n"],["README","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/README_md.html","","<p>Nokogiri\n<p>Nokogiri (鋸) makes it easy and painless to work with XML and HTML from Ruby. It provides a sensible, …\n"],["depend","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/ext/nokogiri/depend.html","","<p># DO NOT DELETE\n<p>gumbo.o: $(srcdir)/nokogiri.h html_document.o: $(srcdir)/nokogiri.h html_element_description.o …\n"],["CHANGES","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/gumbo-parser/CHANGES_md.html","","<p>Gumbo 0.10.1 (2015-04-30)\n<p>Same as 0.10.0, but with the version number bumped because the last version-number …\n"],["Makefile","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/gumbo-parser/Makefile.html","","<p>.PHONY: all clean check coverage\n<p>gumbo_objs := $(patsubst %.c,build/%.o,$(wildcard src/*.c)) test_objs …\n"],["THANKS","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/gumbo-parser/THANKS.html","","<p>Gumbo HTML parser THANKS file\n<p>Gumbo was originally written by Jonathan Tang, but many people helped out …\n"],["tokenizer.rex","","vendor/bundle/ruby/3_4_0/gems/nokogiri-1_18_0-x86_64-linux-gnu/lib/nokogiri/css/tokenizer_rex.html","","<p>module Nokogiri module CSS # class Tokenizer\n<p>macro\n\n<pre>nl        (\\n|\\r\\n|\\r|\\f)\nw         [\\s]*\nnonascii  ...</pre>\n"],["BSDL","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/BSDL.html","","<p>Copyright © 1993-2013 Yukihiro Matsumoto. All rights reserved.\n<p>Redistribution and use in source and …\n"],["COPYING","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/COPYING.html","","<p>Ruby is copyrighted free software by Yukihiro Matsumoto &lt;matz@netlab.jp&gt;. You can redistribute …\n"],["ChangeLog","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/ChangeLog.html","","<p>ChangeLog\n<p>2007-02-20\n<p>Tue Feb 20 18:45:45 2007  Minero Aoki  &lt;aamine@loveruby.net&gt;\n"],["README.ja","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/README_ja_rdoc.html","","<p>Racc\n<p>github.com/ruby/racc\n\n<p>DESCRIPTION:\n"],["README","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/README_rdoc.html","","<p>Racc\n<p>github.com/ruby/racc\n\n<p>DESCRIPTION:\n"],["TODO","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/TODO.html","","<p>check ‘error’ token handling.\n<p>interactive transition table monitor.\n<p>support backtracking.\n"],["grammar.en","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/doc/en/grammar_en_rdoc.html","","<p>Racc Grammar File Reference\n<p>Global Structure\n<p>Class Block and User Code Block\n"],["grammar2.en","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/doc/en/grammar2_en_rdoc.html","","<p>Racc Grammar File Reference\n<p>Global Structure\n<p>Class Block and User Code Block\n"],["command.ja.html","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/doc/ja/command_ja_html.html","","<p>&lt;h1&gt;Raccコマンドリファレンス&lt;/h1&gt; &lt;p&gt; racc [-o&lt;var&gt;filename&lt;/var&gt;] [–output-file=&lt;var&gt;filename&lt;/var&gt;] …\n"],["debug.ja","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/doc/ja/debug_ja_rdoc.html","","<p>パーサのデバッグ\n<p>ここでは、Racc を使っていくうえで遭遇しそうな問題について書きます。\n<p>文法ファイルがパースエラーになる\n"],["grammar.ja","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/doc/ja/grammar_ja_rdoc.html","","<p>規則ファイル文法リファレンス\n<p>文法に関する前バージョンとの非互換\n\n<pre>* (1.2.5) ユーザーコードを連結する時、外部ファイルよりも\n          埋めこんであるコードを先に連結します。\n* (1.1.6) ...</pre>\n"],["index.ja.html","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/doc/ja/index_ja_html.html","","<p>&lt;h1&gt;Racc ユーザマニュアル&lt;/h1&gt; &lt;p&gt;バージョン 1.4 対応&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=“usage.html”&gt;Racc …\n"],["parser.ja","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/doc/ja/parser_ja_rdoc.html","","<p>class Racc::Parser\n<p>Racc の生成するパーサはすべて Racc::Parser クラスを継承します。Racc::Parser クラスにはパース中に使用するメソッドがいくつかあり、そのようなメソッドをオーバーロードすると、パーサを初期化したりすることができます。 …\n"],["usage.ja.html","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/doc/ja/usage_ja_html.html","","<p>&lt;h1&gt;Racc の使い方&lt;/h1&gt; &lt;p&gt; Racc は文法規則から Ruby で書かれたパーサを生成するパーサジェネレータです。パーサ生成アルゴリズムには yacc …\n"],["Makefile","","vendor/bundle/ruby/3_4_0/gems/racc-1_8_1/ext/racc/cparse/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don’t work. V = 0 V0 = $(V:0=) Q1 = $(V:1=) …\n"],["History","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/History_rdoc.html","","<p>13.0.6\n<p>Additional fix for #389 Pull request #390 by hsbt\n\n<p>13.0.5\n"],["MIT-LICENSE","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/MIT-LICENSE.html","","<p>Copyright © Jim Weirich\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy …\n"],["README","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/README_rdoc.html","","<p>RAKE – Ruby Make\n<p>home  &mdash; github.com/ruby/rake\n<p>bugs  &mdash; github.com/ruby/rake/issues\n"],["command_line_usage","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/doc/command_line_usage_rdoc.html","","<p>Rake Command Line Usage\n<p>Rake is invoked from the command line using:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">% rake </span>[<span class=\"ruby-identifier\">options</span> <span class=\"ruby-operator\">...</span>]  [<span class=\"ruby-constant\">VAR</span>=<span class=\"ruby-constant\">VALUE</span> <span class=\"ruby-operator\">...</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Rakefile1","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/doc/example/Rakefile1.html","","<p>task :default =&gt; [:main]\n<p>file “a.o” =&gt; [“a.c”] do |t|\n\n<pre>src = t.name.sub(/\\.o$/, ...</pre>\n"],["Rakefile2","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/doc/example/Rakefile2.html","","<p># Using the power of Ruby\n<p>task :default =&gt; [:main]\n<p>def ext(fn, newext)\n"],["glossary","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/doc/glossary_rdoc.html","","<p>Glossary\n<p>action  &mdash; Code to be executed in order to perform a task.  Actions in a Rakefile are specified …\n"],["proto_rake","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/doc/proto_rake_rdoc.html","","<p>Original Prototype Rake\n<p>This is the original 100 line prototype rake program.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\">#!/usr/bin/env ruby</span>\n\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rake.1","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/doc/rake_1.html","","<p>.Dd June 12, 2016 .Dt RAKE 1 .Os rake 11.2.2 .Sh NAME .Nm rake .Nd make-like build utility for Ruby .Sh …\n"],["rakefile","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/doc/rakefile_rdoc.html","","<p>Rakefile Format\n<p>First of all, there is no special format for a Rakefile.  A Rakefile contains executable …\n"],["rational","","vendor/bundle/ruby/3_4_0/gems/rake-13_2_1/doc/rational_rdoc.html","","<p>Why rake?\n<p>Ok, let me state from the beginning that I never intended to write this code.  I’m not convinced …\n"],["Gemfile","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/Gemfile.html","","<p>source “rubygems.org”\n<p>gem “rake”\n<p>group :development do\n"],["History","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/History_md.html","","<p>1.2.8 / 2024-10-04\n<p>Improvements:\n<p>GH-240: Stopped to generate tasks for nonexistent files.\n"],["LICENSE","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/LICENSE_txt.html","","<p>Copyright © 2008-2011 Luis Lavena.\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/README_md.html","","<p>What is rake-compiler?\n<p>rake-compiler is first and foremost a productivity tool for Ruby developers.\nIts ...\n"],["Rakefile","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/Rakefile.html","","<p>#– # Copyright © 2008 Luis Lavena # # This source code is released under the MIT License. # See LICENSE …\n"],["compile.feature","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/features/compile_feature.html","","<p>Feature: Compile C code into Ruby extensions.\n\n<pre>In order to automate compilation process.\nAs a Gem developer. ...</pre>\n"],["cross-compile.feature","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/features/cross-compile_feature.html","","<p>Feature: Cross-compile C extensions\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">In</span> <span class=\"ruby-identifier\">order</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">avoid</span> <span class=\"ruby-identifier\">bitching</span> <span class=\"ruby-identifier\">from</span> <span class=\"ruby-constant\">Windows</span> <span class=\"ruby-identifier\">users</span>\n<span class=\"ruby-constant\">As</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-constant\">Ruby</span> <span class=\"ruby-identifier\">developer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["cross-package-multi.feature","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/features/cross-package-multi_feature.html","","<p>Feature: Generate multiple Windows gems from Linux\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">In</span> <span class=\"ruby-identifier\">order</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">keep</span> <span class=\"ruby-identifier\">compatibility</span> <span class=\"ruby-identifier\">with</span> <span class=\"ruby-identifier\">versions</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-constant\">Ruby</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["cross-package.feature","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/features/cross-package_feature.html","","<p>Feature: Generate Windows gems from Linux\n\n<pre>In order to keep sanity in the Ruby world\nAs a Gem developer ...</pre>\n"],["java-compile.feature","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/features/java-compile_feature.html","","<p>Feature: JCompile Java extensions\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">In</span> <span class=\"ruby-identifier\">order</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">avoid</span> <span class=\"ruby-identifier\">bitching</span> <span class=\"ruby-identifier\">from</span> <span class=\"ruby-constant\">Enterprise</span> <span class=\"ruby-identifier\">users</span>\n<span class=\"ruby-constant\">As</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-constant\">Ruby</span> <span class=\"ruby-identifier\">developer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["java-no-native-compile.feature","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/features/java-no-native-compile_feature.html","","<p>Feature: No native or cross compilation on JRuby\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">In</span> <span class=\"ruby-identifier\">order</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">present</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">good</span> <span class=\"ruby-identifier\">user</span> <span class=\"ruby-identifier\">experience</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">users</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["java-package.feature","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/features/java-package_feature.html","","<p>Feature: Generate JRuby gems from JRuby or MRI\n\n<pre>In order to keep sanity in the Ruby world\nAs a Gem developer ...</pre>\n"],["package.feature","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/features/package_feature.html","","<p>Feature: Distribute native extension with gems\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">In</span> <span class=\"ruby-identifier\">order</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">avoid</span> <span class=\"ruby-identifier\">compiler</span> <span class=\"ruby-identifier\">toolchain</span> <span class=\"ruby-identifier\">requirement</span> <span class=\"ruby-identifier\">during</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["cross-ruby.rake","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/tasks/bin/cross-ruby_rake.html","","<p>#– # Cross-compile ruby, using Rake # # This source code is released under the MIT License. # See LICENSE …\n"],["bootstrap.rake","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/tasks/bootstrap_rake.html","","<p>desc ‘Ensure all the cross compiled versions are installed’ task :bootstrap do\n\n<pre>fail &quot;Sorry, this ...</pre>\n"],["common.rake","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/tasks/common_rake.html","","<p>require ‘rake/clean’\n<p># common pattern cleanup CLOBBER.include(‘tmp’)\n<p># set default task …\n"],["cucumber.rake","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/tasks/cucumber_rake.html","","<p>begin\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;cucumber/rake/task&#39;</span>\n</pre>\n<p>rescue LoadError\n"],["gem.rake","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/tasks/gem_rake.html","","<p>require “bundler/gem_helper”\n<p>base_dir = File.join(__dir__, “..”) helper = Bundler::GemHelper.new(base_dir) …\n"],["rspec.rake","","vendor/bundle/ruby/3_4_0/gems/rake-compiler-1_2_8/tasks/rspec_rake.html","","<p>begin\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&quot;rspec/core/rake_task&quot;</span>\n</pre>\n<p>rescue LoadError\n"],["Gemfile","","vendor/bundle/ruby/3_4_0/gems/ruby_memcheck-3_0_0/Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org”\n<p>gemspec\n"],["Gemfile.lock","","vendor/bundle/ruby/3_4_0/gems/ruby_memcheck-3_0_0/Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  ruby_memcheck (2.3.0)\n    nokogiri</pre>\n<p>GEM\n"],["LICENSE","","vendor/bundle/ruby/3_4_0/gems/ruby_memcheck-3_0_0/LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright 2021-present, Shopify Inc.\n<p>Permission is hereby granted, free of charge, …\n"],["README","","vendor/bundle/ruby/3_4_0/gems/ruby_memcheck-3_0_0/README_md.html","","<p>ruby_memcheck\n<p>This gem provides a sane way to use Valgrind’s memcheck on your native extension gem. …\n"],["Rakefile","","vendor/bundle/ruby/3_4_0/gems/ruby_memcheck-3_0_0/Rakefile.html","","<p># frozen_string_literal: true\n<p>require “bundler/gem_tasks” require “rake/testtask” …\n"],["ruby.supp","","vendor/bundle/ruby/3_4_0/gems/ruby_memcheck-3_0_0/suppressions/ruby_supp.html","","<p>{\n\n<pre>On platforms where memcpy is safe for overlapped memory, the compiler will sometimes replace memmove ...</pre>\n"],["CHANGELOG","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/CHANGELOG_md.html","","<p>0.2.25\n<p>Fix GC marking\n\n<p>0.2.16\n"],["Gemfile","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/Gemfile.html","","<p>source ‘rubygems.org’ gemspec\n"],["LICENSE","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/LICENSE.html","","<p>The MIT License (MIT)\n<p>Copyright © 2013-2015 Aman Gupta\n<p>Permission is hereby granted, free of charge, …\n"],["README","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/README_md.html","","<p>Stackprof\n<p>A sampling call-stack profiler for Ruby.\n<p>Inspired heavily by gperftools, and written as a replacement …\n"],["Rakefile","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/Rakefile.html","","<p>require “bundler/gem_tasks” require “rake/testtask”\n<p>Rake::TestTask.new(:test) do |t| …\n"],["stackprof-flamegraph.pl","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/bin/stackprof-flamegraph_pl.html","","<p>#!/usr/bin/env ruby exec(File.expand_path(“../../vendor/FlameGraph/flamegraph.pl”, __FILE__), …\n"],["stackprof-gprof2dot.py","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/bin/stackprof-gprof2dot_py.html","","<p>#!/usr/bin/env ruby exec(File.expand_path(“../../vendor/gprof2dot/gprof2dot.py”, __FILE__), …\n"],["Makefile","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/ext/stackprof/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don’t work. V = 0 V0 = $(V:0=) Q1 = $(V:1=) …\n"],["flamegraph.js","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/lib/stackprof/flamegraph/flamegraph_js.html","","<p>if (typeof Element.prototype.matches !== ‘function’) {\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Element</span>.<span class=\"ruby-identifier\">prototype</span>.<span class=\"ruby-identifier\">matches</span> = <span class=\"ruby-constant\">Element</span>.<span class=\"ruby-identifier\">prototype</span>.<span class=\"ruby-identifier\">msMatchesSelector</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["viewer.html","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/lib/stackprof/flamegraph/viewer_html.html","","<p>&lt;html&gt; &lt;head&gt; &lt;title&gt;flamegraph&lt;/title&gt; &lt;style&gt;\n\n<pre>body {\n  margin: 0;\n  padding: ...</pre>\n"],["README","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/vendor/FlameGraph/README.html","","<p>Flame Graphs visualize profiled code-paths.\n<p>Website: www.brendangregg.com/flamegraphs.html\n<p>CPU profiling …\n"],["flamegraph.pl","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/vendor/FlameGraph/flamegraph_pl.html","","<p>#!/usr/bin/perl -w # # flamegraph.pl         flame stack grapher. # # This takes stack samples and renders …\n"],["gprof2dot.py","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/vendor/gprof2dot/gprof2dot_py.html","","<p>#!/usr/bin/env python # # Copyright 2008-2009 Jose Fonseca # # This program is free software: you can …\n"],["hotshotmain.py","","vendor/bundle/ruby/3_4_0/gems/stackprof-0_2_26/vendor/gprof2dot/hotshotmain_py.html","","<p>#!/usr/bin/env python # # Copyright 2007 Jose Fonseca # # This program is free software: you can redistribute …\n"]]}}